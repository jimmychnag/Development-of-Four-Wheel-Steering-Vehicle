
ControlBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc4  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08003d8c  08003d8c  00004d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ac  080043ac  0000602c  2**0
                  CONTENTS
  4 .ARM          00000008  080043ac  080043ac  000053ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043b4  080043b4  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b4  080043b4  000053b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043b8  080043b8  000053b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  080043bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000002c  080043e8  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080043e8  00006210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bde  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c23  00000000  00000000  0000dc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000f860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004dc  00000000  00000000  0000ff30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021410  00000000  00000000  0001040c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a39c  00000000  00000000  0003181c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6a19  00000000  00000000  0003bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001025d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001910  00000000  00000000  00102614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00103f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000002c 	.word	0x2000002c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003d74 	.word	0x08003d74

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000030 	.word	0x20000030
 8000204:	08003d74 	.word	0x08003d74

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	0000      	movs	r0, r0
	...

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f000 fe04 	bl	8001998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 fcfa 	bl	8001788 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  /*模块初始化*/
	OLED_Init();		//OLED初始化
 8000d94:	f002 f8e6 	bl	8002f64 <OLED_Init>
	Timer_Init();
 8000d98:	f002 fe8c 	bl	8003ab4 <Timer_Init>
	Motor_Init();
 8000d9c:	f001 fd54 	bl	8002848 <Motor_Init>

	Serial_Init();		//串口初始化
 8000da0:	f002 fbb6 	bl	8003510 <Serial_Init>
	JoinStick_Init();
 8000da4:	f002 fd2e 	bl	8003804 <JoinStick_Init>
//	AD_Init();
//	Encoder_Init();


	OLED_ShowString(1, 1, "TIM1:");
 8000da8:	4aa7      	ldr	r2, [pc, #668]	@ (8001048 <main+0x2c0>)
 8000daa:	2101      	movs	r1, #1
 8000dac:	2001      	movs	r0, #1
 8000dae:	f002 f85d 	bl	8002e6c <OLED_ShowString>
	OLED_ShowString(2, 1, "TIM2:");
 8000db2:	4aa6      	ldr	r2, [pc, #664]	@ (800104c <main+0x2c4>)
 8000db4:	2101      	movs	r1, #1
 8000db6:	2002      	movs	r0, #2
 8000db8:	f002 f858 	bl	8002e6c <OLED_ShowString>
	OLED_ShowString(3, 1, "TIM3:");
 8000dbc:	4aa4      	ldr	r2, [pc, #656]	@ (8001050 <main+0x2c8>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f002 f853 	bl	8002e6c <OLED_ShowString>
	OLED_ShowString(4, 1, "TIM4:");
 8000dc6:	4aa3      	ldr	r2, [pc, #652]	@ (8001054 <main+0x2cc>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	2004      	movs	r0, #4
 8000dcc:	f002 f84e 	bl	8002e6c <OLED_ShowString>


	// 30RPM下 Kp = 2 Ki = 0.1 Kd = 0.02 good
	//wheel1
	wheel1.param.Kp = 1.5;
 8000dd0:	4ba1      	ldr	r3, [pc, #644]	@ (8001058 <main+0x2d0>)
 8000dd2:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000dd6:	635a      	str	r2, [r3, #52]	@ 0x34
	wheel1.param.Ki = 0.15 / wheel1.param.Kp  ;
 8000dd8:	4b9f      	ldr	r3, [pc, #636]	@ (8001058 <main+0x2d0>)
 8000dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fb77 	bl	80004d0 <__aeabi_f2d>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	a194      	add	r1, pc, #592	@ (adr r1, 8001038 <main+0x2b0>)
 8000de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000dec:	f7ff fcf2 	bl	80007d4 <__aeabi_ddiv>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4610      	mov	r0, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	f7ff fdfc 	bl	80009f4 <__aeabi_d2f>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a96      	ldr	r2, [pc, #600]	@ (8001058 <main+0x2d0>)
 8000e00:	6393      	str	r3, [r2, #56]	@ 0x38
	wheel1.param.Kd = 0.03 / wheel1.param.Kp ;
 8000e02:	4b95      	ldr	r3, [pc, #596]	@ (8001058 <main+0x2d0>)
 8000e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fb62 	bl	80004d0 <__aeabi_f2d>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	a18b      	add	r1, pc, #556	@ (adr r1, 8001040 <main+0x2b8>)
 8000e12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e16:	f7ff fcdd 	bl	80007d4 <__aeabi_ddiv>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	f7ff fde7 	bl	80009f4 <__aeabi_d2f>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a8b      	ldr	r2, [pc, #556]	@ (8001058 <main+0x2d0>)
 8000e2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
	wheel1.param.Kr = 1.0f;
 8000e2c:	4b8a      	ldr	r3, [pc, #552]	@ (8001058 <main+0x2d0>)
 8000e2e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000e32:	641a      	str	r2, [r3, #64]	@ 0x40
	wheel1.param.Umax = 200.0f;
 8000e34:	4b88      	ldr	r3, [pc, #544]	@ (8001058 <main+0x2d0>)
 8000e36:	4a89      	ldr	r2, [pc, #548]	@ (800105c <main+0x2d4>)
 8000e38:	645a      	str	r2, [r3, #68]	@ 0x44
	wheel1.param.Umin = -200.0f;
 8000e3a:	4b87      	ldr	r3, [pc, #540]	@ (8001058 <main+0x2d0>)
 8000e3c:	4a88      	ldr	r2, [pc, #544]	@ (8001060 <main+0x2d8>)
 8000e3e:	649a      	str	r2, [r3, #72]	@ 0x48
	wheel1.term.c1 = 0.1f;  // D 濾波器
 8000e40:	4b85      	ldr	r3, [pc, #532]	@ (8001058 <main+0x2d0>)
 8000e42:	4a88      	ldr	r2, [pc, #544]	@ (8001064 <main+0x2dc>)
 8000e44:	62da      	str	r2, [r3, #44]	@ 0x2c
	wheel1.term.c2 = 0.9f;
 8000e46:	4b84      	ldr	r3, [pc, #528]	@ (8001058 <main+0x2d0>)
 8000e48:	4a87      	ldr	r2, [pc, #540]	@ (8001068 <main+0x2e0>)
 8000e4a:	631a      	str	r2, [r3, #48]	@ 0x30

	//wheel2
	wheel2.param.Kp = 1.5;
 8000e4c:	4b87      	ldr	r3, [pc, #540]	@ (800106c <main+0x2e4>)
 8000e4e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000e52:	635a      	str	r2, [r3, #52]	@ 0x34
	wheel2.param.Ki = 0.15 / wheel2.param.Kp  ;
 8000e54:	4b85      	ldr	r3, [pc, #532]	@ (800106c <main+0x2e4>)
 8000e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb39 	bl	80004d0 <__aeabi_f2d>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	a175      	add	r1, pc, #468	@ (adr r1, 8001038 <main+0x2b0>)
 8000e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e68:	f7ff fcb4 	bl	80007d4 <__aeabi_ddiv>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff fdbe 	bl	80009f4 <__aeabi_d2f>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a7c      	ldr	r2, [pc, #496]	@ (800106c <main+0x2e4>)
 8000e7c:	6393      	str	r3, [r2, #56]	@ 0x38
	wheel2.param.Kd = 0.03 / wheel2.param.Kp ;
 8000e7e:	4b7b      	ldr	r3, [pc, #492]	@ (800106c <main+0x2e4>)
 8000e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fb24 	bl	80004d0 <__aeabi_f2d>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	a16c      	add	r1, pc, #432	@ (adr r1, 8001040 <main+0x2b8>)
 8000e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e92:	f7ff fc9f 	bl	80007d4 <__aeabi_ddiv>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fda9 	bl	80009f4 <__aeabi_d2f>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a71      	ldr	r2, [pc, #452]	@ (800106c <main+0x2e4>)
 8000ea6:	63d3      	str	r3, [r2, #60]	@ 0x3c
	wheel2.param.Kr = 1.0f;
 8000ea8:	4b70      	ldr	r3, [pc, #448]	@ (800106c <main+0x2e4>)
 8000eaa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000eae:	641a      	str	r2, [r3, #64]	@ 0x40
	wheel2.param.Umax = 200.0f;
 8000eb0:	4b6e      	ldr	r3, [pc, #440]	@ (800106c <main+0x2e4>)
 8000eb2:	4a6a      	ldr	r2, [pc, #424]	@ (800105c <main+0x2d4>)
 8000eb4:	645a      	str	r2, [r3, #68]	@ 0x44
	wheel2.param.Umin = -200.0f;
 8000eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800106c <main+0x2e4>)
 8000eb8:	4a69      	ldr	r2, [pc, #420]	@ (8001060 <main+0x2d8>)
 8000eba:	649a      	str	r2, [r3, #72]	@ 0x48
	wheel2.term.c1 = 0.1f;  // D 濾波器
 8000ebc:	4b6b      	ldr	r3, [pc, #428]	@ (800106c <main+0x2e4>)
 8000ebe:	4a69      	ldr	r2, [pc, #420]	@ (8001064 <main+0x2dc>)
 8000ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
	wheel2.term.c2 = 0.9f;
 8000ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800106c <main+0x2e4>)
 8000ec4:	4a68      	ldr	r2, [pc, #416]	@ (8001068 <main+0x2e0>)
 8000ec6:	631a      	str	r2, [r3, #48]	@ 0x30

	//wheel3
	wheel3.param.Kp = 1.5;
 8000ec8:	4b69      	ldr	r3, [pc, #420]	@ (8001070 <main+0x2e8>)
 8000eca:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34
	wheel3.param.Ki = 0.15 / wheel3.param.Kp  ;
 8000ed0:	4b67      	ldr	r3, [pc, #412]	@ (8001070 <main+0x2e8>)
 8000ed2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fafb 	bl	80004d0 <__aeabi_f2d>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	a156      	add	r1, pc, #344	@ (adr r1, 8001038 <main+0x2b0>)
 8000ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ee4:	f7ff fc76 	bl	80007d4 <__aeabi_ddiv>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	4610      	mov	r0, r2
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f7ff fd80 	bl	80009f4 <__aeabi_d2f>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a5e      	ldr	r2, [pc, #376]	@ (8001070 <main+0x2e8>)
 8000ef8:	6393      	str	r3, [r2, #56]	@ 0x38
	wheel3.param.Kd = 0.03 / wheel3.param.Kp ;
 8000efa:	4b5d      	ldr	r3, [pc, #372]	@ (8001070 <main+0x2e8>)
 8000efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fae6 	bl	80004d0 <__aeabi_f2d>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	a14d      	add	r1, pc, #308	@ (adr r1, 8001040 <main+0x2b8>)
 8000f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f0e:	f7ff fc61 	bl	80007d4 <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fd6b 	bl	80009f4 <__aeabi_d2f>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a53      	ldr	r2, [pc, #332]	@ (8001070 <main+0x2e8>)
 8000f22:	63d3      	str	r3, [r2, #60]	@ 0x3c
	wheel3.param.Kr = 1.0f;
 8000f24:	4b52      	ldr	r3, [pc, #328]	@ (8001070 <main+0x2e8>)
 8000f26:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f2a:	641a      	str	r2, [r3, #64]	@ 0x40
	wheel3.param.Umax = 200.0f;
 8000f2c:	4b50      	ldr	r3, [pc, #320]	@ (8001070 <main+0x2e8>)
 8000f2e:	4a4b      	ldr	r2, [pc, #300]	@ (800105c <main+0x2d4>)
 8000f30:	645a      	str	r2, [r3, #68]	@ 0x44
	wheel3.param.Umin = -200.0f;
 8000f32:	4b4f      	ldr	r3, [pc, #316]	@ (8001070 <main+0x2e8>)
 8000f34:	4a4a      	ldr	r2, [pc, #296]	@ (8001060 <main+0x2d8>)
 8000f36:	649a      	str	r2, [r3, #72]	@ 0x48
	wheel3.term.c1 = 0.1f;  // D 濾波器
 8000f38:	4b4d      	ldr	r3, [pc, #308]	@ (8001070 <main+0x2e8>)
 8000f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8001064 <main+0x2dc>)
 8000f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	wheel3.term.c2 = 0.9f;
 8000f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8001070 <main+0x2e8>)
 8000f40:	4a49      	ldr	r2, [pc, #292]	@ (8001068 <main+0x2e0>)
 8000f42:	631a      	str	r2, [r3, #48]	@ 0x30

	//wheel4
	wheel4.param.Kp = 1.5;
 8000f44:	4b4b      	ldr	r3, [pc, #300]	@ (8001074 <main+0x2ec>)
 8000f46:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000f4a:	635a      	str	r2, [r3, #52]	@ 0x34
	wheel4.param.Ki = 0.15 / wheel4.param.Kp  ;
 8000f4c:	4b49      	ldr	r3, [pc, #292]	@ (8001074 <main+0x2ec>)
 8000f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fabd 	bl	80004d0 <__aeabi_f2d>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	a137      	add	r1, pc, #220	@ (adr r1, 8001038 <main+0x2b0>)
 8000f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f60:	f7ff fc38 	bl	80007d4 <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fd42 	bl	80009f4 <__aeabi_d2f>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a40      	ldr	r2, [pc, #256]	@ (8001074 <main+0x2ec>)
 8000f74:	6393      	str	r3, [r2, #56]	@ 0x38
	wheel4.param.Kd = 0.03 / wheel4.param.Kp ;
 8000f76:	4b3f      	ldr	r3, [pc, #252]	@ (8001074 <main+0x2ec>)
 8000f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff faa8 	bl	80004d0 <__aeabi_f2d>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	a12e      	add	r1, pc, #184	@ (adr r1, 8001040 <main+0x2b8>)
 8000f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f8a:	f7ff fc23 	bl	80007d4 <__aeabi_ddiv>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fd2d 	bl	80009f4 <__aeabi_d2f>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a35      	ldr	r2, [pc, #212]	@ (8001074 <main+0x2ec>)
 8000f9e:	63d3      	str	r3, [r2, #60]	@ 0x3c
	wheel4.param.Kr = 1.0f;
 8000fa0:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <main+0x2ec>)
 8000fa2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000fa6:	641a      	str	r2, [r3, #64]	@ 0x40
	wheel4.param.Umax = 200.0f;
 8000fa8:	4b32      	ldr	r3, [pc, #200]	@ (8001074 <main+0x2ec>)
 8000faa:	4a2c      	ldr	r2, [pc, #176]	@ (800105c <main+0x2d4>)
 8000fac:	645a      	str	r2, [r3, #68]	@ 0x44
	wheel4.param.Umin = -200.0f;
 8000fae:	4b31      	ldr	r3, [pc, #196]	@ (8001074 <main+0x2ec>)
 8000fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8001060 <main+0x2d8>)
 8000fb2:	649a      	str	r2, [r3, #72]	@ 0x48
	wheel4.term.c1 = 0.1f;  // D 濾波器
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <main+0x2ec>)
 8000fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8001064 <main+0x2dc>)
 8000fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
	wheel4.term.c2 = 0.9f;
 8000fba:	4b2e      	ldr	r3, [pc, #184]	@ (8001074 <main+0x2ec>)
 8000fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001068 <main+0x2e0>)
 8000fbe:	631a      	str	r2, [r3, #48]	@ 0x30
//	  y = TIM4->CNT;
//	  PWM2_SetCompare1(1000);
//	  PWM4_SetCompare1(1000);
//    AD_GetValue();
//    Delay_ms(100);
	if(Serial_RxFlag == 1)
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001078 <main+0x2f0>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d11f      	bne.n	8001008 <main+0x280>
	{
		OLED_ShowNum(1, 7, Serial_RxPacket[0], 5);	//不断刷新显示编码器测得的最新速度
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800107c <main+0x2f4>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	2305      	movs	r3, #5
 8000fd0:	2107      	movs	r1, #7
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f001 ff88 	bl	8002ee8 <OLED_ShowNum>
		OLED_ShowNum(2, 7, Serial_RxPacket[1], 5);	//不断刷新显示编码器测得的最新速度
 8000fd8:	4b28      	ldr	r3, [pc, #160]	@ (800107c <main+0x2f4>)
 8000fda:	885b      	ldrh	r3, [r3, #2]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	2305      	movs	r3, #5
 8000fe0:	2107      	movs	r1, #7
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f001 ff80 	bl	8002ee8 <OLED_ShowNum>
		OLED_ShowNum(3, 7, Serial_RxPacket[2], 5);	//不断刷新显示编码器测得的最新速度
 8000fe8:	4b24      	ldr	r3, [pc, #144]	@ (800107c <main+0x2f4>)
 8000fea:	889b      	ldrh	r3, [r3, #4]
 8000fec:	461a      	mov	r2, r3
 8000fee:	2305      	movs	r3, #5
 8000ff0:	2107      	movs	r1, #7
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f001 ff78 	bl	8002ee8 <OLED_ShowNum>
		OLED_ShowNum(4, 7, Serial_RxPacket[3], 5);	//不断刷新显示编码器测得的最新速度
 8000ff8:	4b20      	ldr	r3, [pc, #128]	@ (800107c <main+0x2f4>)
 8000ffa:	88db      	ldrh	r3, [r3, #6]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2305      	movs	r3, #5
 8001000:	2107      	movs	r1, #7
 8001002:	2004      	movs	r0, #4
 8001004:	f001 ff70 	bl	8002ee8 <OLED_ShowNum>
	}

	if(JoinStickFlag == 1 && FirstJoint == 1)
 8001008:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <main+0x2f8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d1d7      	bne.n	8000fc0 <main+0x238>
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <main+0x2fc>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d1d3      	bne.n	8000fc0 <main+0x238>
	{
		Vx_central = JoinStick[0];
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <main+0x300>)
 800101a:	881a      	ldrh	r2, [r3, #0]
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <main+0x304>)
 800101e:	801a      	strh	r2, [r3, #0]
		Vy_central = JoinStick[1];
 8001020:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <main+0x300>)
 8001022:	885a      	ldrh	r2, [r3, #2]
 8001024:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <main+0x308>)
 8001026:	801a      	strh	r2, [r3, #0]
		Wz_central = JoinStick[2];
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <main+0x300>)
 800102a:	889a      	ldrh	r2, [r3, #4]
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <main+0x30c>)
 800102e:	801a      	strh	r2, [r3, #0]
		FirstJoint = 0;
 8001030:	4b14      	ldr	r3, [pc, #80]	@ (8001084 <main+0x2fc>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
	if(Serial_RxFlag == 1)
 8001036:	e7c3      	b.n	8000fc0 <main+0x238>
 8001038:	33333333 	.word	0x33333333
 800103c:	3fc33333 	.word	0x3fc33333
 8001040:	eb851eb8 	.word	0xeb851eb8
 8001044:	3f9eb851 	.word	0x3f9eb851
 8001048:	08003d8c 	.word	0x08003d8c
 800104c:	08003d94 	.word	0x08003d94
 8001050:	08003d9c 	.word	0x08003d9c
 8001054:	08003da4 	.word	0x08003da4
 8001058:	20000048 	.word	0x20000048
 800105c:	43480000 	.word	0x43480000
 8001060:	c3480000 	.word	0xc3480000
 8001064:	3dcccccd 	.word	0x3dcccccd
 8001068:	3f666666 	.word	0x3f666666
 800106c:	20000094 	.word	0x20000094
 8001070:	200000e0 	.word	0x200000e0
 8001074:	2000012c 	.word	0x2000012c
 8001078:	200001f6 	.word	0x200001f6
 800107c:	200001f8 	.word	0x200001f8
 8001080:	2000020a 	.word	0x2000020a
 8001084:	20000014 	.word	0x20000014
 8001088:	20000204 	.word	0x20000204
 800108c:	200001e8 	.word	0x200001e8
 8001090:	200001ea 	.word	0x200001ea
 8001094:	200001ec 	.word	0x200001ec

08001098 <EncoderSpeed>:
  }
  /* USER CODE END 3 */
}

void EncoderSpeed(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
	//wheel1
	wheel1_count = Serial_RxPacket[0];
 800109c:	4b78      	ldr	r3, [pc, #480]	@ (8001280 <EncoderSpeed+0x1e8>)
 800109e:	881a      	ldrh	r2, [r3, #0]
 80010a0:	4b78      	ldr	r3, [pc, #480]	@ (8001284 <EncoderSpeed+0x1ec>)
 80010a2:	801a      	strh	r2, [r3, #0]
	wheel1_current = (int16_t)wheel1_count;
 80010a4:	4b77      	ldr	r3, [pc, #476]	@ (8001284 <EncoderSpeed+0x1ec>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b77      	ldr	r3, [pc, #476]	@ (8001288 <EncoderSpeed+0x1f0>)
 80010ac:	801a      	strh	r2, [r3, #0]
	wheel1_delta = (int16_t)((uint16_t)wheel1_current - (uint16_t)wheel1_last_count);
 80010ae:	4b76      	ldr	r3, [pc, #472]	@ (8001288 <EncoderSpeed+0x1f0>)
 80010b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	4b75      	ldr	r3, [pc, #468]	@ (800128c <EncoderSpeed+0x1f4>)
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b72      	ldr	r3, [pc, #456]	@ (8001290 <EncoderSpeed+0x1f8>)
 80010c6:	801a      	strh	r2, [r3, #0]
	wheel1_last_count = wheel1_current;
 80010c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001288 <EncoderSpeed+0x1f0>)
 80010ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010ce:	4b6f      	ldr	r3, [pc, #444]	@ (800128c <EncoderSpeed+0x1f4>)
 80010d0:	801a      	strh	r2, [r3, #0]

	wheel1_motor_rps = (wheel1_delta / TICKS_PER_REV) / Sample_time ;
 80010d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001290 <EncoderSpeed+0x1f8>)
 80010d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e0:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 8001294 <EncoderSpeed+0x1fc>
 80010e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010e8:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8001298 <EncoderSpeed+0x200>
 80010ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f0:	4b6a      	ldr	r3, [pc, #424]	@ (800129c <EncoderSpeed+0x204>)
 80010f2:	edc3 7a00 	vstr	s15, [r3]
	wheel1_motor_rpm = wheel1_motor_rps * 60;
 80010f6:	4b69      	ldr	r3, [pc, #420]	@ (800129c <EncoderSpeed+0x204>)
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80012a0 <EncoderSpeed+0x208>
 8001100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001104:	4b67      	ldr	r3, [pc, #412]	@ (80012a4 <EncoderSpeed+0x20c>)
 8001106:	edc3 7a00 	vstr	s15, [r3]
	WheelSpeed.speed1 = wheel1_motor_rpm;
 800110a:	4b66      	ldr	r3, [pc, #408]	@ (80012a4 <EncoderSpeed+0x20c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a66      	ldr	r2, [pc, #408]	@ (80012a8 <EncoderSpeed+0x210>)
 8001110:	6013      	str	r3, [r2, #0]

	//wheel2
	wheel2_count = Serial_RxPacket[1];
 8001112:	4b5b      	ldr	r3, [pc, #364]	@ (8001280 <EncoderSpeed+0x1e8>)
 8001114:	885a      	ldrh	r2, [r3, #2]
 8001116:	4b65      	ldr	r3, [pc, #404]	@ (80012ac <EncoderSpeed+0x214>)
 8001118:	801a      	strh	r2, [r3, #0]
	wheel2_current = (int16_t)wheel2_count;
 800111a:	4b64      	ldr	r3, [pc, #400]	@ (80012ac <EncoderSpeed+0x214>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	b21a      	sxth	r2, r3
 8001120:	4b63      	ldr	r3, [pc, #396]	@ (80012b0 <EncoderSpeed+0x218>)
 8001122:	801a      	strh	r2, [r3, #0]
	wheel2_delta = (int16_t)((uint16_t)wheel2_current - (uint16_t)wheel2_last_count);
 8001124:	4b62      	ldr	r3, [pc, #392]	@ (80012b0 <EncoderSpeed+0x218>)
 8001126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b61      	ldr	r3, [pc, #388]	@ (80012b4 <EncoderSpeed+0x21c>)
 800112e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001132:	b29b      	uxth	r3, r3
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	b29b      	uxth	r3, r3
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b5f      	ldr	r3, [pc, #380]	@ (80012b8 <EncoderSpeed+0x220>)
 800113c:	801a      	strh	r2, [r3, #0]
	wheel2_last_count = wheel2_current;
 800113e:	4b5c      	ldr	r3, [pc, #368]	@ (80012b0 <EncoderSpeed+0x218>)
 8001140:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001144:	4b5b      	ldr	r3, [pc, #364]	@ (80012b4 <EncoderSpeed+0x21c>)
 8001146:	801a      	strh	r2, [r3, #0]

	wheel2_motor_rps = (wheel2_delta / TICKS_PER_REV) / Sample_time ;
 8001148:	4b5b      	ldr	r3, [pc, #364]	@ (80012b8 <EncoderSpeed+0x220>)
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001156:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001294 <EncoderSpeed+0x1fc>
 800115a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800115e:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001298 <EncoderSpeed+0x200>
 8001162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001166:	4b55      	ldr	r3, [pc, #340]	@ (80012bc <EncoderSpeed+0x224>)
 8001168:	edc3 7a00 	vstr	s15, [r3]
	wheel2_motor_rpm = wheel2_motor_rps * 60;
 800116c:	4b53      	ldr	r3, [pc, #332]	@ (80012bc <EncoderSpeed+0x224>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80012a0 <EncoderSpeed+0x208>
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	4b51      	ldr	r3, [pc, #324]	@ (80012c0 <EncoderSpeed+0x228>)
 800117c:	edc3 7a00 	vstr	s15, [r3]
	WheelSpeed.speed2 = wheel2_motor_rpm;
 8001180:	4b4f      	ldr	r3, [pc, #316]	@ (80012c0 <EncoderSpeed+0x228>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a48      	ldr	r2, [pc, #288]	@ (80012a8 <EncoderSpeed+0x210>)
 8001186:	6053      	str	r3, [r2, #4]

	//wheel3
	wheel3_count = Serial_RxPacket[2];
 8001188:	4b3d      	ldr	r3, [pc, #244]	@ (8001280 <EncoderSpeed+0x1e8>)
 800118a:	889a      	ldrh	r2, [r3, #4]
 800118c:	4b4d      	ldr	r3, [pc, #308]	@ (80012c4 <EncoderSpeed+0x22c>)
 800118e:	801a      	strh	r2, [r3, #0]
	wheel3_current = (int16_t)wheel3_count;
 8001190:	4b4c      	ldr	r3, [pc, #304]	@ (80012c4 <EncoderSpeed+0x22c>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b4c      	ldr	r3, [pc, #304]	@ (80012c8 <EncoderSpeed+0x230>)
 8001198:	801a      	strh	r2, [r3, #0]
	wheel3_delta = (int16_t)((uint16_t)wheel3_current - (uint16_t)wheel3_last_count);
 800119a:	4b4b      	ldr	r3, [pc, #300]	@ (80012c8 <EncoderSpeed+0x230>)
 800119c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b4a      	ldr	r3, [pc, #296]	@ (80012cc <EncoderSpeed+0x234>)
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b47      	ldr	r3, [pc, #284]	@ (80012d0 <EncoderSpeed+0x238>)
 80011b2:	801a      	strh	r2, [r3, #0]
	wheel3_last_count = wheel3_current;
 80011b4:	4b44      	ldr	r3, [pc, #272]	@ (80012c8 <EncoderSpeed+0x230>)
 80011b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011ba:	4b44      	ldr	r3, [pc, #272]	@ (80012cc <EncoderSpeed+0x234>)
 80011bc:	801a      	strh	r2, [r3, #0]

	wheel3_motor_rps = (wheel3_delta / TICKS_PER_REV) / Sample_time ;
 80011be:	4b44      	ldr	r3, [pc, #272]	@ (80012d0 <EncoderSpeed+0x238>)
 80011c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011cc:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001294 <EncoderSpeed+0x1fc>
 80011d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011d4:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001298 <EncoderSpeed+0x200>
 80011d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011dc:	4b3d      	ldr	r3, [pc, #244]	@ (80012d4 <EncoderSpeed+0x23c>)
 80011de:	edc3 7a00 	vstr	s15, [r3]
	wheel3_motor_rpm = wheel3_motor_rps * 60;
 80011e2:	4b3c      	ldr	r3, [pc, #240]	@ (80012d4 <EncoderSpeed+0x23c>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80012a0 <EncoderSpeed+0x208>
 80011ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f0:	4b39      	ldr	r3, [pc, #228]	@ (80012d8 <EncoderSpeed+0x240>)
 80011f2:	edc3 7a00 	vstr	s15, [r3]
	WheelSpeed.speed3 = wheel3_motor_rpm;
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <EncoderSpeed+0x240>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a2b      	ldr	r2, [pc, #172]	@ (80012a8 <EncoderSpeed+0x210>)
 80011fc:	6093      	str	r3, [r2, #8]

	//wheel4
	wheel4_count = Serial_RxPacket[3];
 80011fe:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <EncoderSpeed+0x1e8>)
 8001200:	88da      	ldrh	r2, [r3, #6]
 8001202:	4b36      	ldr	r3, [pc, #216]	@ (80012dc <EncoderSpeed+0x244>)
 8001204:	801a      	strh	r2, [r3, #0]
	wheel4_current = (int16_t)wheel4_count;
 8001206:	4b35      	ldr	r3, [pc, #212]	@ (80012dc <EncoderSpeed+0x244>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <EncoderSpeed+0x248>)
 800120e:	801a      	strh	r2, [r3, #0]
	wheel4_delta = (int16_t)((uint16_t)wheel4_current - (uint16_t)wheel4_last_count);
 8001210:	4b33      	ldr	r3, [pc, #204]	@ (80012e0 <EncoderSpeed+0x248>)
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b32      	ldr	r3, [pc, #200]	@ (80012e4 <EncoderSpeed+0x24c>)
 800121a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121e:	b29b      	uxth	r3, r3
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	b29b      	uxth	r3, r3
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <EncoderSpeed+0x250>)
 8001228:	801a      	strh	r2, [r3, #0]
	wheel4_last_count = wheel4_current;
 800122a:	4b2d      	ldr	r3, [pc, #180]	@ (80012e0 <EncoderSpeed+0x248>)
 800122c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001230:	4b2c      	ldr	r3, [pc, #176]	@ (80012e4 <EncoderSpeed+0x24c>)
 8001232:	801a      	strh	r2, [r3, #0]

	wheel4_motor_rps = (wheel4_delta / TICKS_PER_REV) / Sample_time ;
 8001234:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <EncoderSpeed+0x250>)
 8001236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001242:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001294 <EncoderSpeed+0x1fc>
 8001246:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800124a:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001298 <EncoderSpeed+0x200>
 800124e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <EncoderSpeed+0x254>)
 8001254:	edc3 7a00 	vstr	s15, [r3]
	wheel4_motor_rpm = wheel4_motor_rps * 60;
 8001258:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <EncoderSpeed+0x254>)
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80012a0 <EncoderSpeed+0x208>
 8001262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001266:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <EncoderSpeed+0x258>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
	WheelSpeed.speed4 = wheel4_motor_rpm;
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <EncoderSpeed+0x258>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0d      	ldr	r2, [pc, #52]	@ (80012a8 <EncoderSpeed+0x210>)
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200001f8 	.word	0x200001f8
 8001284:	20000192 	.word	0x20000192
 8001288:	2000018e 	.word	0x2000018e
 800128c:	2000018c 	.word	0x2000018c
 8001290:	20000190 	.word	0x20000190
 8001294:	45924000 	.word	0x45924000
 8001298:	3c23d70a 	.word	0x3c23d70a
 800129c:	20000194 	.word	0x20000194
 80012a0:	42700000 	.word	0x42700000
 80012a4:	20000188 	.word	0x20000188
 80012a8:	20000178 	.word	0x20000178
 80012ac:	200001a6 	.word	0x200001a6
 80012b0:	200001a2 	.word	0x200001a2
 80012b4:	200001a0 	.word	0x200001a0
 80012b8:	200001a4 	.word	0x200001a4
 80012bc:	200001a8 	.word	0x200001a8
 80012c0:	2000019c 	.word	0x2000019c
 80012c4:	200001ba 	.word	0x200001ba
 80012c8:	200001b6 	.word	0x200001b6
 80012cc:	200001b4 	.word	0x200001b4
 80012d0:	200001b8 	.word	0x200001b8
 80012d4:	200001bc 	.word	0x200001bc
 80012d8:	200001b0 	.word	0x200001b0
 80012dc:	200001ce 	.word	0x200001ce
 80012e0:	200001ca 	.word	0x200001ca
 80012e4:	200001c8 	.word	0x200001c8
 80012e8:	200001cc 	.word	0x200001cc
 80012ec:	200001d0 	.word	0x200001d0
 80012f0:	200001c4 	.word	0x200001c4

080012f4 <TIM8_BRK_TIM12_IRQHandler>:



void TIM8_BRK_TIM12_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
	if (TIM12->SR & (1 << 0))
 80012fa:	4b34      	ldr	r3, [pc, #208]	@ (80013cc <TIM8_BRK_TIM12_IRQHandler+0xd8>)
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8237 	beq.w	8001776 <TIM8_BRK_TIM12_IRQHandler+0x482>
	{
		Serial_SendByte(0x01);
 8001308:	2001      	movs	r0, #1
 800130a:	f002 f99d 	bl	8003648 <Serial_SendByte>

		if(Serial_RxFlag == 1 && FirstJoint == 0)
 800130e:	4b30      	ldr	r3, [pc, #192]	@ (80013d0 <TIM8_BRK_TIM12_IRQHandler+0xdc>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	f040 8229 	bne.w	800176a <TIM8_BRK_TIM12_IRQHandler+0x476>
 8001318:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <TIM8_BRK_TIM12_IRQHandler+0xe0>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	f040 8224 	bne.w	800176a <TIM8_BRK_TIM12_IRQHandler+0x476>
		{
			EncoderSpeed();
 8001322:	f7ff feb9 	bl	8001098 <EncoderSpeed>
			x ++;
 8001326:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <TIM8_BRK_TIM12_IRQHandler+0xe4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a2a      	ldr	r2, [pc, #168]	@ (80013d8 <TIM8_BRK_TIM12_IRQHandler+0xe4>)
 800132e:	6013      	str	r3, [r2, #0]

			Vx = -((float)(JoinStick[0] - Vx_central) / (float)Vx_central) * max_Lspeed;
 8001330:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <TIM8_BRK_TIM12_IRQHandler+0xe8>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <TIM8_BRK_TIM12_IRQHandler+0xec>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001344:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <TIM8_BRK_TIM12_IRQHandler+0xec>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001354:	eeb1 7a67 	vneg.f32	s14, s15
 8001358:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <TIM8_BRK_TIM12_IRQHandler+0xf0>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001362:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <TIM8_BRK_TIM12_IRQHandler+0xf4>)
 8001364:	edc3 7a00 	vstr	s15, [r3]
			Vy =  ((float)(JoinStick[1] - Vy_central) / (float)Vy_central) * max_Lspeed;
 8001368:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <TIM8_BRK_TIM12_IRQHandler+0xe8>)
 800136a:	885b      	ldrh	r3, [r3, #2]
 800136c:	461a      	mov	r2, r3
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <TIM8_BRK_TIM12_IRQHandler+0xf8>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <TIM8_BRK_TIM12_IRQHandler+0xf8>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	ee07 3a90 	vmov	s15, r3
 8001384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <TIM8_BRK_TIM12_IRQHandler+0xf0>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <TIM8_BRK_TIM12_IRQHandler+0xfc>)
 8001398:	edc3 7a00 	vstr	s15, [r3]


			if( (JoinStick[2] - Wz_central) > -1000 && (JoinStick[2] - Wz_central) < 1000 )
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <TIM8_BRK_TIM12_IRQHandler+0xe8>)
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <TIM8_BRK_TIM12_IRQHandler+0x100>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80013ac:	dd26      	ble.n	80013fc <TIM8_BRK_TIM12_IRQHandler+0x108>
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <TIM8_BRK_TIM12_IRQHandler+0xe8>)
 80013b0:	889b      	ldrh	r3, [r3, #4]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <TIM8_BRK_TIM12_IRQHandler+0x100>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013be:	da1d      	bge.n	80013fc <TIM8_BRK_TIM12_IRQHandler+0x108>
				Wz = 0;
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <TIM8_BRK_TIM12_IRQHandler+0x104>)
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e032      	b.n	8001430 <TIM8_BRK_TIM12_IRQHandler+0x13c>
 80013ca:	bf00      	nop
 80013cc:	40001800 	.word	0x40001800
 80013d0:	200001f6 	.word	0x200001f6
 80013d4:	20000014 	.word	0x20000014
 80013d8:	200001d8 	.word	0x200001d8
 80013dc:	20000204 	.word	0x20000204
 80013e0:	200001e8 	.word	0x200001e8
 80013e4:	20000018 	.word	0x20000018
 80013e8:	200001dc 	.word	0x200001dc
 80013ec:	200001ea 	.word	0x200001ea
 80013f0:	200001e0 	.word	0x200001e0
 80013f4:	200001ec 	.word	0x200001ec
 80013f8:	200001e4 	.word	0x200001e4
			else
				Wz =  ((float)(JoinStick[2] - Wz_central) / (float)Wz_central) * max_Rspeed;
 80013fc:	4bb7      	ldr	r3, [pc, #732]	@ (80016dc <TIM8_BRK_TIM12_IRQHandler+0x3e8>)
 80013fe:	889b      	ldrh	r3, [r3, #4]
 8001400:	461a      	mov	r2, r3
 8001402:	4bb7      	ldr	r3, [pc, #732]	@ (80016e0 <TIM8_BRK_TIM12_IRQHandler+0x3ec>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001410:	4bb3      	ldr	r3, [pc, #716]	@ (80016e0 <TIM8_BRK_TIM12_IRQHandler+0x3ec>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800141c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001420:	4bb0      	ldr	r3, [pc, #704]	@ (80016e4 <TIM8_BRK_TIM12_IRQHandler+0x3f0>)
 8001422:	edd3 7a00 	vldr	s15, [r3]
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	4baf      	ldr	r3, [pc, #700]	@ (80016e8 <TIM8_BRK_TIM12_IRQHandler+0x3f4>)
 800142c:	edc3 7a00 	vstr	s15, [r3]

			Wz = -Wz;
 8001430:	4bad      	ldr	r3, [pc, #692]	@ (80016e8 <TIM8_BRK_TIM12_IRQHandler+0x3f4>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eef1 7a67 	vneg.f32	s15, s15
 800143a:	4bab      	ldr	r3, [pc, #684]	@ (80016e8 <TIM8_BRK_TIM12_IRQHandler+0x3f4>)
 800143c:	edc3 7a00 	vstr	s15, [r3]

			wheel1_speed = Vx + Vy + alpha * Wz; //front right
 8001440:	4baa      	ldr	r3, [pc, #680]	@ (80016ec <TIM8_BRK_TIM12_IRQHandler+0x3f8>)
 8001442:	ed93 7a00 	vldr	s14, [r3]
 8001446:	4baa      	ldr	r3, [pc, #680]	@ (80016f0 <TIM8_BRK_TIM12_IRQHandler+0x3fc>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001450:	4ba8      	ldr	r3, [pc, #672]	@ (80016f4 <TIM8_BRK_TIM12_IRQHandler+0x400>)
 8001452:	edd3 6a00 	vldr	s13, [r3]
 8001456:	4ba4      	ldr	r3, [pc, #656]	@ (80016e8 <TIM8_BRK_TIM12_IRQHandler+0x3f4>)
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	4ba4      	ldr	r3, [pc, #656]	@ (80016f8 <TIM8_BRK_TIM12_IRQHandler+0x404>)
 8001466:	edc3 7a00 	vstr	s15, [r3]
			wheel2_speed = Vx - Vy - alpha * Wz; //front left
 800146a:	4ba0      	ldr	r3, [pc, #640]	@ (80016ec <TIM8_BRK_TIM12_IRQHandler+0x3f8>)
 800146c:	ed93 7a00 	vldr	s14, [r3]
 8001470:	4b9f      	ldr	r3, [pc, #636]	@ (80016f0 <TIM8_BRK_TIM12_IRQHandler+0x3fc>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	ee37 7a67 	vsub.f32	s14, s14, s15
 800147a:	4b9e      	ldr	r3, [pc, #632]	@ (80016f4 <TIM8_BRK_TIM12_IRQHandler+0x400>)
 800147c:	edd3 6a00 	vldr	s13, [r3]
 8001480:	4b99      	ldr	r3, [pc, #612]	@ (80016e8 <TIM8_BRK_TIM12_IRQHandler+0x3f4>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148e:	4b9b      	ldr	r3, [pc, #620]	@ (80016fc <TIM8_BRK_TIM12_IRQHandler+0x408>)
 8001490:	edc3 7a00 	vstr	s15, [r3]
			wheel3_speed = Vx + Vy - alpha * Wz; //rear  left
 8001494:	4b95      	ldr	r3, [pc, #596]	@ (80016ec <TIM8_BRK_TIM12_IRQHandler+0x3f8>)
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	4b95      	ldr	r3, [pc, #596]	@ (80016f0 <TIM8_BRK_TIM12_IRQHandler+0x3fc>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a4:	4b93      	ldr	r3, [pc, #588]	@ (80016f4 <TIM8_BRK_TIM12_IRQHandler+0x400>)
 80014a6:	edd3 6a00 	vldr	s13, [r3]
 80014aa:	4b8f      	ldr	r3, [pc, #572]	@ (80016e8 <TIM8_BRK_TIM12_IRQHandler+0x3f4>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b8:	4b91      	ldr	r3, [pc, #580]	@ (8001700 <TIM8_BRK_TIM12_IRQHandler+0x40c>)
 80014ba:	edc3 7a00 	vstr	s15, [r3]
			wheel4_speed = Vx - Vy + alpha * Wz; //rear  right
 80014be:	4b8b      	ldr	r3, [pc, #556]	@ (80016ec <TIM8_BRK_TIM12_IRQHandler+0x3f8>)
 80014c0:	ed93 7a00 	vldr	s14, [r3]
 80014c4:	4b8a      	ldr	r3, [pc, #552]	@ (80016f0 <TIM8_BRK_TIM12_IRQHandler+0x3fc>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ce:	4b89      	ldr	r3, [pc, #548]	@ (80016f4 <TIM8_BRK_TIM12_IRQHandler+0x400>)
 80014d0:	edd3 6a00 	vldr	s13, [r3]
 80014d4:	4b84      	ldr	r3, [pc, #528]	@ (80016e8 <TIM8_BRK_TIM12_IRQHandler+0x3f4>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e2:	4b88      	ldr	r3, [pc, #544]	@ (8001704 <TIM8_BRK_TIM12_IRQHandler+0x410>)
 80014e4:	edc3 7a00 	vstr	s15, [r3]
//
//
			wheel1_speed = -wheel1_speed;
 80014e8:	4b83      	ldr	r3, [pc, #524]	@ (80016f8 <TIM8_BRK_TIM12_IRQHandler+0x404>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eef1 7a67 	vneg.f32	s15, s15
 80014f2:	4b81      	ldr	r3, [pc, #516]	@ (80016f8 <TIM8_BRK_TIM12_IRQHandler+0x404>)
 80014f4:	edc3 7a00 	vstr	s15, [r3]
			wheel2_speed = -wheel2_speed;
 80014f8:	4b80      	ldr	r3, [pc, #512]	@ (80016fc <TIM8_BRK_TIM12_IRQHandler+0x408>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	eef1 7a67 	vneg.f32	s15, s15
 8001502:	4b7e      	ldr	r3, [pc, #504]	@ (80016fc <TIM8_BRK_TIM12_IRQHandler+0x408>)
 8001504:	edc3 7a00 	vstr	s15, [r3]
			wheel3_speed = -wheel3_speed;
 8001508:	4b7d      	ldr	r3, [pc, #500]	@ (8001700 <TIM8_BRK_TIM12_IRQHandler+0x40c>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	eef1 7a67 	vneg.f32	s15, s15
 8001512:	4b7b      	ldr	r3, [pc, #492]	@ (8001700 <TIM8_BRK_TIM12_IRQHandler+0x40c>)
 8001514:	edc3 7a00 	vstr	s15, [r3]
			wheel4_speed = -wheel4_speed;
 8001518:	4b7a      	ldr	r3, [pc, #488]	@ (8001704 <TIM8_BRK_TIM12_IRQHandler+0x410>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eef1 7a67 	vneg.f32	s15, s15
 8001522:	4b78      	ldr	r3, [pc, #480]	@ (8001704 <TIM8_BRK_TIM12_IRQHandler+0x410>)
 8001524:	edc3 7a00 	vstr	s15, [r3]


			wheel1.term.Ref = wheel1_speed;
 8001528:	4b73      	ldr	r3, [pc, #460]	@ (80016f8 <TIM8_BRK_TIM12_IRQHandler+0x404>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a76      	ldr	r2, [pc, #472]	@ (8001708 <TIM8_BRK_TIM12_IRQHandler+0x414>)
 800152e:	6213      	str	r3, [r2, #32]
			wheel1.term.Fbk = WheelSpeed.speed1;
 8001530:	4b76      	ldr	r3, [pc, #472]	@ (800170c <TIM8_BRK_TIM12_IRQHandler+0x418>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a74      	ldr	r2, [pc, #464]	@ (8001708 <TIM8_BRK_TIM12_IRQHandler+0x414>)
 8001536:	6253      	str	r3, [r2, #36]	@ 0x24

			wheel2.term.Ref = wheel2_speed;
 8001538:	4b70      	ldr	r3, [pc, #448]	@ (80016fc <TIM8_BRK_TIM12_IRQHandler+0x408>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a74      	ldr	r2, [pc, #464]	@ (8001710 <TIM8_BRK_TIM12_IRQHandler+0x41c>)
 800153e:	6213      	str	r3, [r2, #32]
			wheel2.term.Fbk = WheelSpeed.speed2;
 8001540:	4b72      	ldr	r3, [pc, #456]	@ (800170c <TIM8_BRK_TIM12_IRQHandler+0x418>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a72      	ldr	r2, [pc, #456]	@ (8001710 <TIM8_BRK_TIM12_IRQHandler+0x41c>)
 8001546:	6253      	str	r3, [r2, #36]	@ 0x24

			wheel3.term.Ref = wheel3_speed;
 8001548:	4b6d      	ldr	r3, [pc, #436]	@ (8001700 <TIM8_BRK_TIM12_IRQHandler+0x40c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a71      	ldr	r2, [pc, #452]	@ (8001714 <TIM8_BRK_TIM12_IRQHandler+0x420>)
 800154e:	6213      	str	r3, [r2, #32]
			wheel3.term.Fbk = WheelSpeed.speed3;
 8001550:	4b6e      	ldr	r3, [pc, #440]	@ (800170c <TIM8_BRK_TIM12_IRQHandler+0x418>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a6f      	ldr	r2, [pc, #444]	@ (8001714 <TIM8_BRK_TIM12_IRQHandler+0x420>)
 8001556:	6253      	str	r3, [r2, #36]	@ 0x24

			wheel4.term.Ref = wheel4_speed;
 8001558:	4b6a      	ldr	r3, [pc, #424]	@ (8001704 <TIM8_BRK_TIM12_IRQHandler+0x410>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a6e      	ldr	r2, [pc, #440]	@ (8001718 <TIM8_BRK_TIM12_IRQHandler+0x424>)
 800155e:	6213      	str	r3, [r2, #32]
			wheel4.term.Fbk = WheelSpeed.speed4;
 8001560:	4b6a      	ldr	r3, [pc, #424]	@ (800170c <TIM8_BRK_TIM12_IRQHandler+0x418>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4a6c      	ldr	r2, [pc, #432]	@ (8001718 <TIM8_BRK_TIM12_IRQHandler+0x424>)
 8001566:	6253      	str	r3, [r2, #36]	@ 0x24

			float wheel1_output = PID_Update(&wheel1);
 8001568:	4867      	ldr	r0, [pc, #412]	@ (8001708 <TIM8_BRK_TIM12_IRQHandler+0x414>)
 800156a:	f002 fadf 	bl	8003b2c <PID_Update>
 800156e:	ed87 0a03 	vstr	s0, [r7, #12]
			float wheel3_output = PID_Update(&wheel3);
 8001572:	4868      	ldr	r0, [pc, #416]	@ (8001714 <TIM8_BRK_TIM12_IRQHandler+0x420>)
 8001574:	f002 fada 	bl	8003b2c <PID_Update>
 8001578:	ed87 0a02 	vstr	s0, [r7, #8]
			float wheel2_output = PID_Update(&wheel2);
 800157c:	4864      	ldr	r0, [pc, #400]	@ (8001710 <TIM8_BRK_TIM12_IRQHandler+0x41c>)
 800157e:	f002 fad5 	bl	8003b2c <PID_Update>
 8001582:	ed87 0a01 	vstr	s0, [r7, #4]
			float wheel4_output = PID_Update(&wheel4);
 8001586:	4864      	ldr	r0, [pc, #400]	@ (8001718 <TIM8_BRK_TIM12_IRQHandler+0x424>)
 8001588:	f002 fad0 	bl	8003b2c <PID_Update>
 800158c:	ed87 0a00 	vstr	s0, [r7]

			wheel1_out = wheel1_output;
 8001590:	4a62      	ldr	r2, [pc, #392]	@ (800171c <TIM8_BRK_TIM12_IRQHandler+0x428>)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6013      	str	r3, [r2, #0]
			wheel3_out = wheel3_output;
 8001596:	4a62      	ldr	r2, [pc, #392]	@ (8001720 <TIM8_BRK_TIM12_IRQHandler+0x42c>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	6013      	str	r3, [r2, #0]
			wheel2_out = wheel2_output;
 800159c:	4a61      	ldr	r2, [pc, #388]	@ (8001724 <TIM8_BRK_TIM12_IRQHandler+0x430>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
			wheel4_out = wheel4_output;
 80015a2:	4a61      	ldr	r2, [pc, #388]	@ (8001728 <TIM8_BRK_TIM12_IRQHandler+0x434>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6013      	str	r3, [r2, #0]

			int wheel1_pwm = (int)(fabs(wheel1_out) / 200.0f * PWM_MAX);
 80015a8:	4b5c      	ldr	r3, [pc, #368]	@ (800171c <TIM8_BRK_TIM12_IRQHandler+0x428>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	eef0 7ae7 	vabs.f32	s15, s15
 80015b2:	ee17 0a90 	vmov	r0, s15
 80015b6:	f7fe ff8b 	bl	80004d0 <__aeabi_f2d>
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	4b5b      	ldr	r3, [pc, #364]	@ (800172c <TIM8_BRK_TIM12_IRQHandler+0x438>)
 80015c0:	f7ff f908 	bl	80007d4 <__aeabi_ddiv>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4b57      	ldr	r3, [pc, #348]	@ (8001730 <TIM8_BRK_TIM12_IRQHandler+0x43c>)
 80015d2:	f7fe ffd5 	bl	8000580 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff f9e1 	bl	80009a4 <__aeabi_d2iz>
 80015e2:	4603      	mov	r3, r0
 80015e4:	61fb      	str	r3, [r7, #28]
			int wheel3_pwm = (int)(fabs(wheel3_out) / 200.0f * PWM_MAX);
 80015e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001720 <TIM8_BRK_TIM12_IRQHandler+0x42c>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	eef0 7ae7 	vabs.f32	s15, s15
 80015f0:	ee17 0a90 	vmov	r0, s15
 80015f4:	f7fe ff6c 	bl	80004d0 <__aeabi_f2d>
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b4b      	ldr	r3, [pc, #300]	@ (800172c <TIM8_BRK_TIM12_IRQHandler+0x438>)
 80015fe:	f7ff f8e9 	bl	80007d4 <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b48      	ldr	r3, [pc, #288]	@ (8001730 <TIM8_BRK_TIM12_IRQHandler+0x43c>)
 8001610:	f7fe ffb6 	bl	8000580 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff f9c2 	bl	80009a4 <__aeabi_d2iz>
 8001620:	4603      	mov	r3, r0
 8001622:	61bb      	str	r3, [r7, #24]
			int wheel2_pwm = (int)(fabs(wheel2_out) / 200.0f * PWM_MAX);
 8001624:	4b3f      	ldr	r3, [pc, #252]	@ (8001724 <TIM8_BRK_TIM12_IRQHandler+0x430>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eef0 7ae7 	vabs.f32	s15, s15
 800162e:	ee17 0a90 	vmov	r0, s15
 8001632:	f7fe ff4d 	bl	80004d0 <__aeabi_f2d>
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <TIM8_BRK_TIM12_IRQHandler+0x438>)
 800163c:	f7ff f8ca 	bl	80007d4 <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b38      	ldr	r3, [pc, #224]	@ (8001730 <TIM8_BRK_TIM12_IRQHandler+0x43c>)
 800164e:	f7fe ff97 	bl	8000580 <__aeabi_dmul>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff f9a3 	bl	80009a4 <__aeabi_d2iz>
 800165e:	4603      	mov	r3, r0
 8001660:	617b      	str	r3, [r7, #20]
			int wheel4_pwm = (int)(fabs(wheel4_out) / 200.0f * PWM_MAX);
 8001662:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <TIM8_BRK_TIM12_IRQHandler+0x434>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	eef0 7ae7 	vabs.f32	s15, s15
 800166c:	ee17 0a90 	vmov	r0, s15
 8001670:	f7fe ff2e 	bl	80004d0 <__aeabi_f2d>
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <TIM8_BRK_TIM12_IRQHandler+0x438>)
 800167a:	f7ff f8ab 	bl	80007d4 <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	4b29      	ldr	r3, [pc, #164]	@ (8001730 <TIM8_BRK_TIM12_IRQHandler+0x43c>)
 800168c:	f7fe ff78 	bl	8000580 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff f984 	bl	80009a4 <__aeabi_d2iz>
 800169c:	4603      	mov	r3, r0
 800169e:	613b      	str	r3, [r7, #16]

			if (wheel1_pwm > PWM_MAX) wheel1_pwm = PWM_MAX;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016a6:	dd02      	ble.n	80016ae <TIM8_BRK_TIM12_IRQHandler+0x3ba>
 80016a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ac:	61fb      	str	r3, [r7, #28]
			if (wheel3_pwm > PWM_MAX) wheel3_pwm = PWM_MAX;
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016b4:	dd02      	ble.n	80016bc <TIM8_BRK_TIM12_IRQHandler+0x3c8>
 80016b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ba:	61bb      	str	r3, [r7, #24]
			if (wheel2_pwm > PWM_MAX) wheel2_pwm = PWM_MAX;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016c2:	dd02      	ble.n	80016ca <TIM8_BRK_TIM12_IRQHandler+0x3d6>
 80016c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016c8:	617b      	str	r3, [r7, #20]
			if (wheel4_pwm > PWM_MAX) wheel4_pwm = PWM_MAX;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016d0:	dd30      	ble.n	8001734 <TIM8_BRK_TIM12_IRQHandler+0x440>
 80016d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	e02c      	b.n	8001734 <TIM8_BRK_TIM12_IRQHandler+0x440>
 80016da:	bf00      	nop
 80016dc:	20000204 	.word	0x20000204
 80016e0:	200001ec 	.word	0x200001ec
 80016e4:	2000001c 	.word	0x2000001c
 80016e8:	200001e4 	.word	0x200001e4
 80016ec:	200001dc 	.word	0x200001dc
 80016f0:	200001e0 	.word	0x200001e0
 80016f4:	20000010 	.word	0x20000010
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004
 8001700:	20000008 	.word	0x20000008
 8001704:	2000000c 	.word	0x2000000c
 8001708:	20000048 	.word	0x20000048
 800170c:	20000178 	.word	0x20000178
 8001710:	20000094 	.word	0x20000094
 8001714:	200000e0 	.word	0x200000e0
 8001718:	2000012c 	.word	0x2000012c
 800171c:	20000198 	.word	0x20000198
 8001720:	200001c0 	.word	0x200001c0
 8001724:	200001ac 	.word	0x200001ac
 8001728:	200001d4 	.word	0x200001d4
 800172c:	40690000 	.word	0x40690000
 8001730:	408f4000 	.word	0x408f4000

			Motor_SetSpeed(1,wheel1_pwm,wheel1_output);  // 設定 PWM duty
 8001734:	ed97 0a03 	vldr	s0, [r7, #12]
 8001738:	69f9      	ldr	r1, [r7, #28]
 800173a:	2001      	movs	r0, #1
 800173c:	f001 f96a 	bl	8002a14 <Motor_SetSpeed>
			Motor_SetSpeed(3,wheel3_pwm,wheel3_output);  // 設定 PWM duty
 8001740:	ed97 0a02 	vldr	s0, [r7, #8]
 8001744:	69b9      	ldr	r1, [r7, #24]
 8001746:	2003      	movs	r0, #3
 8001748:	f001 f964 	bl	8002a14 <Motor_SetSpeed>
			Motor_SetSpeed(2,wheel2_pwm,wheel2_output);  // 設定 PWM duty
 800174c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001750:	6979      	ldr	r1, [r7, #20]
 8001752:	2002      	movs	r0, #2
 8001754:	f001 f95e 	bl	8002a14 <Motor_SetSpeed>
			Motor_SetSpeed(4,wheel4_pwm,wheel4_output);  // 設定 PWM duty
 8001758:	ed97 0a00 	vldr	s0, [r7]
 800175c:	6939      	ldr	r1, [r7, #16]
 800175e:	2004      	movs	r0, #4
 8001760:	f001 f958 	bl	8002a14 <Motor_SetSpeed>

			Serial_RxFlag = 0;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <TIM8_BRK_TIM12_IRQHandler+0x48c>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
		}


		TIM12->SR &= ~(1 << 0);
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <TIM8_BRK_TIM12_IRQHandler+0x490>)
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <TIM8_BRK_TIM12_IRQHandler+0x490>)
 8001770:	f023 0301 	bic.w	r3, r3, #1
 8001774:	6113      	str	r3, [r2, #16]
	}
}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200001f6 	.word	0x200001f6
 8001784:	40001800 	.word	0x40001800

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	@ 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	2234      	movs	r2, #52	@ 0x34
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f002 fa6a 	bl	8003c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	4b2a      	ldr	r3, [pc, #168]	@ (800185c <SystemClock_Config+0xd4>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	4a29      	ldr	r2, [pc, #164]	@ (800185c <SystemClock_Config+0xd4>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80017bc:	4b27      	ldr	r3, [pc, #156]	@ (800185c <SystemClock_Config+0xd4>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017c8:	2300      	movs	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <SystemClock_Config+0xd8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017d4:	4a22      	ldr	r2, [pc, #136]	@ (8001860 <SystemClock_Config+0xd8>)
 80017d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <SystemClock_Config+0xd8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ec:	2301      	movs	r3, #1
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f0:	2310      	movs	r3, #16
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f4:	2302      	movs	r3, #2
 80017f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017fc:	2310      	movs	r3, #16
 80017fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001800:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001804:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001806:	2304      	movs	r3, #4
 8001808:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800180a:	2302      	movs	r3, #2
 800180c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800180e:	2302      	movs	r3, #2
 8001810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fd2c 	bl	8002274 <HAL_RCC_OscConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001822:	f000 f81f 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001826:	230f      	movs	r3, #15
 8001828:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182a:	2302      	movs	r3, #2
 800182c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001832:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	2102      	movs	r1, #2
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fa00 	bl	8001c48 <HAL_RCC_ClockConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800184e:	f000 f809 	bl	8001864 <Error_Handler>
  }
}
 8001852:	bf00      	nop
 8001854:	3750      	adds	r7, #80	@ 0x50
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <Error_Handler+0x8>

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <HAL_MspInit+0x4c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	4a0f      	ldr	r2, [pc, #60]	@ (80018bc <HAL_MspInit+0x4c>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001884:	6453      	str	r3, [r2, #68]	@ 0x44
 8001886:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <HAL_MspInit+0x4c>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_MspInit+0x4c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <HAL_MspInit+0x4c>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_MspInit+0x4c>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ae:	2007      	movs	r0, #7
 80018b0:	f000 f996 	bl	8001be0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <NMI_Handler+0x4>

080018c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <MemManage_Handler+0x4>

080018d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001916:	f000 f891 	bl	8001a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800197c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001948:	f7ff ffea 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	@ (8001980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	@ (8001984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	@ (8001990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001972:	f002 f985 	bl	8003c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7ff fa07 	bl	8000d88 <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800197c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001988:	080043bc 	.word	0x080043bc
  ldr r2, =_sbss
 800198c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001990:	20000210 	.word	0x20000210

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>
	...

08001998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800199c:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <HAL_Init+0x40>)
 80019a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <HAL_Init+0x40>)
 80019ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <HAL_Init+0x40>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a07      	ldr	r2, [pc, #28]	@ (80019d8 <HAL_Init+0x40>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f000 f90d 	bl	8001be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f000 f808 	bl	80019dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019cc:	f7ff ff50 	bl	8001870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023c00 	.word	0x40023c00

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_InitTick+0x54>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_InitTick+0x58>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f917 	bl	8001c2e <HAL_SYSTICK_Config>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00e      	b.n	8001a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b0f      	cmp	r3, #15
 8001a0e:	d80a      	bhi.n	8001a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a10:	2200      	movs	r2, #0
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	f000 f8ed 	bl	8001bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a1c:	4a06      	ldr	r2, [pc, #24]	@ (8001a38 <HAL_InitTick+0x5c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000020 	.word	0x20000020
 8001a34:	20000028 	.word	0x20000028
 8001a38:	20000024 	.word	0x20000024

08001a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_IncTick+0x20>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_IncTick+0x24>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000028 	.word	0x20000028
 8001a60:	200001f0 	.word	0x200001f0

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200001f0 	.word	0x200001f0

08001a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aae:	4a04      	ldr	r2, [pc, #16]	@ (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	60d3      	str	r3, [r2, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	@ (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	@ (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	4313      	orrs	r3, r2
         );
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	@ 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bac:	d301      	bcc.n	8001bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00f      	b.n	8001bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <SysTick_Config+0x40>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bba:	210f      	movs	r1, #15
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f7ff ff8e 	bl	8001ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <SysTick_Config+0x40>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bca:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <SysTick_Config+0x40>)
 8001bcc:	2207      	movs	r2, #7
 8001bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	e000e010 	.word	0xe000e010

08001be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff47 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c08:	f7ff ff5c 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7ff ff8e 	bl	8001b34 <NVIC_EncodePriority>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff5d 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffb0 	bl	8001b9c <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0cc      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b68      	ldr	r3, [pc, #416]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d90c      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b65      	ldr	r3, [pc, #404]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ca6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d044      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d119      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b3f      	ldr	r3, [pc, #252]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3b      	ldr	r3, [pc, #236]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e067      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b37      	ldr	r3, [pc, #220]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4934      	ldr	r1, [pc, #208]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff fe94 	bl	8001a64 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff fe90 	bl	8001a64 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e04f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2b      	ldr	r3, [pc, #172]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d20c      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f821 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490a      	ldr	r1, [pc, #40]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fdf4 	bl	80019dc <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00
 8001e04:	40023800 	.word	0x40023800
 8001e08:	08003dac 	.word	0x08003dac
 8001e0c:	20000020 	.word	0x20000020
 8001e10:	20000024 	.word	0x20000024

08001e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e18:	b0ae      	sub	sp, #184	@ 0xb8
 8001e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e3a:	4bcb      	ldr	r3, [pc, #812]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	f200 8206 	bhi.w	8002254 <HAL_RCC_GetSysClockFreq+0x440>
 8001e48:	a201      	add	r2, pc, #4	@ (adr r2, 8001e50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4e:	bf00      	nop
 8001e50:	08001e85 	.word	0x08001e85
 8001e54:	08002255 	.word	0x08002255
 8001e58:	08002255 	.word	0x08002255
 8001e5c:	08002255 	.word	0x08002255
 8001e60:	08001e8d 	.word	0x08001e8d
 8001e64:	08002255 	.word	0x08002255
 8001e68:	08002255 	.word	0x08002255
 8001e6c:	08002255 	.word	0x08002255
 8001e70:	08001e95 	.word	0x08001e95
 8001e74:	08002255 	.word	0x08002255
 8001e78:	08002255 	.word	0x08002255
 8001e7c:	08002255 	.word	0x08002255
 8001e80:	08002085 	.word	0x08002085
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4bb9      	ldr	r3, [pc, #740]	@ (800216c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e8a:	e1e7      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e8c:	4bb8      	ldr	r3, [pc, #736]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e92:	e1e3      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e94:	4bb4      	ldr	r3, [pc, #720]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea0:	4bb1      	ldr	r3, [pc, #708]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d071      	beq.n	8001f90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eac:	4bae      	ldr	r3, [pc, #696]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001eb8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001ed2:	4622      	mov	r2, r4
 8001ed4:	462b      	mov	r3, r5
 8001ed6:	f04f 0000 	mov.w	r0, #0
 8001eda:	f04f 0100 	mov.w	r1, #0
 8001ede:	0159      	lsls	r1, r3, #5
 8001ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ee4:	0150      	lsls	r0, r2, #5
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4621      	mov	r1, r4
 8001eec:	1a51      	subs	r1, r2, r1
 8001eee:	6439      	str	r1, [r7, #64]	@ 0x40
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f04:	4649      	mov	r1, r9
 8001f06:	018b      	lsls	r3, r1, #6
 8001f08:	4641      	mov	r1, r8
 8001f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f0e:	4641      	mov	r1, r8
 8001f10:	018a      	lsls	r2, r1, #6
 8001f12:	4641      	mov	r1, r8
 8001f14:	1a51      	subs	r1, r2, r1
 8001f16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f18:	4649      	mov	r1, r9
 8001f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	00cb      	lsls	r3, r1, #3
 8001f30:	4641      	mov	r1, r8
 8001f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f36:	4641      	mov	r1, r8
 8001f38:	00ca      	lsls	r2, r1, #3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4622      	mov	r2, r4
 8001f42:	189b      	adds	r3, r3, r2
 8001f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f46:	462b      	mov	r3, r5
 8001f48:	460a      	mov	r2, r1
 8001f4a:	eb42 0303 	adc.w	r3, r2, r3
 8001f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	024b      	lsls	r3, r1, #9
 8001f60:	4621      	mov	r1, r4
 8001f62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f66:	4621      	mov	r1, r4
 8001f68:	024a      	lsls	r2, r1, #9
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f72:	2200      	movs	r2, #0
 8001f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001f80:	f7fe fd88 	bl	8000a94 <__aeabi_uldivmod>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4613      	mov	r3, r2
 8001f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f8e:	e067      	b.n	8002060 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f90:	4b75      	ldr	r3, [pc, #468]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	2200      	movs	r2, #0
 8001f98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f9c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001faa:	2300      	movs	r3, #0
 8001fac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	462b      	mov	r3, r5
 8001fb6:	f04f 0000 	mov.w	r0, #0
 8001fba:	f04f 0100 	mov.w	r1, #0
 8001fbe:	0159      	lsls	r1, r3, #5
 8001fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc4:	0150      	lsls	r0, r2, #5
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4621      	mov	r1, r4
 8001fcc:	1a51      	subs	r1, r2, r1
 8001fce:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001fd0:	4629      	mov	r1, r5
 8001fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001fe4:	4649      	mov	r1, r9
 8001fe6:	018b      	lsls	r3, r1, #6
 8001fe8:	4641      	mov	r1, r8
 8001fea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fee:	4641      	mov	r1, r8
 8001ff0:	018a      	lsls	r2, r1, #6
 8001ff2:	4641      	mov	r1, r8
 8001ff4:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800200a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800200e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002012:	4692      	mov	sl, r2
 8002014:	469b      	mov	fp, r3
 8002016:	4623      	mov	r3, r4
 8002018:	eb1a 0303 	adds.w	r3, sl, r3
 800201c:	623b      	str	r3, [r7, #32]
 800201e:	462b      	mov	r3, r5
 8002020:	eb4b 0303 	adc.w	r3, fp, r3
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002032:	4629      	mov	r1, r5
 8002034:	028b      	lsls	r3, r1, #10
 8002036:	4621      	mov	r1, r4
 8002038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800203c:	4621      	mov	r1, r4
 800203e:	028a      	lsls	r2, r1, #10
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002048:	2200      	movs	r2, #0
 800204a:	673b      	str	r3, [r7, #112]	@ 0x70
 800204c:	677a      	str	r2, [r7, #116]	@ 0x74
 800204e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002052:	f7fe fd1f 	bl	8000a94 <__aeabi_uldivmod>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4613      	mov	r3, r2
 800205c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002060:	4b41      	ldr	r3, [pc, #260]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	0c1b      	lsrs	r3, r3, #16
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	3301      	adds	r3, #1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002076:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002082:	e0eb      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002084:	4b38      	ldr	r3, [pc, #224]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800208c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002090:	4b35      	ldr	r3, [pc, #212]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x354>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d06b      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209c:	4b32      	ldr	r3, [pc, #200]	@ (8002168 <HAL_RCC_GetSysClockFreq+0x354>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	2200      	movs	r2, #0
 80020a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80020b0:	2300      	movs	r3, #0
 80020b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80020b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80020b8:	4622      	mov	r2, r4
 80020ba:	462b      	mov	r3, r5
 80020bc:	f04f 0000 	mov.w	r0, #0
 80020c0:	f04f 0100 	mov.w	r1, #0
 80020c4:	0159      	lsls	r1, r3, #5
 80020c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ca:	0150      	lsls	r0, r2, #5
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4621      	mov	r1, r4
 80020d2:	1a51      	subs	r1, r2, r1
 80020d4:	61b9      	str	r1, [r7, #24]
 80020d6:	4629      	mov	r1, r5
 80020d8:	eb63 0301 	sbc.w	r3, r3, r1
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80020ea:	4659      	mov	r1, fp
 80020ec:	018b      	lsls	r3, r1, #6
 80020ee:	4651      	mov	r1, sl
 80020f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020f4:	4651      	mov	r1, sl
 80020f6:	018a      	lsls	r2, r1, #6
 80020f8:	4651      	mov	r1, sl
 80020fa:	ebb2 0801 	subs.w	r8, r2, r1
 80020fe:	4659      	mov	r1, fp
 8002100:	eb63 0901 	sbc.w	r9, r3, r1
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002110:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002114:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002118:	4690      	mov	r8, r2
 800211a:	4699      	mov	r9, r3
 800211c:	4623      	mov	r3, r4
 800211e:	eb18 0303 	adds.w	r3, r8, r3
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	462b      	mov	r3, r5
 8002126:	eb49 0303 	adc.w	r3, r9, r3
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002138:	4629      	mov	r1, r5
 800213a:	024b      	lsls	r3, r1, #9
 800213c:	4621      	mov	r1, r4
 800213e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002142:	4621      	mov	r1, r4
 8002144:	024a      	lsls	r2, r1, #9
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800214e:	2200      	movs	r2, #0
 8002150:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002152:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002154:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002158:	f7fe fc9c 	bl	8000a94 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4613      	mov	r3, r2
 8002162:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002166:	e065      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x420>
 8002168:	40023800 	.word	0x40023800
 800216c:	00f42400 	.word	0x00f42400
 8002170:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002174:	4b3d      	ldr	r3, [pc, #244]	@ (800226c <HAL_RCC_GetSysClockFreq+0x458>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	099b      	lsrs	r3, r3, #6
 800217a:	2200      	movs	r2, #0
 800217c:	4618      	mov	r0, r3
 800217e:	4611      	mov	r1, r2
 8002180:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002184:	653b      	str	r3, [r7, #80]	@ 0x50
 8002186:	2300      	movs	r3, #0
 8002188:	657b      	str	r3, [r7, #84]	@ 0x54
 800218a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800218e:	4642      	mov	r2, r8
 8002190:	464b      	mov	r3, r9
 8002192:	f04f 0000 	mov.w	r0, #0
 8002196:	f04f 0100 	mov.w	r1, #0
 800219a:	0159      	lsls	r1, r3, #5
 800219c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021a0:	0150      	lsls	r0, r2, #5
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4641      	mov	r1, r8
 80021a8:	1a51      	subs	r1, r2, r1
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	4649      	mov	r1, r9
 80021ae:	eb63 0301 	sbc.w	r3, r3, r1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80021c0:	4659      	mov	r1, fp
 80021c2:	018b      	lsls	r3, r1, #6
 80021c4:	4651      	mov	r1, sl
 80021c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021ca:	4651      	mov	r1, sl
 80021cc:	018a      	lsls	r2, r1, #6
 80021ce:	4651      	mov	r1, sl
 80021d0:	1a54      	subs	r4, r2, r1
 80021d2:	4659      	mov	r1, fp
 80021d4:	eb63 0501 	sbc.w	r5, r3, r1
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	00eb      	lsls	r3, r5, #3
 80021e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021e6:	00e2      	lsls	r2, r4, #3
 80021e8:	4614      	mov	r4, r2
 80021ea:	461d      	mov	r5, r3
 80021ec:	4643      	mov	r3, r8
 80021ee:	18e3      	adds	r3, r4, r3
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	464b      	mov	r3, r9
 80021f4:	eb45 0303 	adc.w	r3, r5, r3
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002206:	4629      	mov	r1, r5
 8002208:	028b      	lsls	r3, r1, #10
 800220a:	4621      	mov	r1, r4
 800220c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002210:	4621      	mov	r1, r4
 8002212:	028a      	lsls	r2, r1, #10
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800221c:	2200      	movs	r2, #0
 800221e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002220:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002222:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002226:	f7fe fc35 	bl	8000a94 <__aeabi_uldivmod>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4613      	mov	r3, r2
 8002230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002234:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <HAL_RCC_GetSysClockFreq+0x458>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	0f1b      	lsrs	r3, r3, #28
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002252:	e003      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002256:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800225a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002260:	4618      	mov	r0, r3
 8002262:	37b8      	adds	r7, #184	@ 0xb8
 8002264:	46bd      	mov	sp, r7
 8002266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	00f42400 	.word	0x00f42400

08002274 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e28d      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8083 	beq.w	800239a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002294:	4b94      	ldr	r3, [pc, #592]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b04      	cmp	r3, #4
 800229e:	d019      	beq.n	80022d4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022a0:	4b91      	ldr	r3, [pc, #580]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
        || \
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022ac:	4b8e      	ldr	r3, [pc, #568]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022b8:	d00c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ba:	4b8b      	ldr	r3, [pc, #556]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d112      	bne.n	80022ec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c6:	4b88      	ldr	r3, [pc, #544]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022d2:	d10b      	bne.n	80022ec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	4b84      	ldr	r3, [pc, #528]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05b      	beq.n	8002398 <HAL_RCC_OscConfig+0x124>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d157      	bne.n	8002398 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e25a      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f4:	d106      	bne.n	8002304 <HAL_RCC_OscConfig+0x90>
 80022f6:	4b7c      	ldr	r3, [pc, #496]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a7b      	ldr	r2, [pc, #492]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0xcc>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0xb4>
 800230e:	4b76      	ldr	r3, [pc, #472]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a75      	ldr	r2, [pc, #468]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b73      	ldr	r3, [pc, #460]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a72      	ldr	r2, [pc, #456]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0xcc>
 8002328:	4b6f      	ldr	r3, [pc, #444]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a6e      	ldr	r2, [pc, #440]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b6c      	ldr	r3, [pc, #432]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a6b      	ldr	r2, [pc, #428]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d013      	beq.n	8002370 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff fb8c 	bl	8001a64 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fb88 	bl	8001a64 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e21f      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b61      	ldr	r3, [pc, #388]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0xdc>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7ff fb78 	bl	8001a64 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff fb74 	bl	8001a64 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	@ 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e20b      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	4b57      	ldr	r3, [pc, #348]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x104>
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d06f      	beq.n	8002486 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023a6:	4b50      	ldr	r3, [pc, #320]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d017      	beq.n	80023e2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023b2:	4b4d      	ldr	r3, [pc, #308]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
        || \
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d105      	bne.n	80023ca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023be:	4b4a      	ldr	r3, [pc, #296]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ca:	4b47      	ldr	r3, [pc, #284]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	d11c      	bne.n	8002410 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023d6:	4b44      	ldr	r3, [pc, #272]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d116      	bne.n	8002410 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e2:	4b41      	ldr	r3, [pc, #260]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_RCC_OscConfig+0x186>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e1d3      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fa:	4b3b      	ldr	r3, [pc, #236]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4937      	ldr	r1, [pc, #220]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	e03a      	b.n	8002486 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002418:	4b34      	ldr	r3, [pc, #208]	@ (80024ec <HAL_RCC_OscConfig+0x278>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7ff fb21 	bl	8001a64 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002426:	f7ff fb1d 	bl	8001a64 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e1b4      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002438:	4b2b      	ldr	r3, [pc, #172]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f0      	beq.n	8002426 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002444:	4b28      	ldr	r3, [pc, #160]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4925      	ldr	r1, [pc, #148]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 8002454:	4313      	orrs	r3, r2
 8002456:	600b      	str	r3, [r1, #0]
 8002458:	e015      	b.n	8002486 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245a:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <HAL_RCC_OscConfig+0x278>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7ff fb00 	bl	8001a64 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002468:	f7ff fafc 	bl	8001a64 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e193      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247a:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d036      	beq.n	8002500 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_RCC_OscConfig+0x27c>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a0:	f7ff fae0 	bl	8001a64 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a8:	f7ff fadc 	bl	8001a64 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e173      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ba:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCC_OscConfig+0x274>)
 80024bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x234>
 80024c6:	e01b      	b.n	8002500 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c8:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_RCC_OscConfig+0x27c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7ff fac9 	bl	8001a64 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d4:	e00e      	b.n	80024f4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d6:	f7ff fac5 	bl	8001a64 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d907      	bls.n	80024f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e15c      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
 80024e8:	40023800 	.word	0x40023800
 80024ec:	42470000 	.word	0x42470000
 80024f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	4b8a      	ldr	r3, [pc, #552]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 80024f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1ea      	bne.n	80024d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8097 	beq.w	800263c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002512:	4b83      	ldr	r3, [pc, #524]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10f      	bne.n	800253e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	4b7f      	ldr	r3, [pc, #508]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	4a7e      	ldr	r2, [pc, #504]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	@ 0x40
 800252e:	4b7c      	ldr	r3, [pc, #496]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253e:	4b79      	ldr	r3, [pc, #484]	@ (8002724 <HAL_RCC_OscConfig+0x4b0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d118      	bne.n	800257c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254a:	4b76      	ldr	r3, [pc, #472]	@ (8002724 <HAL_RCC_OscConfig+0x4b0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a75      	ldr	r2, [pc, #468]	@ (8002724 <HAL_RCC_OscConfig+0x4b0>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002556:	f7ff fa85 	bl	8001a64 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255e:	f7ff fa81 	bl	8001a64 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e118      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	4b6c      	ldr	r3, [pc, #432]	@ (8002724 <HAL_RCC_OscConfig+0x4b0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x31e>
 8002584:	4b66      	ldr	r3, [pc, #408]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002588:	4a65      	ldr	r2, [pc, #404]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002590:	e01c      	b.n	80025cc <HAL_RCC_OscConfig+0x358>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x340>
 800259a:	4b61      	ldr	r3, [pc, #388]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259e:	4a60      	ldr	r2, [pc, #384]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0x358>
 80025b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b8:	4a59      	ldr	r2, [pc, #356]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c0:	4b57      	ldr	r3, [pc, #348]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c4:	4a56      	ldr	r2, [pc, #344]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 80025c6:	f023 0304 	bic.w	r3, r3, #4
 80025ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7ff fa46 	bl	8001a64 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7ff fa42 	bl	8001a64 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e0d7      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0ee      	beq.n	80025dc <HAL_RCC_OscConfig+0x368>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff fa30 	bl	8001a64 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7ff fa2c 	bl	8001a64 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0c1      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261e:	4b40      	ldr	r3, [pc, #256]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ee      	bne.n	8002608 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	4a3a      	ldr	r2, [pc, #232]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800263a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80ad 	beq.w	80027a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002646:	4b36      	ldr	r3, [pc, #216]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b08      	cmp	r3, #8
 8002650:	d060      	beq.n	8002714 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d145      	bne.n	80026e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b33      	ldr	r3, [pc, #204]	@ (8002728 <HAL_RCC_OscConfig+0x4b4>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7ff fa00 	bl	8001a64 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7ff f9fc 	bl	8001a64 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e093      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002694:	019b      	lsls	r3, r3, #6
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	3b01      	subs	r3, #1
 80026a0:	041b      	lsls	r3, r3, #16
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b0:	071b      	lsls	r3, r3, #28
 80026b2:	491b      	ldr	r1, [pc, #108]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002728 <HAL_RCC_OscConfig+0x4b4>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7ff f9d1 	bl	8001a64 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c6:	f7ff f9cd 	bl	8001a64 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e064      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d8:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x452>
 80026e4:	e05c      	b.n	80027a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <HAL_RCC_OscConfig+0x4b4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7ff f9ba 	bl	8001a64 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f4:	f7ff f9b6 	bl	8001a64 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e04d      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_RCC_OscConfig+0x4ac>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x480>
 8002712:	e045      	b.n	80027a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d107      	bne.n	800272c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e040      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
 8002720:	40023800 	.word	0x40023800
 8002724:	40007000 	.word	0x40007000
 8002728:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800272c:	4b1f      	ldr	r3, [pc, #124]	@ (80027ac <HAL_RCC_OscConfig+0x538>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d030      	beq.n	800279c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d129      	bne.n	800279c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d122      	bne.n	800279c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800275c:	4013      	ands	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002762:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002764:	4293      	cmp	r3, r2
 8002766:	d119      	bne.n	800279c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	3b01      	subs	r3, #1
 8002776:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d10f      	bne.n	800279c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002786:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d107      	bne.n	800279c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800

080027b0 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x00000001)
 80027b4:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <EXTI0_IRQHandler+0x40>)
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d011      	beq.n	80027e4 <EXTI0_IRQHandler+0x34>
	{
		if( (GPIOB->IDR & 0x00000002) == 0)
 80027c0:	4b0c      	ldr	r3, [pc, #48]	@ (80027f4 <EXTI0_IRQHandler+0x44>)
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d108      	bne.n	80027de <EXTI0_IRQHandler+0x2e>
		{
			Encoder_Count--;
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <EXTI0_IRQHandler+0x48>)
 80027ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	b21a      	sxth	r2, r3
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <EXTI0_IRQHandler+0x48>)
 80027dc:	801a      	strh	r2, [r3, #0]
		}
		EXTI->PR = 0x00000001;
 80027de:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <EXTI0_IRQHandler+0x40>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	615a      	str	r2, [r3, #20]
	}
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40013c00 	.word	0x40013c00
 80027f4:	40020400 	.word	0x40020400
 80027f8:	200001f4 	.word	0x200001f4

080027fc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x00000002)
 8002800:	4b0e      	ldr	r3, [pc, #56]	@ (800283c <EXTI1_IRQHandler+0x40>)
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d011      	beq.n	8002830 <EXTI1_IRQHandler+0x34>
	{
		if((GPIOB->IDR & 0x00000001) == 0)
 800280c:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <EXTI1_IRQHandler+0x44>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d108      	bne.n	800282a <EXTI1_IRQHandler+0x2e>
		{
			Encoder_Count++;
 8002818:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <EXTI1_IRQHandler+0x48>)
 800281a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800281e:	b29b      	uxth	r3, r3
 8002820:	3301      	adds	r3, #1
 8002822:	b29b      	uxth	r3, r3
 8002824:	b21a      	sxth	r2, r3
 8002826:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <EXTI1_IRQHandler+0x48>)
 8002828:	801a      	strh	r2, [r3, #0]
		}
		EXTI->PR = 0x00000002;
 800282a:	4b04      	ldr	r3, [pc, #16]	@ (800283c <EXTI1_IRQHandler+0x40>)
 800282c:	2202      	movs	r2, #2
 800282e:	615a      	str	r2, [r3, #20]
	}
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40013c00 	.word	0x40013c00
 8002840:	40020400 	.word	0x40020400
 8002844:	200001f4 	.word	0x200001f4

08002848 <Motor_Init>:
#include <stm32f446xx.h>



void Motor_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	//PWM初始化
	Pwm1_Init();
 800284c:	f000 fbee 	bl	800302c <Pwm1_Init>
	Pwm2_Init();
 8002850:	f000 fc86 	bl	8003160 <Pwm2_Init>
	Pwm3_Init();
 8002854:	f000 fd34 	bl	80032c0 <Pwm3_Init>
	Pwm4_Init();
 8002858:	f000 fdc6 	bl	80033e8 <Pwm4_Init>

	//GPIOB 時鐘開啟，GPIOC 時鐘開啟
	RCC->AHB1ENR |= 1 << 1;
 800285c:	4b69      	ldr	r3, [pc, #420]	@ (8002a04 <Motor_Init+0x1bc>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002860:	4a68      	ldr	r2, [pc, #416]	@ (8002a04 <Motor_Init+0x1bc>)
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= 1 << 2;
 8002868:	4b66      	ldr	r3, [pc, #408]	@ (8002a04 <Motor_Init+0x1bc>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	4a65      	ldr	r2, [pc, #404]	@ (8002a04 <Motor_Init+0x1bc>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= 1 << 0;
 8002874:	4b63      	ldr	r3, [pc, #396]	@ (8002a04 <Motor_Init+0x1bc>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	4a62      	ldr	r2, [pc, #392]	@ (8002a04 <Motor_Init+0x1bc>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6313      	str	r3, [r2, #48]	@ 0x30

	//使用PC8 PC6當正反轉接角
	GPIOC->MODER &= ~(3 << 16);
 8002880:	4b61      	ldr	r3, [pc, #388]	@ (8002a08 <Motor_Init+0x1c0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a60      	ldr	r2, [pc, #384]	@ (8002a08 <Motor_Init+0x1c0>)
 8002886:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800288a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=   1 << 16;
 800288c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a08 <Motor_Init+0x1c0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a5d      	ldr	r2, [pc, #372]	@ (8002a08 <Motor_Init+0x1c0>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002896:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER&= ~(1 << 8);
 8002898:	4b5b      	ldr	r3, [pc, #364]	@ (8002a08 <Motor_Init+0x1c0>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a5a      	ldr	r2, [pc, #360]	@ (8002a08 <Motor_Init+0x1c0>)
 800289e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028a2:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= 3 << 16;
 80028a4:	4b58      	ldr	r3, [pc, #352]	@ (8002a08 <Motor_Init+0x1c0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a57      	ldr	r2, [pc, #348]	@ (8002a08 <Motor_Init+0x1c0>)
 80028aa:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80028ae:	6093      	str	r3, [r2, #8]

	GPIOC->MODER &= ~(3 << 12);
 80028b0:	4b55      	ldr	r3, [pc, #340]	@ (8002a08 <Motor_Init+0x1c0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a54      	ldr	r2, [pc, #336]	@ (8002a08 <Motor_Init+0x1c0>)
 80028b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028ba:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=   1 << 12;
 80028bc:	4b52      	ldr	r3, [pc, #328]	@ (8002a08 <Motor_Init+0x1c0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a51      	ldr	r2, [pc, #324]	@ (8002a08 <Motor_Init+0x1c0>)
 80028c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028c6:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER&= ~(1 << 6);
 80028c8:	4b4f      	ldr	r3, [pc, #316]	@ (8002a08 <Motor_Init+0x1c0>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002a08 <Motor_Init+0x1c0>)
 80028ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028d2:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= 3 << 12;
 80028d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002a08 <Motor_Init+0x1c0>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a4b      	ldr	r2, [pc, #300]	@ (8002a08 <Motor_Init+0x1c0>)
 80028da:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80028de:	6093      	str	r3, [r2, #8]

	//使用PB12 PB13當正反轉接角
	GPIOB->MODER &= ~(3 << 24);
 80028e0:	4b4a      	ldr	r3, [pc, #296]	@ (8002a0c <Motor_Init+0x1c4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a49      	ldr	r2, [pc, #292]	@ (8002a0c <Motor_Init+0x1c4>)
 80028e6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80028ea:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 24;
 80028ec:	4b47      	ldr	r3, [pc, #284]	@ (8002a0c <Motor_Init+0x1c4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a46      	ldr	r2, [pc, #280]	@ (8002a0c <Motor_Init+0x1c4>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 12);
 80028f8:	4b44      	ldr	r3, [pc, #272]	@ (8002a0c <Motor_Init+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a43      	ldr	r2, [pc, #268]	@ (8002a0c <Motor_Init+0x1c4>)
 80028fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002902:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 24;
 8002904:	4b41      	ldr	r3, [pc, #260]	@ (8002a0c <Motor_Init+0x1c4>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a40      	ldr	r2, [pc, #256]	@ (8002a0c <Motor_Init+0x1c4>)
 800290a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800290e:	6093      	str	r3, [r2, #8]

	GPIOB->MODER &= ~(3 << 26);
 8002910:	4b3e      	ldr	r3, [pc, #248]	@ (8002a0c <Motor_Init+0x1c4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3d      	ldr	r2, [pc, #244]	@ (8002a0c <Motor_Init+0x1c4>)
 8002916:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800291a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 26;
 800291c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a0c <Motor_Init+0x1c4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a3a      	ldr	r2, [pc, #232]	@ (8002a0c <Motor_Init+0x1c4>)
 8002922:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002926:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 13);
 8002928:	4b38      	ldr	r3, [pc, #224]	@ (8002a0c <Motor_Init+0x1c4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a37      	ldr	r2, [pc, #220]	@ (8002a0c <Motor_Init+0x1c4>)
 800292e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002932:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 26;
 8002934:	4b35      	ldr	r3, [pc, #212]	@ (8002a0c <Motor_Init+0x1c4>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a34      	ldr	r2, [pc, #208]	@ (8002a0c <Motor_Init+0x1c4>)
 800293a:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 800293e:	6093      	str	r3, [r2, #8]
	
	//使用PA11、PA12當正反轉接角
	GPIOA->MODER &= ~(3 << 22);
 8002940:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <Motor_Init+0x1c8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a32      	ldr	r2, [pc, #200]	@ (8002a10 <Motor_Init+0x1c8>)
 8002946:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800294a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=   1 << 22;
 800294c:	4b30      	ldr	r3, [pc, #192]	@ (8002a10 <Motor_Init+0x1c8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a2f      	ldr	r2, [pc, #188]	@ (8002a10 <Motor_Init+0x1c8>)
 8002952:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002956:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER&= ~(1 << 11);
 8002958:	4b2d      	ldr	r3, [pc, #180]	@ (8002a10 <Motor_Init+0x1c8>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a2c      	ldr	r2, [pc, #176]	@ (8002a10 <Motor_Init+0x1c8>)
 800295e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002962:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= 3 << 22;
 8002964:	4b2a      	ldr	r3, [pc, #168]	@ (8002a10 <Motor_Init+0x1c8>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a29      	ldr	r2, [pc, #164]	@ (8002a10 <Motor_Init+0x1c8>)
 800296a:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800296e:	6093      	str	r3, [r2, #8]

	GPIOA->MODER &= ~(3 << 24);
 8002970:	4b27      	ldr	r3, [pc, #156]	@ (8002a10 <Motor_Init+0x1c8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a26      	ldr	r2, [pc, #152]	@ (8002a10 <Motor_Init+0x1c8>)
 8002976:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800297a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=   1 << 24;
 800297c:	4b24      	ldr	r3, [pc, #144]	@ (8002a10 <Motor_Init+0x1c8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a23      	ldr	r2, [pc, #140]	@ (8002a10 <Motor_Init+0x1c8>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002986:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER&= ~(1 << 12);
 8002988:	4b21      	ldr	r3, [pc, #132]	@ (8002a10 <Motor_Init+0x1c8>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a20      	ldr	r2, [pc, #128]	@ (8002a10 <Motor_Init+0x1c8>)
 800298e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002992:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= 3 << 24;
 8002994:	4b1e      	ldr	r3, [pc, #120]	@ (8002a10 <Motor_Init+0x1c8>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a1d      	ldr	r2, [pc, #116]	@ (8002a10 <Motor_Init+0x1c8>)
 800299a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800299e:	6093      	str	r3, [r2, #8]

	//使用PB14 PB15當正反轉接角
	GPIOB->MODER &= ~(3 << 28);
 80029a0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <Motor_Init+0x1c4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	@ (8002a0c <Motor_Init+0x1c4>)
 80029a6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80029aa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 28;
 80029ac:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <Motor_Init+0x1c4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a16      	ldr	r2, [pc, #88]	@ (8002a0c <Motor_Init+0x1c4>)
 80029b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 14);
 80029b8:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <Motor_Init+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a13      	ldr	r2, [pc, #76]	@ (8002a0c <Motor_Init+0x1c4>)
 80029be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029c2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 28;
 80029c4:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <Motor_Init+0x1c4>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a10      	ldr	r2, [pc, #64]	@ (8002a0c <Motor_Init+0x1c4>)
 80029ca:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 80029ce:	6093      	str	r3, [r2, #8]

	GPIOB->MODER &= ~(3 << 30);
 80029d0:	4b0e      	ldr	r3, [pc, #56]	@ (8002a0c <Motor_Init+0x1c4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a0c <Motor_Init+0x1c4>)
 80029d6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80029da:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 30;
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <Motor_Init+0x1c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <Motor_Init+0x1c4>)
 80029e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029e6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 15);
 80029e8:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <Motor_Init+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a07      	ldr	r2, [pc, #28]	@ (8002a0c <Motor_Init+0x1c4>)
 80029ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80029f2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 30;
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <Motor_Init+0x1c4>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a04      	ldr	r2, [pc, #16]	@ (8002a0c <Motor_Init+0x1c4>)
 80029fa:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80029fe:	6093      	str	r3, [r2, #8]
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40020000 	.word	0x40020000

08002a14 <Motor_SetSpeed>:


void Motor_SetSpeed(uint8_t name,int speed,float output)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]
	if(name == 1)//PC8、PC6
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d121      	bne.n	8002a6e <Motor_SetSpeed+0x5a>
	{
		if(output >= 0)//正轉
 8002a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	db0d      	blt.n	8002a54 <Motor_SetSpeed+0x40>
		{
			GPIOC->BSRR  = 1 << 8;
 8002a38:	4b47      	ldr	r3, [pc, #284]	@ (8002b58 <Motor_SetSpeed+0x144>)
 8002a3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a3e:	619a      	str	r2, [r3, #24]
			GPIOC->BSRR  = 1 << (6+16);
 8002a40:	4b45      	ldr	r3, [pc, #276]	@ (8002b58 <Motor_SetSpeed+0x144>)
 8002a42:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002a46:	619a      	str	r2, [r3, #24]
			PWM1_SetCompare1(speed);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fb77 	bl	8003140 <PWM1_SetCompare1>
			GPIOB->BSRR  = 1 << (15+16);
			PWM4_SetCompare1(speed);
		}
	}

}
 8002a52:	e07d      	b.n	8002b50 <Motor_SetSpeed+0x13c>
			GPIOC->BSRR  = 1 << (8+16);
 8002a54:	4b40      	ldr	r3, [pc, #256]	@ (8002b58 <Motor_SetSpeed+0x144>)
 8002a56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a5a:	619a      	str	r2, [r3, #24]
			GPIOC->BSRR  = 1 << 6;
 8002a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b58 <Motor_SetSpeed+0x144>)
 8002a5e:	2240      	movs	r2, #64	@ 0x40
 8002a60:	619a      	str	r2, [r3, #24]
			PWM1_SetCompare1(speed);
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fb6a 	bl	8003140 <PWM1_SetCompare1>
}
 8002a6c:	e070      	b.n	8002b50 <Motor_SetSpeed+0x13c>
	else if(name == 2) // PA11、PA12
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d122      	bne.n	8002aba <Motor_SetSpeed+0xa6>
		if(output >= 0)//正轉
 8002a74:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a80:	db0d      	blt.n	8002a9e <Motor_SetSpeed+0x8a>
			GPIOA->BSRR  = 1 << (11+16);
 8002a82:	4b36      	ldr	r3, [pc, #216]	@ (8002b5c <Motor_SetSpeed+0x148>)
 8002a84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a88:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR  = 1 << 12;
 8002a8a:	4b34      	ldr	r3, [pc, #208]	@ (8002b5c <Motor_SetSpeed+0x148>)
 8002a8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a90:	619a      	str	r2, [r3, #24]
			PWM2_SetCompare1(speed);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fc02 	bl	80032a0 <PWM2_SetCompare1>
}
 8002a9c:	e058      	b.n	8002b50 <Motor_SetSpeed+0x13c>
			GPIOA->BSRR  = 1 << 11;
 8002a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b5c <Motor_SetSpeed+0x148>)
 8002aa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002aa4:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR  = 1 << (12+16);
 8002aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b5c <Motor_SetSpeed+0x148>)
 8002aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aac:	619a      	str	r2, [r3, #24]
			PWM2_SetCompare1(speed);
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fbf4 	bl	80032a0 <PWM2_SetCompare1>
}
 8002ab8:	e04a      	b.n	8002b50 <Motor_SetSpeed+0x13c>
	else if(name == 3) // PB12、PB13
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d122      	bne.n	8002b06 <Motor_SetSpeed+0xf2>
		if(output >= 0)//正轉
 8002ac0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002acc:	db0d      	blt.n	8002aea <Motor_SetSpeed+0xd6>
			GPIOB->BSRR  = 1 << 12;
 8002ace:	4b24      	ldr	r3, [pc, #144]	@ (8002b60 <Motor_SetSpeed+0x14c>)
 8002ad0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ad4:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << (13+16);
 8002ad6:	4b22      	ldr	r3, [pc, #136]	@ (8002b60 <Motor_SetSpeed+0x14c>)
 8002ad8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002adc:	619a      	str	r2, [r3, #24]
			PWM3_SetCompare1(speed);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fc70 	bl	80033c8 <PWM3_SetCompare1>
}
 8002ae8:	e032      	b.n	8002b50 <Motor_SetSpeed+0x13c>
			GPIOB->BSRR  = 1 << (12+16);
 8002aea:	4b1d      	ldr	r3, [pc, #116]	@ (8002b60 <Motor_SetSpeed+0x14c>)
 8002aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002af0:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << 13;
 8002af2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <Motor_SetSpeed+0x14c>)
 8002af4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002af8:	619a      	str	r2, [r3, #24]
			PWM3_SetCompare1(speed);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fc62 	bl	80033c8 <PWM3_SetCompare1>
}
 8002b04:	e024      	b.n	8002b50 <Motor_SetSpeed+0x13c>
	else if(name == 4) // PB14、PB15
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d121      	bne.n	8002b50 <Motor_SetSpeed+0x13c>
		if(output >= 0)//正轉
 8002b0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b18:	db0d      	blt.n	8002b36 <Motor_SetSpeed+0x122>
			GPIOB->BSRR  = 1 << (14+16);
 8002b1a:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <Motor_SetSpeed+0x14c>)
 8002b1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b20:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << 15;
 8002b22:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <Motor_SetSpeed+0x14c>)
 8002b24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002b28:	619a      	str	r2, [r3, #24]
			PWM4_SetCompare1(speed);
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fcde 	bl	80034f0 <PWM4_SetCompare1>
}
 8002b34:	e00c      	b.n	8002b50 <Motor_SetSpeed+0x13c>
			GPIOB->BSRR  = 1 << 14;
 8002b36:	4b0a      	ldr	r3, [pc, #40]	@ (8002b60 <Motor_SetSpeed+0x14c>)
 8002b38:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b3c:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << (15+16);
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <Motor_SetSpeed+0x14c>)
 8002b40:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b44:	619a      	str	r2, [r3, #24]
			PWM4_SetCompare1(speed);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fcd0 	bl	80034f0 <PWM4_SetCompare1>
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020400 	.word	0x40020400

08002b64 <OLED_W_SCL>:
#include "OLED_Font.h"


//GPIOB 8 當SCL
void OLED_W_SCL(uint8_t set)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
	if(set == 1) GPIOB->BSRR = 1 << 8;
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d104      	bne.n	8002b7e <OLED_W_SCL+0x1a>
 8002b74:	4b07      	ldr	r3, [pc, #28]	@ (8002b94 <OLED_W_SCL+0x30>)
 8002b76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b7a:	619a      	str	r2, [r3, #24]
	else	     GPIOB->BSRR = 1 << (24);
}
 8002b7c:	e003      	b.n	8002b86 <OLED_W_SCL+0x22>
	else	     GPIOB->BSRR = 1 << (24);
 8002b7e:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <OLED_W_SCL+0x30>)
 8002b80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40020400 	.word	0x40020400

08002b98 <OLED_W_SDA>:
//GPIOB 9 當SDA
void OLED_W_SDA(uint8_t set)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
	if(set == 1) GPIOB->BSRR = 1 << 9;
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d104      	bne.n	8002bb2 <OLED_W_SDA+0x1a>
 8002ba8:	4b07      	ldr	r3, [pc, #28]	@ (8002bc8 <OLED_W_SDA+0x30>)
 8002baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bae:	619a      	str	r2, [r3, #24]
	else	     GPIOB->BSRR = 1 << (25);
}
 8002bb0:	e003      	b.n	8002bba <OLED_W_SDA+0x22>
	else	     GPIOB->BSRR = 1 << (25);
 8002bb2:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <OLED_W_SDA+0x30>)
 8002bb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bb8:	619a      	str	r2, [r3, #24]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40020400 	.word	0x40020400

08002bcc <OLED_I2C_Init>:

/*引脚初始化*/
void OLED_I2C_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
    //開啟GPIOB時鐘
    RCC->AHB1ENR |= 1 << 1;
 8002bd0:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <OLED_I2C_Init+0x68>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	4a17      	ldr	r2, [pc, #92]	@ (8002c34 <OLED_I2C_Init+0x68>)
 8002bd6:	f043 0302 	orr.w	r3, r3, #2
 8002bda:	6313      	str	r3, [r2, #48]	@ 0x30

    //PB8 PB9 都OPEN DRAIN
	GPIOB->MODER  |= 1 << 16;
 8002bdc:	4b16      	ldr	r3, [pc, #88]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a15      	ldr	r2, [pc, #84]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= 1 << 8;
 8002be8:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a12      	ldr	r2, [pc, #72]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR|= 3 << 16;
 8002bf4:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002bfa:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002bfe:	6093      	str	r3, [r2, #8]

	GPIOB->MODER  |= 1 << 18;
 8002c00:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0c      	ldr	r2, [pc, #48]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002c06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= 1 << 9;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a09      	ldr	r2, [pc, #36]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c16:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR|= 3 << 18;
 8002c18:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a06      	ldr	r2, [pc, #24]	@ (8002c38 <OLED_I2C_Init+0x6c>)
 8002c1e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8002c22:	6093      	str	r3, [r2, #8]
	
	OLED_W_SCL(1);
 8002c24:	2001      	movs	r0, #1
 8002c26:	f7ff ff9d 	bl	8002b64 <OLED_W_SCL>
	OLED_W_SDA(1);
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f7ff ffb4 	bl	8002b98 <OLED_W_SDA>
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020400 	.word	0x40020400

08002c3c <OLED_I2C_Start>:
  * @brief  I2C开始
  * @param  无
  * @retval 无
  */
void OLED_I2C_Start(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 8002c40:	2001      	movs	r0, #1
 8002c42:	f7ff ffa9 	bl	8002b98 <OLED_W_SDA>
	OLED_W_SCL(1);
 8002c46:	2001      	movs	r0, #1
 8002c48:	f7ff ff8c 	bl	8002b64 <OLED_W_SCL>
	OLED_W_SDA(0);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7ff ffa3 	bl	8002b98 <OLED_W_SDA>
	OLED_W_SCL(0);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f7ff ff86 	bl	8002b64 <OLED_W_SCL>
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <OLED_I2C_Stop>:
  * @brief  I2C停止
  * @param  无
  * @retval 无
  */
void OLED_I2C_Stop(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7ff ff99 	bl	8002b98 <OLED_W_SDA>
	OLED_W_SCL(1);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f7ff ff7c 	bl	8002b64 <OLED_W_SCL>
	OLED_W_SDA(1);
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	f7ff ff93 	bl	8002b98 <OLED_W_SDA>
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <OLED_I2C_SendByte>:
  * @brief  I2C发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_I2C_SendByte(uint8_t Byte)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]
 8002c84:	e016      	b.n	8002cb4 <OLED_I2C_SendByte+0x3e>
	{
		OLED_W_SDA(!!(Byte & (0x80 >> i)));
 8002c86:	79fa      	ldrb	r2, [r7, #7]
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2180      	movs	r1, #128	@ 0x80
 8002c8c:	fa41 f303 	asr.w	r3, r1, r3
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff7b 	bl	8002b98 <OLED_W_SDA>
		OLED_W_SCL(1);
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f7ff ff5e 	bl	8002b64 <OLED_W_SCL>
		OLED_W_SCL(0);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7ff ff5b 	bl	8002b64 <OLED_W_SCL>
	for (i = 0; i < 8; i++)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d9e5      	bls.n	8002c86 <OLED_I2C_SendByte+0x10>
	}
	OLED_W_SCL(1);	//额外的一个时钟，不处理应答信号
 8002cba:	2001      	movs	r0, #1
 8002cbc:	f7ff ff52 	bl	8002b64 <OLED_W_SCL>
	OLED_W_SCL(0);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f7ff ff4f 	bl	8002b64 <OLED_W_SCL>
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 8002cd8:	f7ff ffb0 	bl	8002c3c <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 8002cdc:	2078      	movs	r0, #120	@ 0x78
 8002cde:	f7ff ffca 	bl	8002c76 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00);		//写命令
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7ff ffc7 	bl	8002c76 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command); 
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ffc3 	bl	8002c76 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 8002cf0:	f7ff ffb4 	bl	8002c5c <OLED_I2C_Stop>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 8002d06:	f7ff ff99 	bl	8002c3c <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 8002d0a:	2078      	movs	r0, #120	@ 0x78
 8002d0c:	f7ff ffb3 	bl	8002c76 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40);		//写数据
 8002d10:	2040      	movs	r0, #64	@ 0x40
 8002d12:	f7ff ffb0 	bl	8002c76 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ffac 	bl	8002c76 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 8002d1e:	f7ff ff9d 	bl	8002c5c <OLED_I2C_Stop>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	460a      	mov	r2, r1
 8002d34:	71fb      	strb	r3, [r7, #7]
 8002d36:	4613      	mov	r3, r2
 8002d38:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff ffc3 	bl	8002cce <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 8002d48:	79bb      	ldrb	r3, [r7, #6]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f043 0310 	orr.w	r3, r3, #16
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ffba 	bl	8002cce <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 8002d5a:	79bb      	ldrb	r3, [r7, #6]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ffb3 	bl	8002cce <OLED_WriteCommand>
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	71bb      	strb	r3, [r7, #6]
 8002d7a:	e014      	b.n	8002da6 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 8002d7c:	79bb      	ldrb	r3, [r7, #6]
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ffd2 	bl	8002d2a <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	71fb      	strb	r3, [r7, #7]
 8002d8a:	e005      	b.n	8002d98 <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7ff ffb5 	bl	8002cfc <OLED_WriteData>
		for(i = 0; i < 128; i++)
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	3301      	adds	r3, #1
 8002d96:	71fb      	strb	r3, [r7, #7]
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	daf5      	bge.n	8002d8c <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8002da0:	79bb      	ldrb	r3, [r7, #6]
 8002da2:	3301      	adds	r3, #1
 8002da4:	71bb      	strb	r3, [r7, #6]
 8002da6:	79bb      	ldrb	r3, [r7, #6]
 8002da8:	2b07      	cmp	r3, #7
 8002daa:	d9e7      	bls.n	8002d7c <OLED_Clear+0xc>
		}
	}
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{      	
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	71bb      	strb	r3, [r7, #6]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	79bb      	ldrb	r3, [r7, #6]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	4619      	mov	r1, r3
 8002de0:	4610      	mov	r0, r2
 8002de2:	f7ff ffa2 	bl	8002d2a <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	e00e      	b.n	8002e0a <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 8002dec:	797b      	ldrb	r3, [r7, #5]
 8002dee:	f1a3 0220 	sub.w	r2, r3, #32
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	491c      	ldr	r1, [pc, #112]	@ (8002e68 <OLED_ShowChar+0xb0>)
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	440a      	add	r2, r1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff7c 	bl	8002cfc <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	3301      	adds	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b07      	cmp	r3, #7
 8002e0e:	d9ed      	bls.n	8002dec <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	79bb      	ldrb	r3, [r7, #6]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f7ff ff7d 	bl	8002d2a <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	e00f      	b.n	8002e56 <OLED_ShowChar+0x9e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 8002e36:	797b      	ldrb	r3, [r7, #5]
 8002e38:	f1a3 0220 	sub.w	r2, r3, #32
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	3308      	adds	r3, #8
 8002e40:	4909      	ldr	r1, [pc, #36]	@ (8002e68 <OLED_ShowChar+0xb0>)
 8002e42:	0112      	lsls	r2, r2, #4
 8002e44:	440a      	add	r2, r1
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ff56 	bl	8002cfc <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	3301      	adds	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b07      	cmp	r3, #7
 8002e5a:	d9ec      	bls.n	8002e36 <OLED_ShowChar+0x7e>
	}
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	08003dbc 	.word	0x08003dbc

08002e6c <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	603a      	str	r2, [r7, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	e00e      	b.n	8002ea0 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 8002e82:	79ba      	ldrb	r2, [r7, #6]
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	4413      	add	r3, r2
 8002e88:	b2d9      	uxtb	r1, r3
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff8f 	bl	8002db8 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1ea      	bne.n	8002e82 <OLED_ShowString+0x16>
	}
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <OLED_Pow>:
/**
  * @brief  OLED次方函数
  * @retval 返回值等于X的Y次方
  */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8002ec4:	e004      	b.n	8002ed0 <OLED_Pow+0x1a>
	{
		Result *= X;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	1e5a      	subs	r2, r3, #1
 8002ed4:	603a      	str	r2, [r7, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f5      	bne.n	8002ec6 <OLED_Pow+0x10>
	}
	return Result;
 8002eda:	68fb      	ldr	r3, [r7, #12]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <OLED_ShowNum>:
  * @param  Number 要显示的数字，范围：0~4294967295
  * @param  Length 要显示数字的长度，范围：1~10
  * @retval 无
  */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	603a      	str	r2, [r7, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	71bb      	strb	r3, [r7, #6]
 8002efa:	4613      	mov	r3, r2
 8002efc:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)							
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e023      	b.n	8002f4c <OLED_ShowNum+0x64>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 8002f04:	79ba      	ldrb	r2, [r7, #6]
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	4413      	add	r3, r2
 8002f0a:	b2dc      	uxtb	r4, r3
 8002f0c:	797a      	ldrb	r2, [r7, #5]
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	4619      	mov	r1, r3
 8002f16:	200a      	movs	r0, #10
 8002f18:	f7ff ffcd 	bl	8002eb6 <OLED_Pow>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f24:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <OLED_ShowNum+0x78>)
 8002f26:	fba3 2301 	umull	r2, r3, r3, r1
 8002f2a:	08da      	lsrs	r2, r3, #3
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	1aca      	subs	r2, r1, r3
 8002f36:	b2d3      	uxtb	r3, r2
 8002f38:	3330      	adds	r3, #48	@ 0x30
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	4621      	mov	r1, r4
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff39 	bl	8002db8 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	797b      	ldrb	r3, [r7, #5]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d3d7      	bcc.n	8002f04 <OLED_ShowNum+0x1c>
	}
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd90      	pop	{r4, r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	cccccccd 	.word	0xcccccccd

08002f64 <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	e00c      	b.n	8002f8a <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 8002f70:	2300      	movs	r3, #0
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	e002      	b.n	8002f7c <OLED_Init+0x18>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f82:	d3f8      	bcc.n	8002f76 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3301      	adds	r3, #1
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f90:	d3ee      	bcc.n	8002f70 <OLED_Init+0xc>
	}
	
	OLED_I2C_Init();			//端口初始化
 8002f92:	f7ff fe1b 	bl	8002bcc <OLED_I2C_Init>
	
	OLED_WriteCommand(0xAE);	//关闭显示
 8002f96:	20ae      	movs	r0, #174	@ 0xae
 8002f98:	f7ff fe99 	bl	8002cce <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 8002f9c:	20d5      	movs	r0, #213	@ 0xd5
 8002f9e:	f7ff fe96 	bl	8002cce <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 8002fa2:	2080      	movs	r0, #128	@ 0x80
 8002fa4:	f7ff fe93 	bl	8002cce <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 8002fa8:	20a8      	movs	r0, #168	@ 0xa8
 8002faa:	f7ff fe90 	bl	8002cce <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8002fae:	203f      	movs	r0, #63	@ 0x3f
 8002fb0:	f7ff fe8d 	bl	8002cce <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 8002fb4:	20d3      	movs	r0, #211	@ 0xd3
 8002fb6:	f7ff fe8a 	bl	8002cce <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7ff fe87 	bl	8002cce <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 8002fc0:	2040      	movs	r0, #64	@ 0x40
 8002fc2:	f7ff fe84 	bl	8002cce <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 8002fc6:	20a1      	movs	r0, #161	@ 0xa1
 8002fc8:	f7ff fe81 	bl	8002cce <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 8002fcc:	20c8      	movs	r0, #200	@ 0xc8
 8002fce:	f7ff fe7e 	bl	8002cce <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8002fd2:	20da      	movs	r0, #218	@ 0xda
 8002fd4:	f7ff fe7b 	bl	8002cce <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8002fd8:	2012      	movs	r0, #18
 8002fda:	f7ff fe78 	bl	8002cce <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 8002fde:	2081      	movs	r0, #129	@ 0x81
 8002fe0:	f7ff fe75 	bl	8002cce <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8002fe4:	20cf      	movs	r0, #207	@ 0xcf
 8002fe6:	f7ff fe72 	bl	8002cce <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8002fea:	20d9      	movs	r0, #217	@ 0xd9
 8002fec:	f7ff fe6f 	bl	8002cce <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8002ff0:	20f1      	movs	r0, #241	@ 0xf1
 8002ff2:	f7ff fe6c 	bl	8002cce <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8002ff6:	20db      	movs	r0, #219	@ 0xdb
 8002ff8:	f7ff fe69 	bl	8002cce <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8002ffc:	2030      	movs	r0, #48	@ 0x30
 8002ffe:	f7ff fe66 	bl	8002cce <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8003002:	20a4      	movs	r0, #164	@ 0xa4
 8003004:	f7ff fe63 	bl	8002cce <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 8003008:	20a6      	movs	r0, #166	@ 0xa6
 800300a:	f7ff fe60 	bl	8002cce <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 800300e:	208d      	movs	r0, #141	@ 0x8d
 8003010:	f7ff fe5d 	bl	8002cce <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8003014:	2014      	movs	r0, #20
 8003016:	f7ff fe5a 	bl	8002cce <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 800301a:	20af      	movs	r0, #175	@ 0xaf
 800301c:	f7ff fe57 	bl	8002cce <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 8003020:	f7ff fea6 	bl	8002d70 <OLED_Clear>
}
 8003024:	bf00      	nop
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <Pwm1_Init>:
#include <stm32f446xx.h>


void Pwm1_Init(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
	//開啟GPIOA、TIM1時鐘
	RCC->AHB1ENR |= 1 << 0;
 8003030:	4b40      	ldr	r3, [pc, #256]	@ (8003134 <Pwm1_Init+0x108>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003034:	4a3f      	ldr	r2, [pc, #252]	@ (8003134 <Pwm1_Init+0x108>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= 1 << 0;
 800303c:	4b3d      	ldr	r3, [pc, #244]	@ (8003134 <Pwm1_Init+0x108>)
 800303e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003040:	4a3c      	ldr	r2, [pc, #240]	@ (8003134 <Pwm1_Init+0x108>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6453      	str	r3, [r2, #68]	@ 0x44

	//tim1 PWM輸出復用功能
	GPIOA->AFR[1] &= ~(0xF << 0);
 8003048:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <Pwm1_Init+0x10c>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	4a3a      	ldr	r2, [pc, #232]	@ (8003138 <Pwm1_Init+0x10c>)
 800304e:	f023 030f 	bic.w	r3, r3, #15
 8003052:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (1 << 0);
 8003054:	4b38      	ldr	r3, [pc, #224]	@ (8003138 <Pwm1_Init+0x10c>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	4a37      	ldr	r2, [pc, #220]	@ (8003138 <Pwm1_Init+0x10c>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6253      	str	r3, [r2, #36]	@ 0x24


	//設置PA8為復用推挽輸出
	GPIOA->MODER  &=~(3 << 16);
 8003060:	4b35      	ldr	r3, [pc, #212]	@ (8003138 <Pwm1_Init+0x10c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a34      	ldr	r2, [pc, #208]	@ (8003138 <Pwm1_Init+0x10c>)
 8003066:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800306a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 16;
 800306c:	4b32      	ldr	r3, [pc, #200]	@ (8003138 <Pwm1_Init+0x10c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a31      	ldr	r2, [pc, #196]	@ (8003138 <Pwm1_Init+0x10c>)
 8003072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003076:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 8);
 8003078:	4b2f      	ldr	r3, [pc, #188]	@ (8003138 <Pwm1_Init+0x10c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a2e      	ldr	r2, [pc, #184]	@ (8003138 <Pwm1_Init+0x10c>)
 800307e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003082:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 16;
 8003084:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <Pwm1_Init+0x10c>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <Pwm1_Init+0x10c>)
 800308a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800308e:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM1->SMCR &= ~(7 << 0);
 8003090:	4b2a      	ldr	r3, [pc, #168]	@ (800313c <Pwm1_Init+0x110>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a29      	ldr	r2, [pc, #164]	@ (800313c <Pwm1_Init+0x110>)
 8003096:	f023 0307 	bic.w	r3, r3, #7
 800309a:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM1->PSC = 4-1;
 800309c:	4b27      	ldr	r3, [pc, #156]	@ (800313c <Pwm1_Init+0x110>)
 800309e:	2203      	movs	r2, #3
 80030a0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 1000-1;
 80030a2:	4b26      	ldr	r3, [pc, #152]	@ (800313c <Pwm1_Init+0x110>)
 80030a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80030a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	
	//設置自動裝載、計數方向、始能計數器
	TIM1->CR1 |=  1 << 7;
 80030aa:	4b24      	ldr	r3, [pc, #144]	@ (800313c <Pwm1_Init+0x110>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a23      	ldr	r2, [pc, #140]	@ (800313c <Pwm1_Init+0x110>)
 80030b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030b4:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(1 << 4);
 80030b6:	4b21      	ldr	r3, [pc, #132]	@ (800313c <Pwm1_Init+0x110>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a20      	ldr	r2, [pc, #128]	@ (800313c <Pwm1_Init+0x110>)
 80030bc:	f023 0310 	bic.w	r3, r3, #16
 80030c0:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |=  1 << 0;
 80030c2:	4b1e      	ldr	r3, [pc, #120]	@ (800313c <Pwm1_Init+0x110>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1d      	ldr	r2, [pc, #116]	@ (800313c <Pwm1_Init+0x110>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6013      	str	r3, [r2, #0]
	
    //設置初始化計數器
	TIM1->EGR |=  1 << 0;
 80030ce:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <Pwm1_Init+0x110>)
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	4a1a      	ldr	r2, [pc, #104]	@ (800313c <Pwm1_Init+0x110>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
	
    //設置PWM模式、輸出比較自動裝載
	TIM1->CCMR1 &= ~(7 << 4);
 80030da:	4b18      	ldr	r3, [pc, #96]	@ (800313c <Pwm1_Init+0x110>)
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	4a17      	ldr	r2, [pc, #92]	@ (800313c <Pwm1_Init+0x110>)
 80030e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e4:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |=   6 << 4;
 80030e6:	4b15      	ldr	r3, [pc, #84]	@ (800313c <Pwm1_Init+0x110>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	4a14      	ldr	r2, [pc, #80]	@ (800313c <Pwm1_Init+0x110>)
 80030ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80030f0:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |=   1 << 3;
 80030f2:	4b12      	ldr	r3, [pc, #72]	@ (800313c <Pwm1_Init+0x110>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	4a11      	ldr	r2, [pc, #68]	@ (800313c <Pwm1_Init+0x110>)
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM1->CCR1  = 0;
 80030fe:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <Pwm1_Init+0x110>)
 8003100:	2200      	movs	r2, #0
 8003102:	635a      	str	r2, [r3, #52]	@ 0x34
	
    //設置輸出比較始能、輸出極性
	TIM1->CCER  |=   1 << 0;
 8003104:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <Pwm1_Init+0x110>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a0c      	ldr	r2, [pc, #48]	@ (800313c <Pwm1_Init+0x110>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6213      	str	r3, [r2, #32]
	TIM1->CCER  &= ~(1 << 1);
 8003110:	4b0a      	ldr	r3, [pc, #40]	@ (800313c <Pwm1_Init+0x110>)
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4a09      	ldr	r2, [pc, #36]	@ (800313c <Pwm1_Init+0x110>)
 8003116:	f023 0302 	bic.w	r3, r3, #2
 800311a:	6213      	str	r3, [r2, #32]
	
	TIM1->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)
 800311c:	4b07      	ldr	r3, [pc, #28]	@ (800313c <Pwm1_Init+0x110>)
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	4a06      	ldr	r2, [pc, #24]	@ (800313c <Pwm1_Init+0x110>)
 8003122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003126:	6453      	str	r3, [r2, #68]	@ 0x44

	//TIM_Cmd(TIM1, ENABLE);

}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	40020000 	.word	0x40020000
 800313c:	40010000 	.word	0x40010000

08003140 <PWM1_SetCompare1>:

void PWM1_SetCompare1(uint16_t Compare)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM1->CCR1 = Compare;
 800314a:	4a04      	ldr	r2, [pc, #16]	@ (800315c <PWM1_SetCompare1+0x1c>)
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40010000 	.word	0x40010000

08003160 <Pwm2_Init>:
#include <stm32f446xx.h>

//使用TIM2 CH1 PA0當PWM輸出
void Pwm2_Init(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
	//開啟GPIOA、TIM1時鐘
	RCC->AHB1ENR |= 1 << 0;
 8003164:	4b4c      	ldr	r3, [pc, #304]	@ (8003298 <Pwm2_Init+0x138>)
 8003166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003168:	4a4b      	ldr	r2, [pc, #300]	@ (8003298 <Pwm2_Init+0x138>)
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= 1 << 0;
 8003170:	4b49      	ldr	r3, [pc, #292]	@ (8003298 <Pwm2_Init+0x138>)
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	4a48      	ldr	r2, [pc, #288]	@ (8003298 <Pwm2_Init+0x138>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6413      	str	r3, [r2, #64]	@ 0x40

	//PA0當TIM2復用
	GPIOA->AFR[0] &= ~(0xF << 0);
 800317c:	4b47      	ldr	r3, [pc, #284]	@ (800329c <Pwm2_Init+0x13c>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4a46      	ldr	r2, [pc, #280]	@ (800329c <Pwm2_Init+0x13c>)
 8003182:	f023 030f 	bic.w	r3, r3, #15
 8003186:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1 << 0);
 8003188:	4b44      	ldr	r3, [pc, #272]	@ (800329c <Pwm2_Init+0x13c>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4a43      	ldr	r2, [pc, #268]	@ (800329c <Pwm2_Init+0x13c>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6213      	str	r3, [r2, #32]


	//設置PA0為復用推挽輸出
	GPIOA->MODER  &=~(3 << 0);
 8003194:	4b41      	ldr	r3, [pc, #260]	@ (800329c <Pwm2_Init+0x13c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a40      	ldr	r2, [pc, #256]	@ (800329c <Pwm2_Init+0x13c>)
 800319a:	f023 0303 	bic.w	r3, r3, #3
 800319e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 0;
 80031a0:	4b3e      	ldr	r3, [pc, #248]	@ (800329c <Pwm2_Init+0x13c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a3d      	ldr	r2, [pc, #244]	@ (800329c <Pwm2_Init+0x13c>)
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 0);
 80031ac:	4b3b      	ldr	r3, [pc, #236]	@ (800329c <Pwm2_Init+0x13c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a3a      	ldr	r2, [pc, #232]	@ (800329c <Pwm2_Init+0x13c>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 0;
 80031b8:	4b38      	ldr	r3, [pc, #224]	@ (800329c <Pwm2_Init+0x13c>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4a37      	ldr	r2, [pc, #220]	@ (800329c <Pwm2_Init+0x13c>)
 80031be:	f043 0303 	orr.w	r3, r3, #3
 80031c2:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM2->SMCR &= ~(7 << 0);
 80031c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80031ce:	f023 0307 	bic.w	r3, r3, #7
 80031d2:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM2->PSC = 4-1;
 80031d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80031d8:	2203      	movs	r2, #3
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1000-1;
 80031dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80031e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031e4:	62da      	str	r2, [r3, #44]	@ 0x2c

	//設置自動裝載、計數方向、始能計數器
	TIM2->CR1 |=  1 << 7;
 80031e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80031f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031f4:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(1 << 4);
 80031f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003200:	f023 0310 	bic.w	r3, r3, #16
 8003204:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |=  1 << 0;
 8003206:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6013      	str	r3, [r2, #0]

    //設置初始化計數器
	TIM2->EGR |=  1 << 0;
 8003216:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);

    //設置PWM模式、輸出比較自動裝載
	TIM2->CCMR1 &= ~(7 << 4);
 8003226:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003234:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=   6 << 4;
 8003236:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003240:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003244:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=   1 << 3;
 8003246:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003250:	f043 0308 	orr.w	r3, r3, #8
 8003254:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM2->CCR1  = 0;
 8003256:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800325a:	2200      	movs	r2, #0
 800325c:	635a      	str	r2, [r3, #52]	@ 0x34

    //設置輸出比較始能、輸出極性
	TIM2->CCER  |=   1 << 0;
 800325e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6213      	str	r3, [r2, #32]
	TIM2->CCER  &= ~(1 << 1);
 800326e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003278:	f023 0302 	bic.w	r3, r3, #2
 800327c:	6213      	str	r3, [r2, #32]

	TIM2->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)
 800327e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003284:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800328c:	6453      	str	r3, [r2, #68]	@ 0x44

	//TIM_Cmd(TIM1, ENABLE);

}
 800328e:	bf00      	nop
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	40023800 	.word	0x40023800
 800329c:	40020000 	.word	0x40020000

080032a0 <PWM2_SetCompare1>:

void PWM2_SetCompare1(uint16_t Compare)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM2->CCR1 = Compare;
 80032aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <Pwm3_Init>:
#include <stm32f446xx.h>


void Pwm3_Init(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
	//開啟GPIOA、TIM3時鐘
	RCC->AHB1ENR |= 1 << 0;
 80032c4:	4b3d      	ldr	r3, [pc, #244]	@ (80033bc <Pwm3_Init+0xfc>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	4a3c      	ldr	r2, [pc, #240]	@ (80033bc <Pwm3_Init+0xfc>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= 1 << 1;
 80032d0:	4b3a      	ldr	r3, [pc, #232]	@ (80033bc <Pwm3_Init+0xfc>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	4a39      	ldr	r2, [pc, #228]	@ (80033bc <Pwm3_Init+0xfc>)
 80032d6:	f043 0302 	orr.w	r3, r3, #2
 80032da:	6413      	str	r3, [r2, #64]	@ 0x40

	//Tim3 PWM輸出復用功能 使用TIM3_CH1通道PA6
	GPIOA->AFR[0] &= ~(0xF << 24);
 80032dc:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <Pwm3_Init+0x100>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	4a37      	ldr	r2, [pc, #220]	@ (80033c0 <Pwm3_Init+0x100>)
 80032e2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80032e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (2 << 24);
 80032e8:	4b35      	ldr	r3, [pc, #212]	@ (80033c0 <Pwm3_Init+0x100>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4a34      	ldr	r2, [pc, #208]	@ (80033c0 <Pwm3_Init+0x100>)
 80032ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032f2:	6213      	str	r3, [r2, #32]


	//設置PA6為復用推挽輸出
	GPIOA->MODER  &=~(3 << 12);
 80032f4:	4b32      	ldr	r3, [pc, #200]	@ (80033c0 <Pwm3_Init+0x100>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a31      	ldr	r2, [pc, #196]	@ (80033c0 <Pwm3_Init+0x100>)
 80032fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 12;
 8003300:	4b2f      	ldr	r3, [pc, #188]	@ (80033c0 <Pwm3_Init+0x100>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a2e      	ldr	r2, [pc, #184]	@ (80033c0 <Pwm3_Init+0x100>)
 8003306:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800330a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 6);
 800330c:	4b2c      	ldr	r3, [pc, #176]	@ (80033c0 <Pwm3_Init+0x100>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a2b      	ldr	r2, [pc, #172]	@ (80033c0 <Pwm3_Init+0x100>)
 8003312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003316:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 12;
 8003318:	4b29      	ldr	r3, [pc, #164]	@ (80033c0 <Pwm3_Init+0x100>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a28      	ldr	r2, [pc, #160]	@ (80033c0 <Pwm3_Init+0x100>)
 800331e:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8003322:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM3->SMCR &= ~(7 << 0);
 8003324:	4b27      	ldr	r3, [pc, #156]	@ (80033c4 <Pwm3_Init+0x104>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a26      	ldr	r2, [pc, #152]	@ (80033c4 <Pwm3_Init+0x104>)
 800332a:	f023 0307 	bic.w	r3, r3, #7
 800332e:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM3->PSC = 4-1;
 8003330:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <Pwm3_Init+0x104>)
 8003332:	2203      	movs	r2, #3
 8003334:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 1000-1;
 8003336:	4b23      	ldr	r3, [pc, #140]	@ (80033c4 <Pwm3_Init+0x104>)
 8003338:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800333c:	62da      	str	r2, [r3, #44]	@ 0x2c

	//設置自動裝載、計數方向、始能計數器
	TIM3->CR1 |=  1 << 7;
 800333e:	4b21      	ldr	r3, [pc, #132]	@ (80033c4 <Pwm3_Init+0x104>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a20      	ldr	r2, [pc, #128]	@ (80033c4 <Pwm3_Init+0x104>)
 8003344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003348:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~(1 << 4);
 800334a:	4b1e      	ldr	r3, [pc, #120]	@ (80033c4 <Pwm3_Init+0x104>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1d      	ldr	r2, [pc, #116]	@ (80033c4 <Pwm3_Init+0x104>)
 8003350:	f023 0310 	bic.w	r3, r3, #16
 8003354:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |=  1 << 0;
 8003356:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <Pwm3_Init+0x104>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1a      	ldr	r2, [pc, #104]	@ (80033c4 <Pwm3_Init+0x104>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6013      	str	r3, [r2, #0]

    //設置初始化計數器
	TIM3->EGR |=  1 << 0;
 8003362:	4b18      	ldr	r3, [pc, #96]	@ (80033c4 <Pwm3_Init+0x104>)
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4a17      	ldr	r2, [pc, #92]	@ (80033c4 <Pwm3_Init+0x104>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);

    //設置PWM模式、輸出比較自動裝載
	TIM3->CCMR1 &= ~(7 << 4);
 800336e:	4b15      	ldr	r3, [pc, #84]	@ (80033c4 <Pwm3_Init+0x104>)
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	4a14      	ldr	r2, [pc, #80]	@ (80033c4 <Pwm3_Init+0x104>)
 8003374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003378:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=   6 << 4;
 800337a:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <Pwm3_Init+0x104>)
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	4a11      	ldr	r2, [pc, #68]	@ (80033c4 <Pwm3_Init+0x104>)
 8003380:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003384:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=   1 << 3;
 8003386:	4b0f      	ldr	r3, [pc, #60]	@ (80033c4 <Pwm3_Init+0x104>)
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	4a0e      	ldr	r2, [pc, #56]	@ (80033c4 <Pwm3_Init+0x104>)
 800338c:	f043 0308 	orr.w	r3, r3, #8
 8003390:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM3->CCR1  = 0;
 8003392:	4b0c      	ldr	r3, [pc, #48]	@ (80033c4 <Pwm3_Init+0x104>)
 8003394:	2200      	movs	r2, #0
 8003396:	635a      	str	r2, [r3, #52]	@ 0x34

    //設置輸出比較始能、輸出極性
	TIM3->CCER  |=   1 << 0;
 8003398:	4b0a      	ldr	r3, [pc, #40]	@ (80033c4 <Pwm3_Init+0x104>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	4a09      	ldr	r2, [pc, #36]	@ (80033c4 <Pwm3_Init+0x104>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6213      	str	r3, [r2, #32]
	TIM3->CCER  &= ~(1 << 1);
 80033a4:	4b07      	ldr	r3, [pc, #28]	@ (80033c4 <Pwm3_Init+0x104>)
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4a06      	ldr	r2, [pc, #24]	@ (80033c4 <Pwm3_Init+0x104>)
 80033aa:	f023 0302 	bic.w	r3, r3, #2
 80033ae:	6213      	str	r3, [r2, #32]

//	TIM3->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)

	//TIM_Cmd(TIM1, ENABLE);

}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40000400 	.word	0x40000400

080033c8 <PWM3_SetCompare1>:

void PWM3_SetCompare1(uint16_t Compare)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM3->CCR1 = Compare;
 80033d2:	4a04      	ldr	r2, [pc, #16]	@ (80033e4 <PWM3_SetCompare1+0x1c>)
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40000400 	.word	0x40000400

080033e8 <Pwm4_Init>:
#include <stm32f446xx.h>

//使用TIM4 CH1 PB6當PWM輸出
void Pwm4_Init(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
	//開啟GPIOB、TIM4時鐘
	RCC->AHB1ENR |= 1 << 1;
 80033ec:	4b3d      	ldr	r3, [pc, #244]	@ (80034e4 <Pwm4_Init+0xfc>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f0:	4a3c      	ldr	r2, [pc, #240]	@ (80034e4 <Pwm4_Init+0xfc>)
 80033f2:	f043 0302 	orr.w	r3, r3, #2
 80033f6:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= 1 << 2;
 80033f8:	4b3a      	ldr	r3, [pc, #232]	@ (80034e4 <Pwm4_Init+0xfc>)
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	4a39      	ldr	r2, [pc, #228]	@ (80034e4 <Pwm4_Init+0xfc>)
 80033fe:	f043 0304 	orr.w	r3, r3, #4
 8003402:	6413      	str	r3, [r2, #64]	@ 0x40

	//PB6當TIM4復用
	GPIOB->AFR[0] &= ~(0xF << 24);
 8003404:	4b38      	ldr	r3, [pc, #224]	@ (80034e8 <Pwm4_Init+0x100>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4a37      	ldr	r2, [pc, #220]	@ (80034e8 <Pwm4_Init+0x100>)
 800340a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800340e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=  (2 << 24);
 8003410:	4b35      	ldr	r3, [pc, #212]	@ (80034e8 <Pwm4_Init+0x100>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4a34      	ldr	r2, [pc, #208]	@ (80034e8 <Pwm4_Init+0x100>)
 8003416:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800341a:	6213      	str	r3, [r2, #32]


	//設置PB6為復用推挽輸出
	GPIOB->MODER  &=~(3 << 12);
 800341c:	4b32      	ldr	r3, [pc, #200]	@ (80034e8 <Pwm4_Init+0x100>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a31      	ldr	r2, [pc, #196]	@ (80034e8 <Pwm4_Init+0x100>)
 8003422:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003426:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |=  2 << 12;
 8003428:	4b2f      	ldr	r3, [pc, #188]	@ (80034e8 <Pwm4_Init+0x100>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a2e      	ldr	r2, [pc, #184]	@ (80034e8 <Pwm4_Init+0x100>)
 800342e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003432:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &=~(1 << 6);
 8003434:	4b2c      	ldr	r3, [pc, #176]	@ (80034e8 <Pwm4_Init+0x100>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a2b      	ldr	r2, [pc, #172]	@ (80034e8 <Pwm4_Init+0x100>)
 800343a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800343e:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR|=  3 << 12;
 8003440:	4b29      	ldr	r3, [pc, #164]	@ (80034e8 <Pwm4_Init+0x100>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a28      	ldr	r2, [pc, #160]	@ (80034e8 <Pwm4_Init+0x100>)
 8003446:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800344a:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM4->SMCR &= ~(7 << 0);
 800344c:	4b27      	ldr	r3, [pc, #156]	@ (80034ec <Pwm4_Init+0x104>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a26      	ldr	r2, [pc, #152]	@ (80034ec <Pwm4_Init+0x104>)
 8003452:	f023 0307 	bic.w	r3, r3, #7
 8003456:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM4->PSC = 4-1;
 8003458:	4b24      	ldr	r3, [pc, #144]	@ (80034ec <Pwm4_Init+0x104>)
 800345a:	2203      	movs	r2, #3
 800345c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 1000-1;
 800345e:	4b23      	ldr	r3, [pc, #140]	@ (80034ec <Pwm4_Init+0x104>)
 8003460:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003464:	62da      	str	r2, [r3, #44]	@ 0x2c

	//設置自動裝載、計數方向、始能計數器
	TIM4->CR1 |=  1 << 7;
 8003466:	4b21      	ldr	r3, [pc, #132]	@ (80034ec <Pwm4_Init+0x104>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a20      	ldr	r2, [pc, #128]	@ (80034ec <Pwm4_Init+0x104>)
 800346c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003470:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~(1 << 4);
 8003472:	4b1e      	ldr	r3, [pc, #120]	@ (80034ec <Pwm4_Init+0x104>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1d      	ldr	r2, [pc, #116]	@ (80034ec <Pwm4_Init+0x104>)
 8003478:	f023 0310 	bic.w	r3, r3, #16
 800347c:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |=  1 << 0;
 800347e:	4b1b      	ldr	r3, [pc, #108]	@ (80034ec <Pwm4_Init+0x104>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1a      	ldr	r2, [pc, #104]	@ (80034ec <Pwm4_Init+0x104>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	6013      	str	r3, [r2, #0]

    //設置初始化計數器
	TIM4->EGR |=  1 << 0;
 800348a:	4b18      	ldr	r3, [pc, #96]	@ (80034ec <Pwm4_Init+0x104>)
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	4a17      	ldr	r2, [pc, #92]	@ (80034ec <Pwm4_Init+0x104>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);

    //設置PWM模式、輸出比較自動裝載
	TIM4->CCMR1 &= ~(7 << 4);
 8003496:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <Pwm4_Init+0x104>)
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	4a14      	ldr	r2, [pc, #80]	@ (80034ec <Pwm4_Init+0x104>)
 800349c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a0:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=   6 << 4;
 80034a2:	4b12      	ldr	r3, [pc, #72]	@ (80034ec <Pwm4_Init+0x104>)
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	4a11      	ldr	r2, [pc, #68]	@ (80034ec <Pwm4_Init+0x104>)
 80034a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80034ac:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=   1 << 3;
 80034ae:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <Pwm4_Init+0x104>)
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	4a0e      	ldr	r2, [pc, #56]	@ (80034ec <Pwm4_Init+0x104>)
 80034b4:	f043 0308 	orr.w	r3, r3, #8
 80034b8:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM4->CCR1  = 0;
 80034ba:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <Pwm4_Init+0x104>)
 80034bc:	2200      	movs	r2, #0
 80034be:	635a      	str	r2, [r3, #52]	@ 0x34

    //設置輸出比較始能、輸出極性
	TIM4->CCER  |=   1 << 0;
 80034c0:	4b0a      	ldr	r3, [pc, #40]	@ (80034ec <Pwm4_Init+0x104>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a09      	ldr	r2, [pc, #36]	@ (80034ec <Pwm4_Init+0x104>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6213      	str	r3, [r2, #32]
	TIM4->CCER  &= ~(1 << 1);
 80034cc:	4b07      	ldr	r3, [pc, #28]	@ (80034ec <Pwm4_Init+0x104>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a06      	ldr	r2, [pc, #24]	@ (80034ec <Pwm4_Init+0x104>)
 80034d2:	f023 0302 	bic.w	r3, r3, #2
 80034d6:	6213      	str	r3, [r2, #32]

//	TIM2->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)

	//TIM_Cmd(TIM1, ENABLE);

}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40020400 	.word	0x40020400
 80034ec:	40000800 	.word	0x40000800

080034f0 <PWM4_SetCompare1>:

void PWM4_SetCompare1(uint16_t Compare)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM4->CCR1 = Compare;
 80034fa:	4a04      	ldr	r2, [pc, #16]	@ (800350c <PWM4_SetCompare1+0x1c>)
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40000800 	.word	0x40000800

08003510 <Serial_Init>:
  * 函    数：串口初始化
  * 参    数：无
  * 返 回 值：无
  */
void Serial_Init(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0

	//開啟USART1、GPIOA時鐘
	RCC->APB2ENR |= 1 << 4;
 8003514:	4b48      	ldr	r3, [pc, #288]	@ (8003638 <Serial_Init+0x128>)
 8003516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003518:	4a47      	ldr	r2, [pc, #284]	@ (8003638 <Serial_Init+0x128>)
 800351a:	f043 0310 	orr.w	r3, r3, #16
 800351e:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= 1 << 0;
 8003520:	4b45      	ldr	r3, [pc, #276]	@ (8003638 <Serial_Init+0x128>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003524:	4a44      	ldr	r2, [pc, #272]	@ (8003638 <Serial_Init+0x128>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6313      	str	r3, [r2, #48]	@ 0x30
	

	//PA9為TX復用輸出、PA10為RX上拉輸入
	GPIOA->AFR[1] &= ~(0xF << 4);  // 清除 AFRH9（PA9）
 800352c:	4b43      	ldr	r3, [pc, #268]	@ (800363c <Serial_Init+0x12c>)
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	4a42      	ldr	r2, [pc, #264]	@ (800363c <Serial_Init+0x12c>)
 8003532:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003536:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (7 << 4);    // AF7 = USART1_TX
 8003538:	4b40      	ldr	r3, [pc, #256]	@ (800363c <Serial_Init+0x12c>)
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	4a3f      	ldr	r2, [pc, #252]	@ (800363c <Serial_Init+0x12c>)
 800353e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003542:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(0xF << 8);  // 清除 AFRH10（PA10）
 8003544:	4b3d      	ldr	r3, [pc, #244]	@ (800363c <Serial_Init+0x12c>)
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	4a3c      	ldr	r2, [pc, #240]	@ (800363c <Serial_Init+0x12c>)
 800354a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800354e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (7 << 8);    // AF7 = USART1_RX
 8003550:	4b3a      	ldr	r3, [pc, #232]	@ (800363c <Serial_Init+0x12c>)
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	4a39      	ldr	r2, [pc, #228]	@ (800363c <Serial_Init+0x12c>)
 8003556:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800355a:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOA->MODER &= ~(3 << 18);  // 清 PA9 模式位
 800355c:	4b37      	ldr	r3, [pc, #220]	@ (800363c <Serial_Init+0x12c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a36      	ldr	r2, [pc, #216]	@ (800363c <Serial_Init+0x12c>)
 8003562:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8003566:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 18;
 8003568:	4b34      	ldr	r3, [pc, #208]	@ (800363c <Serial_Init+0x12c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a33      	ldr	r2, [pc, #204]	@ (800363c <Serial_Init+0x12c>)
 800356e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003572:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 9);
 8003574:	4b31      	ldr	r3, [pc, #196]	@ (800363c <Serial_Init+0x12c>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a30      	ldr	r2, [pc, #192]	@ (800363c <Serial_Init+0x12c>)
 800357a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800357e:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 18;
 8003580:	4b2e      	ldr	r3, [pc, #184]	@ (800363c <Serial_Init+0x12c>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a2d      	ldr	r2, [pc, #180]	@ (800363c <Serial_Init+0x12c>)
 8003586:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800358a:	6093      	str	r3, [r2, #8]
	
	GPIOA->MODER &= ~(3 << 20);  // PA10 模式為輸入或 AF
 800358c:	4b2b      	ldr	r3, [pc, #172]	@ (800363c <Serial_Init+0x12c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a2a      	ldr	r2, [pc, #168]	@ (800363c <Serial_Init+0x12c>)
 8003592:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003596:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (2 << 20);  // 設為 AF 模式
 8003598:	4b28      	ldr	r3, [pc, #160]	@ (800363c <Serial_Init+0x12c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a27      	ldr	r2, [pc, #156]	@ (800363c <Serial_Init+0x12c>)
 800359e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035a2:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3 << 20);
 80035a4:	4b25      	ldr	r3, [pc, #148]	@ (800363c <Serial_Init+0x12c>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a24      	ldr	r2, [pc, #144]	@ (800363c <Serial_Init+0x12c>)
 80035aa:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80035ae:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (1 << 20);  // 上拉
 80035b0:	4b22      	ldr	r3, [pc, #136]	@ (800363c <Serial_Init+0x12c>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a21      	ldr	r2, [pc, #132]	@ (800363c <Serial_Init+0x12c>)
 80035b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ba:	60d3      	str	r3, [r2, #12]



	//設置字長(8位元)、校驗(不使用)、發送始能、接收始能
	USART1->CR1 &= ~(1 << 12);
 80035bc:	4b20      	ldr	r3, [pc, #128]	@ (8003640 <Serial_Init+0x130>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003640 <Serial_Init+0x130>)
 80035c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035c6:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1 << 10);
 80035c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003640 <Serial_Init+0x130>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003640 <Serial_Init+0x130>)
 80035ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035d2:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= 1 << 3;
 80035d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003640 <Serial_Init+0x130>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4a19      	ldr	r2, [pc, #100]	@ (8003640 <Serial_Init+0x130>)
 80035da:	f043 0308 	orr.w	r3, r3, #8
 80035de:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= 1 << 2;
 80035e0:	4b17      	ldr	r3, [pc, #92]	@ (8003640 <Serial_Init+0x130>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a16      	ldr	r2, [pc, #88]	@ (8003640 <Serial_Init+0x130>)
 80035e6:	f043 0304 	orr.w	r3, r3, #4
 80035ea:	60d3      	str	r3, [r2, #12]

	//設置停止位(1bit)
	USART1->CR2 &= ~(3 << 12);
 80035ec:	4b14      	ldr	r3, [pc, #80]	@ (8003640 <Serial_Init+0x130>)
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	4a13      	ldr	r2, [pc, #76]	@ (8003640 <Serial_Init+0x130>)
 80035f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035f6:	6113      	str	r3, [r2, #16]

	//設置硬體流控(不用)
	USART1->CR3 &= ~(7 << 8);
 80035f8:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <Serial_Init+0x130>)
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	4a10      	ldr	r2, [pc, #64]	@ (8003640 <Serial_Init+0x130>)
 80035fe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003602:	6153      	str	r3, [r2, #20]

	//設定波特律(115200*10)
	USART1->BRR = (4 << 4) | (9 & 0xF);
 8003604:	4b0e      	ldr	r3, [pc, #56]	@ (8003640 <Serial_Init+0x130>)
 8003606:	2249      	movs	r2, #73	@ 0x49
 8003608:	609a      	str	r2, [r3, #8]


	//設置當RXNE為1時，產生USART1中斷
	USART1->CR1 |= 1 << 5;
 800360a:	4b0d      	ldr	r3, [pc, #52]	@ (8003640 <Serial_Init+0x130>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	4a0c      	ldr	r2, [pc, #48]	@ (8003640 <Serial_Init+0x130>)
 8003610:	f043 0320 	orr.w	r3, r3, #32
 8003614:	60d3      	str	r3, [r2, #12]

	//設置USART始能
	USART1->CR1 |= 1 << 13;
 8003616:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <Serial_Init+0x130>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	4a09      	ldr	r2, [pc, #36]	@ (8003640 <Serial_Init+0x130>)
 800361c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003620:	60d3      	str	r3, [r2, #12]

	//設置NVIC打開USART1的IRQHandler
	NVIC->ISER[1] |= 1 << 5;  //位置在37
 8003622:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <Serial_Init+0x134>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4a07      	ldr	r2, [pc, #28]	@ (8003644 <Serial_Init+0x134>)
 8003628:	f043 0320 	orr.w	r3, r3, #32
 800362c:	6053      	str	r3, [r2, #4]
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40023800 	.word	0x40023800
 800363c:	40020000 	.word	0x40020000
 8003640:	40011000 	.word	0x40011000
 8003644:	e000e100 	.word	0xe000e100

08003648 <Serial_SendByte>:
  * 函    数：串口发送一个字节
  * 参    数：Byte 要发送的一个字节
  * 返 回 值：无
  */
void Serial_SendByte(uint8_t Byte)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
	//將字節寫入TDR
	USART1->DR = Byte & (uint16_t)0x1FF;
 8003652:	4a08      	ldr	r2, [pc, #32]	@ (8003674 <Serial_SendByte+0x2c>)
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	6053      	str	r3, [r2, #4]
	//判斷TDR是否為空，若空了代表已經送到移位暫存器內，會被設置成1
	while( ( USART1->SR & (1 << 7) ) == 0);
 8003658:	bf00      	nop
 800365a:	4b06      	ldr	r3, [pc, #24]	@ (8003674 <Serial_SendByte+0x2c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f9      	beq.n	800365a <Serial_SendByte+0x12>
}
 8003666:	bf00      	nop
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40011000 	.word	0x40011000

08003678 <USART1_IRQHandler>:
  * 注意事项：此函数为中断函数，无需调用，中断触发后自动执行
  *           函数名为预留的指定名称，可以从启动文件复制
  *           请确保函数名正确，不能有任何差异，否则中断函数将不能进入
  */
void USART1_IRQHandler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
	static uint8_t RxState = 0;		//定义表示当前状态机状态的静态变量
	static uint8_t Data_L,Data_H;

	if ( USART1->SR & (1 << 5) ) 		//判断是否是USART1的接收事件触发的中断
 800367e:	4b5b      	ldr	r3, [pc, #364]	@ (80037ec <USART1_IRQHandler+0x174>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80aa 	beq.w	80037e0 <USART1_IRQHandler+0x168>
	{
		uint8_t RxData = USART1->DR;				//读取数据寄存器，存放在接收的数据变量
 800368c:	4b57      	ldr	r3, [pc, #348]	@ (80037ec <USART1_IRQHandler+0x174>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	71fb      	strb	r3, [r7, #7]

		/*使用状态机*/

		//Start
		if (RxState == 0)
 8003692:	4b57      	ldr	r3, [pc, #348]	@ (80037f0 <USART1_IRQHandler+0x178>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <USART1_IRQHandler+0x32>
		{
			if (RxData == 0xFF)			//如果数据确实是包头
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	2bff      	cmp	r3, #255	@ 0xff
 800369e:	f040 8099 	bne.w	80037d4 <USART1_IRQHandler+0x15c>
			{
				RxState = 1;			//置下一个状态
 80036a2:	4b53      	ldr	r3, [pc, #332]	@ (80037f0 <USART1_IRQHandler+0x178>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e094      	b.n	80037d4 <USART1_IRQHandler+0x15c>
			}
		}

		//1st
		else if(RxState == 1)
 80036aa:	4b51      	ldr	r3, [pc, #324]	@ (80037f0 <USART1_IRQHandler+0x178>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d106      	bne.n	80036c0 <USART1_IRQHandler+0x48>
		{
			Data_L = RxData;
 80036b2:	4a50      	ldr	r2, [pc, #320]	@ (80037f4 <USART1_IRQHandler+0x17c>)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	7013      	strb	r3, [r2, #0]
			RxState = 2;
 80036b8:	4b4d      	ldr	r3, [pc, #308]	@ (80037f0 <USART1_IRQHandler+0x178>)
 80036ba:	2202      	movs	r2, #2
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e089      	b.n	80037d4 <USART1_IRQHandler+0x15c>
		}
		else if(RxState == 2)
 80036c0:	4b4b      	ldr	r3, [pc, #300]	@ (80037f0 <USART1_IRQHandler+0x178>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d112      	bne.n	80036ee <USART1_IRQHandler+0x76>
		{
			Data_H = RxData;
 80036c8:	4a4b      	ldr	r2, [pc, #300]	@ (80037f8 <USART1_IRQHandler+0x180>)
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[0] = (Data_H << 8) | Data_L;
 80036ce:	4b4a      	ldr	r3, [pc, #296]	@ (80037f8 <USART1_IRQHandler+0x180>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	b21a      	sxth	r2, r3
 80036d6:	4b47      	ldr	r3, [pc, #284]	@ (80037f4 <USART1_IRQHandler+0x17c>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	b21b      	sxth	r3, r3
 80036dc:	4313      	orrs	r3, r2
 80036de:	b21b      	sxth	r3, r3
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	4b46      	ldr	r3, [pc, #280]	@ (80037fc <USART1_IRQHandler+0x184>)
 80036e4:	801a      	strh	r2, [r3, #0]
			RxState = 3;
 80036e6:	4b42      	ldr	r3, [pc, #264]	@ (80037f0 <USART1_IRQHandler+0x178>)
 80036e8:	2203      	movs	r2, #3
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e072      	b.n	80037d4 <USART1_IRQHandler+0x15c>
		}
		//2nd
		else if(RxState == 3)
 80036ee:	4b40      	ldr	r3, [pc, #256]	@ (80037f0 <USART1_IRQHandler+0x178>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d106      	bne.n	8003704 <USART1_IRQHandler+0x8c>
		{
			Data_L = RxData;
 80036f6:	4a3f      	ldr	r2, [pc, #252]	@ (80037f4 <USART1_IRQHandler+0x17c>)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	7013      	strb	r3, [r2, #0]
			RxState = 4;
 80036fc:	4b3c      	ldr	r3, [pc, #240]	@ (80037f0 <USART1_IRQHandler+0x178>)
 80036fe:	2204      	movs	r2, #4
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	e067      	b.n	80037d4 <USART1_IRQHandler+0x15c>
		}
		else if(RxState == 4)
 8003704:	4b3a      	ldr	r3, [pc, #232]	@ (80037f0 <USART1_IRQHandler+0x178>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d112      	bne.n	8003732 <USART1_IRQHandler+0xba>
		{
			Data_H = RxData;
 800370c:	4a3a      	ldr	r2, [pc, #232]	@ (80037f8 <USART1_IRQHandler+0x180>)
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[1] = (Data_H << 8) | Data_L;
 8003712:	4b39      	ldr	r3, [pc, #228]	@ (80037f8 <USART1_IRQHandler+0x180>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	b21a      	sxth	r2, r3
 800371a:	4b36      	ldr	r3, [pc, #216]	@ (80037f4 <USART1_IRQHandler+0x17c>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	b21b      	sxth	r3, r3
 8003720:	4313      	orrs	r3, r2
 8003722:	b21b      	sxth	r3, r3
 8003724:	b29a      	uxth	r2, r3
 8003726:	4b35      	ldr	r3, [pc, #212]	@ (80037fc <USART1_IRQHandler+0x184>)
 8003728:	805a      	strh	r2, [r3, #2]
			RxState = 5;
 800372a:	4b31      	ldr	r3, [pc, #196]	@ (80037f0 <USART1_IRQHandler+0x178>)
 800372c:	2205      	movs	r2, #5
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e050      	b.n	80037d4 <USART1_IRQHandler+0x15c>
		}
		//3rd
		else if(RxState == 5)
 8003732:	4b2f      	ldr	r3, [pc, #188]	@ (80037f0 <USART1_IRQHandler+0x178>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b05      	cmp	r3, #5
 8003738:	d106      	bne.n	8003748 <USART1_IRQHandler+0xd0>
		{
			Data_L = RxData;
 800373a:	4a2e      	ldr	r2, [pc, #184]	@ (80037f4 <USART1_IRQHandler+0x17c>)
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	7013      	strb	r3, [r2, #0]
			RxState = 6;
 8003740:	4b2b      	ldr	r3, [pc, #172]	@ (80037f0 <USART1_IRQHandler+0x178>)
 8003742:	2206      	movs	r2, #6
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	e045      	b.n	80037d4 <USART1_IRQHandler+0x15c>
		}
		else if(RxState == 6)
 8003748:	4b29      	ldr	r3, [pc, #164]	@ (80037f0 <USART1_IRQHandler+0x178>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b06      	cmp	r3, #6
 800374e:	d112      	bne.n	8003776 <USART1_IRQHandler+0xfe>
		{
			Data_H = RxData;
 8003750:	4a29      	ldr	r2, [pc, #164]	@ (80037f8 <USART1_IRQHandler+0x180>)
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[2] = (Data_H << 8) | Data_L;
 8003756:	4b28      	ldr	r3, [pc, #160]	@ (80037f8 <USART1_IRQHandler+0x180>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	b21a      	sxth	r2, r3
 800375e:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <USART1_IRQHandler+0x17c>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b21b      	sxth	r3, r3
 8003764:	4313      	orrs	r3, r2
 8003766:	b21b      	sxth	r3, r3
 8003768:	b29a      	uxth	r2, r3
 800376a:	4b24      	ldr	r3, [pc, #144]	@ (80037fc <USART1_IRQHandler+0x184>)
 800376c:	809a      	strh	r2, [r3, #4]
			RxState = 7;
 800376e:	4b20      	ldr	r3, [pc, #128]	@ (80037f0 <USART1_IRQHandler+0x178>)
 8003770:	2207      	movs	r2, #7
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e02e      	b.n	80037d4 <USART1_IRQHandler+0x15c>
		}
		//4th
		else if(RxState == 7)
 8003776:	4b1e      	ldr	r3, [pc, #120]	@ (80037f0 <USART1_IRQHandler+0x178>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b07      	cmp	r3, #7
 800377c:	d106      	bne.n	800378c <USART1_IRQHandler+0x114>
		{
			Data_L = RxData;
 800377e:	4a1d      	ldr	r2, [pc, #116]	@ (80037f4 <USART1_IRQHandler+0x17c>)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	7013      	strb	r3, [r2, #0]
			RxState = 8;
 8003784:	4b1a      	ldr	r3, [pc, #104]	@ (80037f0 <USART1_IRQHandler+0x178>)
 8003786:	2208      	movs	r2, #8
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	e023      	b.n	80037d4 <USART1_IRQHandler+0x15c>
		}
		else if(RxState == 8)
 800378c:	4b18      	ldr	r3, [pc, #96]	@ (80037f0 <USART1_IRQHandler+0x178>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d112      	bne.n	80037ba <USART1_IRQHandler+0x142>
		{
			Data_H = RxData;
 8003794:	4a18      	ldr	r2, [pc, #96]	@ (80037f8 <USART1_IRQHandler+0x180>)
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[3] = (Data_H << 8) | Data_L;
 800379a:	4b17      	ldr	r3, [pc, #92]	@ (80037f8 <USART1_IRQHandler+0x180>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	b21a      	sxth	r2, r3
 80037a2:	4b14      	ldr	r3, [pc, #80]	@ (80037f4 <USART1_IRQHandler+0x17c>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b21b      	sxth	r3, r3
 80037a8:	4313      	orrs	r3, r2
 80037aa:	b21b      	sxth	r3, r3
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <USART1_IRQHandler+0x184>)
 80037b0:	80da      	strh	r2, [r3, #6]
			RxState = 9;
 80037b2:	4b0f      	ldr	r3, [pc, #60]	@ (80037f0 <USART1_IRQHandler+0x178>)
 80037b4:	2209      	movs	r2, #9
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e00c      	b.n	80037d4 <USART1_IRQHandler+0x15c>
		}

		//end
		else if (RxState == 9)
 80037ba:	4b0d      	ldr	r3, [pc, #52]	@ (80037f0 <USART1_IRQHandler+0x178>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b09      	cmp	r3, #9
 80037c0:	d108      	bne.n	80037d4 <USART1_IRQHandler+0x15c>
		{
			if (RxData == 0xFE)			//如果数据确实是包尾部
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2bfe      	cmp	r3, #254	@ 0xfe
 80037c6:	d105      	bne.n	80037d4 <USART1_IRQHandler+0x15c>
			{
				RxState = 0;			//状态归0
 80037c8:	4b09      	ldr	r3, [pc, #36]	@ (80037f0 <USART1_IRQHandler+0x178>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
				Serial_RxFlag = 1;		//接收数据包标志位置1，成功接收一个数据包
 80037ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <USART1_IRQHandler+0x188>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
			}
		}
		USART1->SR &= ~(1 << 5);
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <USART1_IRQHandler+0x174>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a04      	ldr	r2, [pc, #16]	@ (80037ec <USART1_IRQHandler+0x174>)
 80037da:	f023 0320 	bic.w	r3, r3, #32
 80037de:	6013      	str	r3, [r2, #0]
	}
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40011000 	.word	0x40011000
 80037f0:	20000200 	.word	0x20000200
 80037f4:	20000201 	.word	0x20000201
 80037f8:	20000202 	.word	0x20000202
 80037fc:	200001f8 	.word	0x200001f8
 8003800:	200001f6 	.word	0x200001f6

08003804 <JoinStick_Init>:

uint16_t JoinStick[3];
uint8_t  JoinStickFlag;

void JoinStick_Init(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0

	//開啟USART2、GPIOA時鐘
	RCC->APB1ENR |= 1 << 18;
 8003808:	4b54      	ldr	r3, [pc, #336]	@ (800395c <JoinStick_Init+0x158>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	4a53      	ldr	r2, [pc, #332]	@ (800395c <JoinStick_Init+0x158>)
 800380e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003812:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= 1 << 2;
 8003814:	4b51      	ldr	r3, [pc, #324]	@ (800395c <JoinStick_Init+0x158>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	4a50      	ldr	r2, [pc, #320]	@ (800395c <JoinStick_Init+0x158>)
 800381a:	f043 0304 	orr.w	r3, r3, #4
 800381e:	6313      	str	r3, [r2, #48]	@ 0x30

	//TX
	GPIOC->MODER &= ~(3 << 20);  // 清 PA2 模式位
 8003820:	4b4f      	ldr	r3, [pc, #316]	@ (8003960 <JoinStick_Init+0x15c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a4e      	ldr	r2, [pc, #312]	@ (8003960 <JoinStick_Init+0x15c>)
 8003826:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800382a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  |=  2 << 20;
 800382c:	4b4c      	ldr	r3, [pc, #304]	@ (8003960 <JoinStick_Init+0x15c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4b      	ldr	r2, [pc, #300]	@ (8003960 <JoinStick_Init+0x15c>)
 8003832:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003836:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &=~(1 << 10);
 8003838:	4b49      	ldr	r3, [pc, #292]	@ (8003960 <JoinStick_Init+0x15c>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a48      	ldr	r2, [pc, #288]	@ (8003960 <JoinStick_Init+0x15c>)
 800383e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003842:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR|=  3 << 20;
 8003844:	4b46      	ldr	r3, [pc, #280]	@ (8003960 <JoinStick_Init+0x15c>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a45      	ldr	r2, [pc, #276]	@ (8003960 <JoinStick_Init+0x15c>)
 800384a:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800384e:	6093      	str	r3, [r2, #8]

	//RX
	GPIOC->MODER &= ~(3 << 22);  // PA3 模式為輸入或 AF
 8003850:	4b43      	ldr	r3, [pc, #268]	@ (8003960 <JoinStick_Init+0x15c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a42      	ldr	r2, [pc, #264]	@ (8003960 <JoinStick_Init+0x15c>)
 8003856:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800385a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (2 << 22);  // 設為 AF 模式
 800385c:	4b40      	ldr	r3, [pc, #256]	@ (8003960 <JoinStick_Init+0x15c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3f      	ldr	r2, [pc, #252]	@ (8003960 <JoinStick_Init+0x15c>)
 8003862:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003866:	6013      	str	r3, [r2, #0]
	GPIOC->OSPEEDR|=  1 << 22;
 8003868:	4b3d      	ldr	r3, [pc, #244]	@ (8003960 <JoinStick_Init+0x15c>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a3c      	ldr	r2, [pc, #240]	@ (8003960 <JoinStick_Init+0x15c>)
 800386e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003872:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~(3 << 22);
 8003874:	4b3a      	ldr	r3, [pc, #232]	@ (8003960 <JoinStick_Init+0x15c>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4a39      	ldr	r2, [pc, #228]	@ (8003960 <JoinStick_Init+0x15c>)
 800387a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800387e:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (1 << 22);  // 上拉
 8003880:	4b37      	ldr	r3, [pc, #220]	@ (8003960 <JoinStick_Init+0x15c>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a36      	ldr	r2, [pc, #216]	@ (8003960 <JoinStick_Init+0x15c>)
 8003886:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800388a:	60d3      	str	r3, [r2, #12]

	//PA2為TX復用輸出、PA3為RX上拉輸入
	GPIOC->AFR[1] &= ~(0xF << 8);  // 清除 AFRH9（PA2）
 800388c:	4b34      	ldr	r3, [pc, #208]	@ (8003960 <JoinStick_Init+0x15c>)
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	4a33      	ldr	r2, [pc, #204]	@ (8003960 <JoinStick_Init+0x15c>)
 8003892:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003896:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] |=  (7 << 8);    // AF7 = USART2_TX
 8003898:	4b31      	ldr	r3, [pc, #196]	@ (8003960 <JoinStick_Init+0x15c>)
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	4a30      	ldr	r2, [pc, #192]	@ (8003960 <JoinStick_Init+0x15c>)
 800389e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038a2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] &= ~(0xF << 12);  // 清除 AFRH10（PA2）
 80038a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003960 <JoinStick_Init+0x15c>)
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003960 <JoinStick_Init+0x15c>)
 80038aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038ae:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] |=  (7 << 12);    // AF7 = USART2_RX
 80038b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003960 <JoinStick_Init+0x15c>)
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003960 <JoinStick_Init+0x15c>)
 80038b6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80038ba:	6253      	str	r3, [r2, #36]	@ 0x24

//	//設置波特率(9600)
	USART3->BRR  =  (273 << 4) | (0xD << 0);
 80038bc:	4b29      	ldr	r3, [pc, #164]	@ (8003964 <JoinStick_Init+0x160>)
 80038be:	f241 121d 	movw	r2, #4381	@ 0x111d
 80038c2:	609a      	str	r2, [r3, #8]
	USART3->CR1 &= ~(1 << 15);
 80038c4:	4b27      	ldr	r3, [pc, #156]	@ (8003964 <JoinStick_Init+0x160>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4a26      	ldr	r2, [pc, #152]	@ (8003964 <JoinStick_Init+0x160>)
 80038ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038ce:	60d3      	str	r3, [r2, #12]

//	//設置波特率(115200)
	USART3->BRR  =  (22 << 4) | (7 << 0);
 80038d0:	4b24      	ldr	r3, [pc, #144]	@ (8003964 <JoinStick_Init+0x160>)
 80038d2:	f240 1267 	movw	r2, #359	@ 0x167
 80038d6:	609a      	str	r2, [r3, #8]
	USART3->CR1 &= ~(1 << 15);
 80038d8:	4b22      	ldr	r3, [pc, #136]	@ (8003964 <JoinStick_Init+0x160>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a21      	ldr	r2, [pc, #132]	@ (8003964 <JoinStick_Init+0x160>)
 80038de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80038e2:	60d3      	str	r3, [r2, #12]

	//設置字長(8位元)、校驗(不使用)、發送始能、接收始能
	USART3->CR1 &= ~(1 << 12);
 80038e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003964 <JoinStick_Init+0x160>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003964 <JoinStick_Init+0x160>)
 80038ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038ee:	60d3      	str	r3, [r2, #12]
	USART3->CR1 &= ~(1 << 10);
 80038f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003964 <JoinStick_Init+0x160>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003964 <JoinStick_Init+0x160>)
 80038f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038fa:	60d3      	str	r3, [r2, #12]
	USART3->CR1 |= 1 << 3;
 80038fc:	4b19      	ldr	r3, [pc, #100]	@ (8003964 <JoinStick_Init+0x160>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	4a18      	ldr	r2, [pc, #96]	@ (8003964 <JoinStick_Init+0x160>)
 8003902:	f043 0308 	orr.w	r3, r3, #8
 8003906:	60d3      	str	r3, [r2, #12]
	USART3->CR1 |= 1 << 2;
 8003908:	4b16      	ldr	r3, [pc, #88]	@ (8003964 <JoinStick_Init+0x160>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a15      	ldr	r2, [pc, #84]	@ (8003964 <JoinStick_Init+0x160>)
 800390e:	f043 0304 	orr.w	r3, r3, #4
 8003912:	60d3      	str	r3, [r2, #12]

	//設置停止位(1bit)
	USART3->CR2 &= ~(3 << 12);
 8003914:	4b13      	ldr	r3, [pc, #76]	@ (8003964 <JoinStick_Init+0x160>)
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	4a12      	ldr	r2, [pc, #72]	@ (8003964 <JoinStick_Init+0x160>)
 800391a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800391e:	6113      	str	r3, [r2, #16]

	//設置硬體流控(不用)
	USART3->CR3 &= ~(7 << 8);
 8003920:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <JoinStick_Init+0x160>)
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	4a0f      	ldr	r2, [pc, #60]	@ (8003964 <JoinStick_Init+0x160>)
 8003926:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800392a:	6153      	str	r3, [r2, #20]


	//設置當RXNE為1時，產生USART1中斷
	USART3->CR1 |= 1 << 5;
 800392c:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <JoinStick_Init+0x160>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a0c      	ldr	r2, [pc, #48]	@ (8003964 <JoinStick_Init+0x160>)
 8003932:	f043 0320 	orr.w	r3, r3, #32
 8003936:	60d3      	str	r3, [r2, #12]

	//設置USART始能
	USART3->CR1 |= 1 << 13;
 8003938:	4b0a      	ldr	r3, [pc, #40]	@ (8003964 <JoinStick_Init+0x160>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4a09      	ldr	r2, [pc, #36]	@ (8003964 <JoinStick_Init+0x160>)
 800393e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003942:	60d3      	str	r3, [r2, #12]

	//設置NVIC打開USART2的IRQHandler
	NVIC->ISER[1] |= 1 << 7;  //位置在38
 8003944:	4b08      	ldr	r3, [pc, #32]	@ (8003968 <JoinStick_Init+0x164>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a07      	ldr	r2, [pc, #28]	@ (8003968 <JoinStick_Init+0x164>)
 800394a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800394e:	6053      	str	r3, [r2, #4]
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	40020800 	.word	0x40020800
 8003964:	40004800 	.word	0x40004800
 8003968:	e000e100 	.word	0xe000e100

0800396c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
	static uint8_t RxState = 0;		//定义表示当前状态机状态的静态变量
	static uint8_t Data_L,Data_H;

	if ( USART3->SR & (1 << 5) ) 		//判断是否是USART1的接收事件触发的中断
 8003972:	4b4a      	ldr	r3, [pc, #296]	@ (8003a9c <USART3_IRQHandler+0x130>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 8087 	beq.w	8003a8e <USART3_IRQHandler+0x122>
	{
		uint8_t RxData = USART3->DR;				//读取数据寄存器，存放在接收的数据变量
 8003980:	4b46      	ldr	r3, [pc, #280]	@ (8003a9c <USART3_IRQHandler+0x130>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	71fb      	strb	r3, [r7, #7]

		/*使用状态机*/

		//Start
		if (RxState == 0)
 8003986:	4b46      	ldr	r3, [pc, #280]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <USART3_IRQHandler+0x30>
		{
			if (RxData == 0xFF)			//如果数据确实是包头
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	2bff      	cmp	r3, #255	@ 0xff
 8003992:	d176      	bne.n	8003a82 <USART3_IRQHandler+0x116>
			{
				RxState = 1;			//置下一个状态
 8003994:	4b42      	ldr	r3, [pc, #264]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e072      	b.n	8003a82 <USART3_IRQHandler+0x116>
			}
		}

		//1st
		else if(RxState == 1)
 800399c:	4b40      	ldr	r3, [pc, #256]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d106      	bne.n	80039b2 <USART3_IRQHandler+0x46>
		{
			Data_L = RxData;
 80039a4:	4a3f      	ldr	r2, [pc, #252]	@ (8003aa4 <USART3_IRQHandler+0x138>)
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	7013      	strb	r3, [r2, #0]
			RxState = 2;
 80039aa:	4b3d      	ldr	r3, [pc, #244]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 80039ac:	2202      	movs	r2, #2
 80039ae:	701a      	strb	r2, [r3, #0]
 80039b0:	e067      	b.n	8003a82 <USART3_IRQHandler+0x116>
		}
		else if(RxState == 2)
 80039b2:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d112      	bne.n	80039e0 <USART3_IRQHandler+0x74>
		{
			Data_H = RxData;
 80039ba:	4a3b      	ldr	r2, [pc, #236]	@ (8003aa8 <USART3_IRQHandler+0x13c>)
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	7013      	strb	r3, [r2, #0]
			JoinStick[0] = (Data_H << 8) | Data_L;
 80039c0:	4b39      	ldr	r3, [pc, #228]	@ (8003aa8 <USART3_IRQHandler+0x13c>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	b21a      	sxth	r2, r3
 80039c8:	4b36      	ldr	r3, [pc, #216]	@ (8003aa4 <USART3_IRQHandler+0x138>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	b21b      	sxth	r3, r3
 80039ce:	4313      	orrs	r3, r2
 80039d0:	b21b      	sxth	r3, r3
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	4b35      	ldr	r3, [pc, #212]	@ (8003aac <USART3_IRQHandler+0x140>)
 80039d6:	801a      	strh	r2, [r3, #0]
			RxState = 3;
 80039d8:	4b31      	ldr	r3, [pc, #196]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 80039da:	2203      	movs	r2, #3
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	e050      	b.n	8003a82 <USART3_IRQHandler+0x116>
		}
		//2nd
		else if(RxState == 3)
 80039e0:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d106      	bne.n	80039f6 <USART3_IRQHandler+0x8a>
		{
			Data_L = RxData;
 80039e8:	4a2e      	ldr	r2, [pc, #184]	@ (8003aa4 <USART3_IRQHandler+0x138>)
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	7013      	strb	r3, [r2, #0]
			RxState = 4;
 80039ee:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 80039f0:	2204      	movs	r2, #4
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e045      	b.n	8003a82 <USART3_IRQHandler+0x116>
		}
		else if(RxState == 4)
 80039f6:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d112      	bne.n	8003a24 <USART3_IRQHandler+0xb8>
		{
			Data_H = RxData;
 80039fe:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa8 <USART3_IRQHandler+0x13c>)
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	7013      	strb	r3, [r2, #0]
			JoinStick[1] = (Data_H << 8) | Data_L;
 8003a04:	4b28      	ldr	r3, [pc, #160]	@ (8003aa8 <USART3_IRQHandler+0x13c>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	b21a      	sxth	r2, r3
 8003a0c:	4b25      	ldr	r3, [pc, #148]	@ (8003aa4 <USART3_IRQHandler+0x138>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	b21b      	sxth	r3, r3
 8003a12:	4313      	orrs	r3, r2
 8003a14:	b21b      	sxth	r3, r3
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	4b24      	ldr	r3, [pc, #144]	@ (8003aac <USART3_IRQHandler+0x140>)
 8003a1a:	805a      	strh	r2, [r3, #2]
			RxState = 5;
 8003a1c:	4b20      	ldr	r3, [pc, #128]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 8003a1e:	2205      	movs	r2, #5
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e02e      	b.n	8003a82 <USART3_IRQHandler+0x116>
		}
		//3rd
		else if(RxState == 5)
 8003a24:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d106      	bne.n	8003a3a <USART3_IRQHandler+0xce>
		{
			Data_L = RxData;
 8003a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa4 <USART3_IRQHandler+0x138>)
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	7013      	strb	r3, [r2, #0]
			RxState = 6;
 8003a32:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 8003a34:	2206      	movs	r2, #6
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e023      	b.n	8003a82 <USART3_IRQHandler+0x116>
		}
		else if(RxState == 6)
 8003a3a:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d112      	bne.n	8003a68 <USART3_IRQHandler+0xfc>
		{
			Data_H = RxData;
 8003a42:	4a19      	ldr	r2, [pc, #100]	@ (8003aa8 <USART3_IRQHandler+0x13c>)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	7013      	strb	r3, [r2, #0]
			JoinStick[2] = (Data_H << 8) | Data_L;
 8003a48:	4b17      	ldr	r3, [pc, #92]	@ (8003aa8 <USART3_IRQHandler+0x13c>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	b21a      	sxth	r2, r3
 8003a50:	4b14      	ldr	r3, [pc, #80]	@ (8003aa4 <USART3_IRQHandler+0x138>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b21b      	sxth	r3, r3
 8003a56:	4313      	orrs	r3, r2
 8003a58:	b21b      	sxth	r3, r3
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <USART3_IRQHandler+0x140>)
 8003a5e:	809a      	strh	r2, [r3, #4]
			RxState = 7;
 8003a60:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 8003a62:	2207      	movs	r2, #7
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e00c      	b.n	8003a82 <USART3_IRQHandler+0x116>
		}

		//end
		else if (RxState == 7)
 8003a68:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b07      	cmp	r3, #7
 8003a6e:	d108      	bne.n	8003a82 <USART3_IRQHandler+0x116>
		{
			if (RxData == 0xFE)			//如果数据确实是包尾部
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	2bfe      	cmp	r3, #254	@ 0xfe
 8003a74:	d105      	bne.n	8003a82 <USART3_IRQHandler+0x116>
			{
				RxState = 0;			//状态归0
 8003a76:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa0 <USART3_IRQHandler+0x134>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
				JoinStickFlag = 1;		//接收数据包标志位置1，成功接收一个数据包
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab0 <USART3_IRQHandler+0x144>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
			}
		}
		USART3->SR &= ~(1 << 5);
 8003a82:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <USART3_IRQHandler+0x130>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a05      	ldr	r2, [pc, #20]	@ (8003a9c <USART3_IRQHandler+0x130>)
 8003a88:	f023 0320 	bic.w	r3, r3, #32
 8003a8c:	6013      	str	r3, [r2, #0]
	}
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40004800 	.word	0x40004800
 8003aa0:	2000020b 	.word	0x2000020b
 8003aa4:	2000020c 	.word	0x2000020c
 8003aa8:	2000020d 	.word	0x2000020d
 8003aac:	20000204 	.word	0x20000204
 8003ab0:	2000020a 	.word	0x2000020a

08003ab4 <Timer_Init>:


//使用TIM12當作中斷來源
//中斷頻率5ms
void Timer_Init(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= 1 << 6;  //設定TIM12外設時鐘
 8003ab8:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <Timer_Init+0x6c>)
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	4a18      	ldr	r2, [pc, #96]	@ (8003b20 <Timer_Init+0x6c>)
 8003abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ac2:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM12->SMCR   |= 000 << 0;//設定為內部時鐘
 8003ac4:	4b17      	ldr	r3, [pc, #92]	@ (8003b24 <Timer_Init+0x70>)
 8003ac6:	4a17      	ldr	r2, [pc, #92]	@ (8003b24 <Timer_Init+0x70>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	6093      	str	r3, [r2, #8]

	TIM12->ARR     = 450-1; //設定產生中斷目標值
 8003acc:	4b15      	ldr	r3, [pc, #84]	@ (8003b24 <Timer_Init+0x70>)
 8003ace:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8003ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM12->PSC     = 1000-1;  //設定預分頻器
 8003ad4:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <Timer_Init+0x70>)
 8003ad6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ada:	629a      	str	r2, [r3, #40]	@ 0x28
	
	TIM12->CR1     = 1 << 7;  //設定ARPE，允許自動裝載
 8003adc:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <Timer_Init+0x70>)
 8003ade:	2280      	movs	r2, #128	@ 0x80
 8003ae0:	601a      	str	r2, [r3, #0]
	TIM12->CR1    |= 0 << 4;  //設定DIR，上數模式
 8003ae2:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <Timer_Init+0x70>)
 8003ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8003b24 <Timer_Init+0x70>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6013      	str	r3, [r2, #0]
	TIM12->CR1    |= 1 << 0;  //設定CEN，始能計數器
 8003aea:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <Timer_Init+0x70>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a0d      	ldr	r2, [pc, #52]	@ (8003b24 <Timer_Init+0x70>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	6013      	str	r3, [r2, #0]
	TIM12->EGR     = 1 << 0;  //設定UG，初始化計數器，並立刻產生中斷
 8003af6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <Timer_Init+0x70>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	615a      	str	r2, [r3, #20]
	TIM12->SR      = 0 << 0;  //設定UIF，清除中斷
 8003afc:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <Timer_Init+0x70>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	611a      	str	r2, [r3, #16]
	
	TIM12->DIER   |= 1 << 0 ; //設定UIE，允許更新中斷
 8003b02:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <Timer_Init+0x70>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4a07      	ldr	r2, [pc, #28]	@ (8003b24 <Timer_Init+0x70>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	60d3      	str	r3, [r2, #12]
	
	NVIC->ISER[1] = 1 << 11; //TIM12的中斷位置在43
 8003b0e:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <Timer_Init+0x74>)
 8003b10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b14:	605a      	str	r2, [r3, #4]
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40001800 	.word	0x40001800
 8003b28:	e000e100 	.word	0xe000e100

08003b2c <PID_Update>:



// PID 宏（改寫成浮點數邏輯）
float PID_Update(PIDController *v)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
    v->data.up = v->param.Kr * (v->term.Ref - v->term.Fbk);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	edd3 6a08 	vldr	s13, [r3, #32]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b46:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	edc3 7a00 	vstr	s15, [r3]
                                                                                      
    v->data.ui = v->param.Ki * (v->data.w1 * v->data.up) + v->data.i1;                    
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	edd3 6a07 	vldr	s13, [r3, #28]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	edc3 7a01 	vstr	s15, [r3, #4]
    v->data.i1 = v->data.ui;                                                            
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	619a      	str	r2, [r3, #24]
                                                                                      
    v->data.d2 = v->param.Kd * (v->data.up - v->data.d1);                                
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	edd3 6a00 	vldr	s13, [r3]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	edc3 7a05 	vstr	s15, [r3, #20]
    v->data.ud = v->term.c2 * v->data.ud + v->term.c1 * v->data.d2;                        
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8003bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	edc3 7a02 	vstr	s15, [r3, #8]
    v->data.d1 = v->data.up;                                                            
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]
                                                                                      
    v->data.v1 = v->param.Kp * (v->data.up + v->data.ui + v->data.ud);                     
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	edd3 6a00 	vldr	s13, [r3]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	edc3 7a03 	vstr	s15, [r3, #12]
    v->term.Out = fminf(fmaxf(v->data.v1, v->param.Umin), v->param.Umax);                 
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8003c0e:	eef0 0a47 	vmov.f32	s1, s14
 8003c12:	eeb0 0a67 	vmov.f32	s0, s15
 8003c16:	f000 f857 	bl	8003cc8 <fmaxf>
 8003c1a:	eeb0 7a40 	vmov.f32	s14, s0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8003c24:	eef0 0a67 	vmov.f32	s1, s15
 8003c28:	eeb0 0a47 	vmov.f32	s0, s14
 8003c2c:	f000 f869 	bl	8003d02 <fminf>
 8003c30:	eef0 7a40 	vmov.f32	s15, s0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    v->data.w1 = (v->term.Out == v->data.v1) ? 1 : 0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c46:	eeb4 7a67 	vcmp.f32	s14, s15
 8003c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4e:	d102      	bne.n	8003c56 <PID_Update+0x12a>
 8003c50:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003c54:	e001      	b.n	8003c5a <PID_Update+0x12e>
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	61da      	str	r2, [r3, #28]
	
	return v->term.Out;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c62:	ee07 3a90 	vmov	s15, r3
}
 8003c66:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <memset>:
 8003c70:	4402      	add	r2, r0
 8003c72:	4603      	mov	r3, r0
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d100      	bne.n	8003c7a <memset+0xa>
 8003c78:	4770      	bx	lr
 8003c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7e:	e7f9      	b.n	8003c74 <memset+0x4>

08003c80 <__libc_init_array>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	4d0d      	ldr	r5, [pc, #52]	@ (8003cb8 <__libc_init_array+0x38>)
 8003c84:	4c0d      	ldr	r4, [pc, #52]	@ (8003cbc <__libc_init_array+0x3c>)
 8003c86:	1b64      	subs	r4, r4, r5
 8003c88:	10a4      	asrs	r4, r4, #2
 8003c8a:	2600      	movs	r6, #0
 8003c8c:	42a6      	cmp	r6, r4
 8003c8e:	d109      	bne.n	8003ca4 <__libc_init_array+0x24>
 8003c90:	4d0b      	ldr	r5, [pc, #44]	@ (8003cc0 <__libc_init_array+0x40>)
 8003c92:	4c0c      	ldr	r4, [pc, #48]	@ (8003cc4 <__libc_init_array+0x44>)
 8003c94:	f000 f86e 	bl	8003d74 <_init>
 8003c98:	1b64      	subs	r4, r4, r5
 8003c9a:	10a4      	asrs	r4, r4, #2
 8003c9c:	2600      	movs	r6, #0
 8003c9e:	42a6      	cmp	r6, r4
 8003ca0:	d105      	bne.n	8003cae <__libc_init_array+0x2e>
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca8:	4798      	blx	r3
 8003caa:	3601      	adds	r6, #1
 8003cac:	e7ee      	b.n	8003c8c <__libc_init_array+0xc>
 8003cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb2:	4798      	blx	r3
 8003cb4:	3601      	adds	r6, #1
 8003cb6:	e7f2      	b.n	8003c9e <__libc_init_array+0x1e>
 8003cb8:	080043b4 	.word	0x080043b4
 8003cbc:	080043b4 	.word	0x080043b4
 8003cc0:	080043b4 	.word	0x080043b4
 8003cc4:	080043b8 	.word	0x080043b8

08003cc8 <fmaxf>:
 8003cc8:	b508      	push	{r3, lr}
 8003cca:	ed2d 8b02 	vpush	{d8}
 8003cce:	eeb0 8a40 	vmov.f32	s16, s0
 8003cd2:	eef0 8a60 	vmov.f32	s17, s1
 8003cd6:	f000 f831 	bl	8003d3c <__fpclassifyf>
 8003cda:	b930      	cbnz	r0, 8003cea <fmaxf+0x22>
 8003cdc:	eeb0 8a68 	vmov.f32	s16, s17
 8003ce0:	eeb0 0a48 	vmov.f32	s0, s16
 8003ce4:	ecbd 8b02 	vpop	{d8}
 8003ce8:	bd08      	pop	{r3, pc}
 8003cea:	eeb0 0a68 	vmov.f32	s0, s17
 8003cee:	f000 f825 	bl	8003d3c <__fpclassifyf>
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d0f4      	beq.n	8003ce0 <fmaxf+0x18>
 8003cf6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfe:	dded      	ble.n	8003cdc <fmaxf+0x14>
 8003d00:	e7ee      	b.n	8003ce0 <fmaxf+0x18>

08003d02 <fminf>:
 8003d02:	b508      	push	{r3, lr}
 8003d04:	ed2d 8b02 	vpush	{d8}
 8003d08:	eeb0 8a40 	vmov.f32	s16, s0
 8003d0c:	eef0 8a60 	vmov.f32	s17, s1
 8003d10:	f000 f814 	bl	8003d3c <__fpclassifyf>
 8003d14:	b930      	cbnz	r0, 8003d24 <fminf+0x22>
 8003d16:	eeb0 8a68 	vmov.f32	s16, s17
 8003d1a:	eeb0 0a48 	vmov.f32	s0, s16
 8003d1e:	ecbd 8b02 	vpop	{d8}
 8003d22:	bd08      	pop	{r3, pc}
 8003d24:	eeb0 0a68 	vmov.f32	s0, s17
 8003d28:	f000 f808 	bl	8003d3c <__fpclassifyf>
 8003d2c:	2800      	cmp	r0, #0
 8003d2e:	d0f4      	beq.n	8003d1a <fminf+0x18>
 8003d30:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8003d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d38:	d5ed      	bpl.n	8003d16 <fminf+0x14>
 8003d3a:	e7ee      	b.n	8003d1a <fminf+0x18>

08003d3c <__fpclassifyf>:
 8003d3c:	ee10 3a10 	vmov	r3, s0
 8003d40:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8003d44:	d00d      	beq.n	8003d62 <__fpclassifyf+0x26>
 8003d46:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8003d4a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8003d4e:	d30a      	bcc.n	8003d66 <__fpclassifyf+0x2a>
 8003d50:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <__fpclassifyf+0x34>)
 8003d52:	1e42      	subs	r2, r0, #1
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d908      	bls.n	8003d6a <__fpclassifyf+0x2e>
 8003d58:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8003d5c:	4258      	negs	r0, r3
 8003d5e:	4158      	adcs	r0, r3
 8003d60:	4770      	bx	lr
 8003d62:	2002      	movs	r0, #2
 8003d64:	4770      	bx	lr
 8003d66:	2004      	movs	r0, #4
 8003d68:	4770      	bx	lr
 8003d6a:	2003      	movs	r0, #3
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	007ffffe 	.word	0x007ffffe

08003d74 <_init>:
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	bf00      	nop
 8003d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7a:	bc08      	pop	{r3}
 8003d7c:	469e      	mov	lr, r3
 8003d7e:	4770      	bx	lr

08003d80 <_fini>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	bf00      	nop
 8003d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d86:	bc08      	pop	{r3}
 8003d88:	469e      	mov	lr, r3
 8003d8a:	4770      	bx	lr
