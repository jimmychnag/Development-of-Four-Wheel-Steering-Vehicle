/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include <UART1.h>
#include "main.h"
#include "Delay.h"
#include "OLED.h"
#include "Timer.h"
#include "pid.h"
#include "Motor.h"
#include "math.h"
#include "Encoder.h"
#include "UART2.h"
#include "ADC.h"

#include "PWM2.h"
#include "PWM4.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#define TICKS_PER_REV 4680.0f //13*4*90
#define Sample_time   0.01f // 控制週期 10ms

#define PWM_MAX 1000


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
PIDController wheel1,wheel2,wheel3,wheel4;

typedef struct{
	float speed1,speed2,speed3,speed4;
}Encoder;
Encoder WheelSpeed;

//For wheel1，負為向前
float wheel1_motor_rpm;
float wheel1_speed = -10;

int16_t wheel1_last_count = 0;
int16_t wheel1_current = 0;
int16_t wheel1_delta = 0;
uint16_t wheel1_count;
float wheel1_motor_rps = 0;
float wheel1_out ;

//For wheel2，正為向前
float wheel2_motor_rpm;
float wheel2_speed = 10;

int16_t wheel2_last_count = 0;
int16_t wheel2_current = 0;
int16_t wheel2_delta = 0;
uint16_t wheel2_count;
float wheel2_motor_rps = 0;
float wheel2_out ;

//For wheel3，正為向前
float wheel3_motor_rpm;
float wheel3_speed = 10;

int16_t wheel3_last_count = 0;
int16_t wheel3_current = 0;
int16_t wheel3_delta = 0;
uint16_t wheel3_count;
float wheel3_motor_rps = 0;
float wheel3_out ;


//For wheel4，負為向前
float wheel4_motor_rpm;
float wheel4_speed = -30;

int16_t wheel4_last_count = 0;
int16_t wheel4_current = 0;
int16_t wheel4_delta = 0;
uint16_t wheel4_count;
float wheel4_motor_rps = 0;
float wheel4_out ;

int x = 0;


//For 運動學算法
float Vx = 0;
float Vy = 0;
float Wz = 0;
float alpha = 2;

//Check BLE
uint16_t a;
uint16_t s;
uint16_t d;

//JointSitck 中心點校正
uint8_t FirstJoint = 1;
uint16_t Vx_central,Vy_central,Wz_central;
float max_Lspeed = 30;
float max_Rspeed = 10;

uint8_t RxState = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t y = 0;
float z,w;

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  /*模块初始化*/
	OLED_Init();		//OLED初始化
	Timer_Init();
	Motor_Init();

	Serial_Init();		//串口初始化
	JoinStick_Init();
//	AD_Init();
//	Encoder_Init();


	OLED_ShowString(1, 1, "TIM1:");
	OLED_ShowString(2, 1, "TIM2:");
	OLED_ShowString(3, 1, "TIM3:");
	OLED_ShowString(4, 1, "TIM4:");


	// 30RPM下 Kp = 2 Ki = 0.1 Kd = 0.02 good
	//wheel1
	wheel1.param.Kp = 1.5;
	wheel1.param.Ki = 0.15 / wheel1.param.Kp  ;
	wheel1.param.Kd = 0.03 / wheel1.param.Kp ;
	wheel1.param.Kr = 1.0f;
	wheel1.param.Umax = 200.0f;
	wheel1.param.Umin = -200.0f;
	wheel1.term.c1 = 0.1f;  // D 濾波器
	wheel1.term.c2 = 0.9f;

	//wheel2
	wheel2.param.Kp = 1.5;
	wheel2.param.Ki = 0.15 / wheel2.param.Kp  ;
	wheel2.param.Kd = 0.03 / wheel2.param.Kp ;
	wheel2.param.Kr = 1.0f;
	wheel2.param.Umax = 200.0f;
	wheel2.param.Umin = -200.0f;
	wheel2.term.c1 = 0.1f;  // D 濾波器
	wheel2.term.c2 = 0.9f;

	//wheel3
	wheel3.param.Kp = 1.5;
	wheel3.param.Ki = 0.15 / wheel3.param.Kp  ;
	wheel3.param.Kd = 0.03 / wheel3.param.Kp ;
	wheel3.param.Kr = 1.0f;
	wheel3.param.Umax = 200.0f;
	wheel3.param.Umin = -200.0f;
	wheel3.term.c1 = 0.1f;  // D 濾波器
	wheel3.term.c2 = 0.9f;

	//wheel4
	wheel4.param.Kp = 1.5;
	wheel4.param.Ki = 0.15 / wheel4.param.Kp  ;
	wheel4.param.Kd = 0.03 / wheel4.param.Kp ;
	wheel4.param.Kr = 1.0f;
	wheel4.param.Umax = 200.0f;
	wheel4.param.Umin = -200.0f;
	wheel4.term.c1 = 0.1f;  // D 濾波器
	wheel4.term.c2 = 0.9f;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//	  y = TIM4->CNT;
//	  PWM2_SetCompare1(1000);
//	  PWM4_SetCompare1(1000);
//    AD_GetValue();
//    Delay_ms(100);
	if(Serial_RxFlag == 1)
	{
		OLED_ShowNum(1, 7, Serial_RxPacket[0], 5);	//不断刷新显示编码器测得的最新速度
		OLED_ShowNum(2, 7, Serial_RxPacket[1], 5);	//不断刷新显示编码器测得的最新速度
		OLED_ShowNum(3, 7, Serial_RxPacket[2], 5);	//不断刷新显示编码器测得的最新速度
		OLED_ShowNum(4, 7, Serial_RxPacket[3], 5);	//不断刷新显示编码器测得的最新速度
	}

	if(JoinStickFlag == 1 && FirstJoint == 1)
	{
		Vx_central = JoinStick[0];
		Vy_central = JoinStick[1];
		Wz_central = JoinStick[2];
		FirstJoint = 0;
	}


//	Motor_SetSpeed(1,y,x);
//	Motor_SetSpeed(2,z,w);
//	Motor_SetSpeed(3,y,x);
//	Motor_SetSpeed(4,z,w);




    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void EncoderSpeed(void)
{
	//wheel1
	wheel1_count = Serial_RxPacket[0];
	wheel1_current = (int16_t)wheel1_count;
	wheel1_delta = (int16_t)((uint16_t)wheel1_current - (uint16_t)wheel1_last_count);
	wheel1_last_count = wheel1_current;

	wheel1_motor_rps = (wheel1_delta / TICKS_PER_REV) / Sample_time ;
	wheel1_motor_rpm = wheel1_motor_rps * 60;
	WheelSpeed.speed1 = wheel1_motor_rpm;

	//wheel2
	wheel2_count = Serial_RxPacket[1];
	wheel2_current = (int16_t)wheel2_count;
	wheel2_delta = (int16_t)((uint16_t)wheel2_current - (uint16_t)wheel2_last_count);
	wheel2_last_count = wheel2_current;

	wheel2_motor_rps = (wheel2_delta / TICKS_PER_REV) / Sample_time ;
	wheel2_motor_rpm = wheel2_motor_rps * 60;
	WheelSpeed.speed2 = wheel2_motor_rpm;

	//wheel3
	wheel3_count = Serial_RxPacket[2];
	wheel3_current = (int16_t)wheel3_count;
	wheel3_delta = (int16_t)((uint16_t)wheel3_current - (uint16_t)wheel3_last_count);
	wheel3_last_count = wheel3_current;

	wheel3_motor_rps = (wheel3_delta / TICKS_PER_REV) / Sample_time ;
	wheel3_motor_rpm = wheel3_motor_rps * 60;
	WheelSpeed.speed3 = wheel3_motor_rpm;

	//wheel4
	wheel4_count = Serial_RxPacket[3];
	wheel4_current = (int16_t)wheel4_count;
	wheel4_delta = (int16_t)((uint16_t)wheel4_current - (uint16_t)wheel4_last_count);
	wheel4_last_count = wheel4_current;

	wheel4_motor_rps = (wheel4_delta / TICKS_PER_REV) / Sample_time ;
	wheel4_motor_rpm = wheel4_motor_rps * 60;
	WheelSpeed.speed4 = wheel4_motor_rpm;
}



void TIM8_BRK_TIM12_IRQHandler(void)
{
	if (TIM12->SR & (1 << 0))
	{
		Serial_SendByte(0x01);

		if(Serial_RxFlag == 1 && FirstJoint == 0)
		{
			EncoderSpeed();
			x ++;

			Vx = -((float)(JoinStick[0] - Vx_central) / (float)Vx_central) * max_Lspeed;
			Vy =  ((float)(JoinStick[1] - Vy_central) / (float)Vy_central) * max_Lspeed;


			if( (JoinStick[2] - Wz_central) > -400 && (JoinStick[2] - Wz_central) < 400 )
				Wz = 0;
			else
				Wz =  ((float)(JoinStick[2] - Wz_central) / (float)Wz_central) * max_Rspeed;

			Wz = -Wz;

			wheel1_speed = Vx + Vy + alpha * Wz; //front right
			wheel2_speed = Vx - Vy - alpha * Wz; //front left
			wheel3_speed = Vx + Vy - alpha * Wz; //rear  left
			wheel4_speed = Vx - Vy + alpha * Wz; //rear  right
//
//
			wheel1_speed = -wheel1_speed;
			wheel2_speed = -wheel2_speed;
			wheel3_speed = -wheel3_speed;
			wheel4_speed = -wheel4_speed;


			wheel1.term.Ref = wheel1_speed;
			wheel1.term.Fbk = WheelSpeed.speed1;

			wheel2.term.Ref = wheel2_speed;
			wheel2.term.Fbk = WheelSpeed.speed2;

			wheel3.term.Ref = wheel3_speed;
			wheel3.term.Fbk = WheelSpeed.speed3;

			wheel4.term.Ref = wheel4_speed;
			wheel4.term.Fbk = WheelSpeed.speed4;

			float wheel1_output = PID_Update(&wheel1);
			float wheel3_output = PID_Update(&wheel3);
			float wheel2_output = PID_Update(&wheel2);
			float wheel4_output = PID_Update(&wheel4);

			wheel1_out = wheel1_output;
			wheel3_out = wheel3_output;
			wheel2_out = wheel2_output;
			wheel4_out = wheel4_output;

			int wheel1_pwm = (int)(fabs(wheel1_out) / 200.0f * PWM_MAX);
			int wheel3_pwm = (int)(fabs(wheel3_out) / 200.0f * PWM_MAX);
			int wheel2_pwm = (int)(fabs(wheel2_out) / 200.0f * PWM_MAX);
			int wheel4_pwm = (int)(fabs(wheel4_out) / 200.0f * PWM_MAX);

			if (wheel1_pwm > PWM_MAX) wheel1_pwm = PWM_MAX;
			if (wheel3_pwm > PWM_MAX) wheel3_pwm = PWM_MAX;
			if (wheel2_pwm > PWM_MAX) wheel2_pwm = PWM_MAX;
			if (wheel4_pwm > PWM_MAX) wheel4_pwm = PWM_MAX;

			Motor_SetSpeed(1,wheel1_pwm,wheel1_output);  // 設定 PWM duty
			Motor_SetSpeed(3,wheel3_pwm,wheel3_output);  // 設定 PWM duty
			Motor_SetSpeed(2,wheel2_pwm,wheel2_output);  // 設定 PWM duty
			Motor_SetSpeed(4,wheel4_pwm,wheel4_output);  // 設定 PWM duty

			Serial_RxFlag = 0;
		}


		TIM12->SR &= ~(1 << 0);
	}
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */


/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
