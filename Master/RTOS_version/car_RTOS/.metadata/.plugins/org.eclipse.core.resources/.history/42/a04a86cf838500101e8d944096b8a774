/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <UART1.h>
#include "main.h"
#include "Delay.h"
#include "OLED.h"
#include "Timer.h"
#include "pid.h"
#include "Motor.h"
#include "math.h"
#include "Encoder.h"
#include "UART2.h"
#include "ADC.h"

#include "PWM2.h"
#include "PWM4.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#define TICKS_PER_REV 4680.0f //13*4*90
#define Sample_time   0.01f // 控制週期 10ms

#define PWM_MAX 1000
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
typedef StaticQueue_t osStaticMessageQDef_t;
osMessageQueueId_t EncoderHandle;
uint8_t EncoderBuffer[ 16 * sizeof( uint16_t ) ];
osStaticMessageQDef_t EncoderControlBlock;
const osMessageQueueAttr_t Encoder_attributes = {
  .name = "Encoder",
  .cb_mem = &EncoderControlBlock,
  .cb_size = sizeof(EncoderControlBlock),
  .mq_mem = &EncoderBuffer,
  .mq_size = sizeof(EncoderBuffer)
};


osMessageQueueId_t HC05Handle;
uint8_t HC05Buffer[ 16 * sizeof( uint16_t ) ];
osStaticMessageQDef_t HC05ControlBlock;
const osMessageQueueAttr_t HC05_attributes = {
  .name = "HC05",
  .cb_mem = &HC05ControlBlock,
  .cb_size = sizeof(HC05ControlBlock),
  .mq_mem = &HC05Buffer,
  .mq_size = sizeof(HC05Buffer)
};







/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* Definitions for TaskWheel1 */
osThreadId_t TaskWheel1Handle;
const osThreadAttr_t TaskWheel1_attributes = {
  .name = "TaskWheel1",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

osThreadId_t TaskWheel2Handle;
const osThreadAttr_t TaskWheel2_attributes = {
  .name = "TaskWheel2",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

osThreadId_t TaskWheel3Handle;
const osThreadAttr_t TaskWheel3_attributes = {
  .name = "TaskWheel3",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

osThreadId_t TaskWheel4Handle;
const osThreadAttr_t TaskWheel4_attributes = {
  .name = "TaskWheel4",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

osThreadId_t DataAcquireHandle;
const osThreadAttr_t DataAcquire_attributes = {
  .name = "DataAcquire",
  .stack_size = 512 * 4,
  .priority = (osPriority_t) osPriorityAboveNormal,
};

osThreadId_t AcquireEncoderHandle;
const osThreadAttr_t AcquireEncoder_attributes = {
  .name = "AcquireEncoder",
  .stack_size = 512 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

osThreadId_t AcquireUserHandle;
const osThreadAttr_t AcquireUser_attributes = {
  .name = "AcquireUserHandle",
  .stack_size = 512 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};


osSemaphoreId_t semEncoderHandle;
const osSemaphoreAttr_t semEncoder_attr = {
  .name = "semEncoder"
};

osSemaphoreId_t semWheelHandle;
const osSemaphoreAttr_t semWheel_attr = {
  .name = "semWheel"
};

osSemaphoreId_t EncoderIRQHandle;
const osSemaphoreAttr_t EncoderIRQ_attr = {
  .name = "EncoderIRQ"
};

osSemaphoreId_t HC05IRQHandle;
const osSemaphoreAttr_t HC05_attr = {
  .name = "HC05"
};


osSemaphoreId_t semDataAcquireHandle;
const osSemaphoreAttr_t semDataAcquire_attr = {
  .name = "semDataAcquire"
};

osMutexId_t EncoderMutex1;
osMutexAttr_t EncoderMutex1_attr = {
    .name = "EncoderMutex1",
	.attr_bits = osMutexPrioInherit
};

osMutexId_t EncoderMutex2;
osMutexAttr_t EncoderMutex2_attr = {
    .name = "EncoderMutex2",
	.attr_bits = osMutexPrioInherit
};

osMutexId_t EncoderMutex3;
osMutexAttr_t EncoderMutex3_attr = {
    .name = "EncoderMutex3",
	.attr_bits = osMutexPrioInherit

};

osMutexId_t EncoderMutex4;
osMutexAttr_t EncoderMutex4_attr = {
    .name = "EncoderMutex4",
	.attr_bits = osMutexPrioInherit

};

osMutexId_t HC05Mutex;
osMutexAttr_t HC05Mutex_attr = {
    .name = "HC05Mutex"
};



/* USER CODE BEGIN PV */
/* USER CODE BEGIN PFP */
PIDController wheel1,wheel2,wheel3,wheel4;

typedef struct{
	float speed1,speed2,speed3,speed4;
}Encoder;
Encoder WheelSpeed;

//For wheel1，負為向前
float wheel1_motor_rpm;
float wheel1_speed = -10;

int16_t wheel1_last_count = 0;
int16_t wheel1_current = 0;
int16_t wheel1_delta = 0;
uint16_t wheel1_count;
float wheel1_motor_rps = 0;
float wheel1_out ;

//For wheel2，正為向前
float wheel2_motor_rpm;
float wheel2_speed = 10;

int16_t wheel2_last_count = 0;
int16_t wheel2_current = 0;
int16_t wheel2_delta = 0;
uint16_t wheel2_count;
float wheel2_motor_rps = 0;
float wheel2_out ;

//For wheel3，正為向前
float wheel3_motor_rpm;
float wheel3_speed = 10;

int16_t wheel3_last_count = 0;
int16_t wheel3_current = 0;
int16_t wheel3_delta = 0;
uint16_t wheel3_count;
float wheel3_motor_rps = 0;
float wheel3_out ;


//For wheel4，負為向前
float wheel4_motor_rpm;
float wheel4_speed = -30;

int16_t wheel4_last_count = 0;
int16_t wheel4_current = 0;
int16_t wheel4_delta = 0;
uint16_t wheel4_count;
float wheel4_motor_rps = 0;
float wheel4_out ;

int x = 0;


//For 運動學算法
float Vx = 0;
float Vy = 0;
float Wz = 0;
float alpha = 2;

//Check BLE
uint16_t a;
uint16_t s;
uint16_t d;

//JointSitck 中心點校正
uint8_t FirstJoint = 1;
uint16_t Vx_central,Vy_central,Wz_central;
float max_Lspeed = 30;
float max_Rspeed = 30;

uint8_t RxState = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t y = 0;
float z,w;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
//static void MX_USART2_UART_Init(void);
void TaskWheel1(void *argument);
void TaskWheel2(void *argument);
void TaskWheel3(void *argument);
void TaskWheel4(void *argument);
void DataAcquire(void *argument);


void AcquireEncoder(void *argument);
void AcquireUser(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  OLED_Init();		//OLED初始化
//  	Timer_Init();
  	Motor_Init();

  	Serial_Init();		//串口初始化
  	JoinStick_Init();
  	//	AD_Init();
  	//	Encoder_Init();


  	OLED_ShowString(1, 1, "TIM1:");
  	OLED_ShowString(2, 1, "TIM2:");
  	OLED_ShowString(3, 1, "TIM3:");
  	OLED_ShowString(4, 1, "TIM4:");


  	// 30RPM下 Kp = 2 Ki = 0.1 Kd = 0.02 good
  	//wheel1
  	wheel1.param.Kp = 1.5;
  	wheel1.param.Ki = 0.15 / wheel1.param.Kp  ;
  	wheel1.param.Kd = 0.03 / wheel1.param.Kp ;
  	wheel1.param.Kr = 1.0f;
  	wheel1.param.Umax = 200.0f;
  	wheel1.param.Umin = -200.0f;
  	wheel1.term.c1 = 0.1f;  // D 濾波器
  	wheel1.term.c2 = 0.9f;

  	//wheel2
  	wheel2.param.Kp = 1.5;
  	wheel2.param.Ki = 0.15 / wheel2.param.Kp  ;
  	wheel2.param.Kd = 0.03 / wheel2.param.Kp ;
  	wheel2.param.Kr = 1.0f;
  	wheel2.param.Umax = 200.0f;
  	wheel2.param.Umin = -200.0f;
  	wheel2.term.c1 = 0.1f;  // D 濾波器
  	wheel2.term.c2 = 0.9f;

  	//wheel3
  	wheel3.param.Kp = 1.5;
  	wheel3.param.Ki = 0.15 / wheel3.param.Kp  ;
  	wheel3.param.Kd = 0.03 / wheel3.param.Kp ;
  	wheel3.param.Kr = 1.0f;
  	wheel3.param.Umax = 200.0f;
  	wheel3.param.Umin = -200.0f;
  	wheel3.term.c1 = 0.1f;  // D 濾波器
  	wheel3.term.c2 = 0.9f;

  	//wheel4
  	wheel4.param.Kp = 1.5;
  	wheel4.param.Ki = 0.15 / wheel4.param.Kp  ;
  	wheel4.param.Kd = 0.03 / wheel4.param.Kp ;
  	wheel4.param.Kr = 1.0f;
  	wheel4.param.Umax = 200.0f;
  	wheel4.param.Umin = -200.0f;
  	wheel4.term.c1 = 0.1f;  // D 濾波器
  	wheel4.term.c2 = 0.9f;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  EncoderMutex1 = osMutexNew(&EncoderMutex1_attr);                   // 初始化 Mutex
  EncoderMutex2 = osMutexNew(&EncoderMutex2_attr);                   // 初始化 Mutex
  EncoderMutex3 = osMutexNew(&EncoderMutex3_attr);                   // 初始化 Mutex
  EncoderMutex4 = osMutexNew(&EncoderMutex4_attr);                   // 初始化 Mutex

  HC05Mutex = osMutexNew(&HC05Mutex_attr);                   // 初始化 Mutex

  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  semEncoderHandle = osSemaphoreNew(1, 0, &semEncoder_attr);  // binary semaphore，初始值 0
  semWheelHandle = osSemaphoreNew(4, 0, &semWheel_attr);  	  // 初始值 0，等待同步

  EncoderIRQHandle = osSemaphoreNew(1, 0, &EncoderIRQ_attr);  // binary semaphore，初始值 0
  HC05IRQHandle    = osSemaphoreNew(1, 0, &HC05_attr);

  semDataAcquireHandle    = osSemaphoreNew(1, 0, &semDataAcquire_attr);



  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */


  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskWheel1 */
  TaskWheel1Handle  = osThreadNew(TaskWheel1, NULL, &TaskWheel1_attributes);
  TaskWheel2Handle  = osThreadNew(TaskWheel2, NULL, &TaskWheel2_attributes);
  TaskWheel3Handle  = osThreadNew(TaskWheel3, NULL, &TaskWheel3_attributes);
  TaskWheel4Handle  = osThreadNew(TaskWheel4, NULL, &TaskWheel4_attributes);
  DataAcquireHandle = osThreadNew(DataAcquire, NULL, &DataAcquire_attributes);

  AcquireEncoderHandle = osThreadNew(AcquireEncoder, NULL, &AcquireEncoder_attributes);
//  AcquireUserHandle    = osThreadNew(AcquireUser, NULL, &AcquireUser_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
//static void MX_USART2_UART_Init(void)
//{
//
//  /* USER CODE BEGIN USART2_Init 0 */
//
//  /* USER CODE END USART2_Init 0 */
//
//  /* USER CODE BEGIN USART2_Init 1 */
//
//  /* USER CODE END USART2_Init 1 */
//  huart2.Instance = USART2;
//  huart2.Init.BaudRate = 115200;
//  huart2.Init.WordLength = UART_WORDLENGTH_8B;
//  huart2.Init.StopBits = UART_STOPBITS_1;
//  huart2.Init.Parity = UART_PARITY_NONE;
//  huart2.Init.Mode = UART_MODE_TX_RX;
//  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
//  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
//  if (HAL_UART_Init(&huart2) != HAL_OK)
//  {
//    Error_Handler();
//  }
//  /* USER CODE BEGIN USART2_Init 2 */
//
//  /* USER CODE END USART2_Init 2 */
//
//}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
//void TIM8_BRK_TIM12_IRQHandler(void)
//{
//	if (TIM12->SR & (1 << 0))
//	{
//
//		osSemaphoreRelease(semEncoderHandle);
//
//		TIM12->SR &= ~(1 << 0);
//	}
//}
//
//void EncoderSpeed(void)
//{
//	//wheel1
//	wheel1_count = Serial_RxPacket[0];
//	wheel1_current = (int16_t)wheel1_count;
//	wheel1_delta = (int16_t)((uint16_t)wheel1_current - (uint16_t)wheel1_last_count);
//	wheel1_last_count = wheel1_current;
//
//	wheel1_motor_rps = (wheel1_delta / TICKS_PER_REV) / Sample_time ;
//	wheel1_motor_rpm = wheel1_motor_rps * 60;
//	WheelSpeed.speed1 = wheel1_motor_rpm;
//
//	//wheel2
//	wheel2_count = Serial_RxPacket[1];
//	wheel2_current = (int16_t)wheel2_count;
//	wheel2_delta = (int16_t)((uint16_t)wheel2_current - (uint16_t)wheel2_last_count);
//	wheel2_last_count = wheel2_current;
//
//	wheel2_motor_rps = (wheel2_delta / TICKS_PER_REV) / Sample_time ;
//	wheel2_motor_rpm = wheel2_motor_rps * 60;
//	WheelSpeed.speed2 = wheel2_motor_rpm;
//
//	//wheel3
//	wheel3_count = Serial_RxPacket[2];
//	wheel3_current = (int16_t)wheel3_count;
//	wheel3_delta = (int16_t)((uint16_t)wheel3_current - (uint16_t)wheel3_last_count);
//	wheel3_last_count = wheel3_current;
//
//	wheel3_motor_rps = (wheel3_delta / TICKS_PER_REV) / Sample_time ;
//	wheel3_motor_rpm = wheel3_motor_rps * 60;
//	WheelSpeed.speed3 = wheel3_motor_rpm;
//
//	//wheel4
//	wheel4_count = Serial_RxPacket[3];
//	wheel4_current = (int16_t)wheel4_count;
//	wheel4_delta = (int16_t)((uint16_t)wheel4_current - (uint16_t)wheel4_last_count);
//	wheel4_last_count = wheel4_current;
//
//	wheel4_motor_rps = (wheel4_delta / TICKS_PER_REV) / Sample_time ;
//	wheel4_motor_rpm = wheel4_motor_rps * 60;
//	WheelSpeed.speed4 = wheel4_motor_rpm;
//}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the TaskWheel1 thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void TaskWheel1(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(semWheelHandle, osWaitForever);

//	uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
	wheel1_speed = -wheel1_speed;
	wheel1.term.Ref = wheel1_speed;

	osMutexAcquire(EncoderMutex1,osWaitForever);
	wheel1.term.Fbk = WheelSpeed.speed1;
	osMutexRelease(EncoderMutex1);

	float wheel1_output = PID_Update(&wheel1);
	wheel1_out = wheel1_output;
	int wheel1_pwm = (int)(fabs(wheel1_out) / 400.0f * PWM_MAX);
	if (wheel1_pwm > PWM_MAX) wheel1_pwm = PWM_MAX;
	Motor_SetSpeed(1,wheel1_pwm,wheel1_output);  // 設定 PWM duty

	osDelay(1);
  }
  /* USER CODE END 5 */
}

void TaskWheel2(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(semWheelHandle, osWaitForever);

//    uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
	wheel2_speed = -wheel2_speed;
	wheel2.term.Ref = wheel2_speed;


	osMutexAcquire(EncoderMutex2,osWaitForever);
	wheel2.term.Fbk = WheelSpeed.speed2;
	osMutexRelease(EncoderMutex2);

	float wheel2_output = PID_Update(&wheel2);
	wheel2_out = wheel2_output;
	int wheel2_pwm = (int)(fabs(wheel2_out) / 400.0f * PWM_MAX);
	if (wheel2_pwm > PWM_MAX) wheel2_pwm = PWM_MAX;
	Motor_SetSpeed(2,wheel2_pwm,wheel2_output);  // 設定 PWM duty

	osDelay(1);
  }
  /* USER CODE END 5 */
}

void TaskWheel3(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(semWheelHandle, osWaitForever);
//	uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
	wheel3_speed = -wheel3_speed;
	wheel3.term.Ref = wheel3_speed;


	osMutexAcquire(EncoderMutex3,osWaitForever);
	wheel3.term.Fbk = WheelSpeed.speed3;
	osMutexRelease(EncoderMutex3);


	float wheel3_output = PID_Update(&wheel3);
	wheel3_out = wheel3_output;
	int wheel3_pwm = (int)(fabs(wheel3_out) / 400.0f * PWM_MAX);
	if (wheel3_pwm > PWM_MAX) wheel3_pwm = PWM_MAX;
	Motor_SetSpeed(3,wheel3_pwm,wheel3_output);  // 設定 PWM duty

	osDelay(1);

  }
  /* USER CODE END 5 */
}

void TaskWheel4(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(semWheelHandle, osWaitForever);
//	uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
	wheel4_speed = -wheel4_speed;
	wheel4.term.Ref = wheel4_speed;


	osMutexAcquire(EncoderMutex4,osWaitForever);
	wheel4.term.Fbk = WheelSpeed.speed4;
	osMutexRelease(EncoderMutex4);

	float wheel4_output = PID_Update(&wheel4);
	wheel4_out = wheel4_output;
	int wheel4_pwm = (int)(fabs(wheel4_out) / 400.0f * PWM_MAX);
	if (wheel4_pwm > PWM_MAX) wheel4_pwm = PWM_MAX;
	Motor_SetSpeed(4,wheel4_pwm,wheel4_output);  // 設定 PWM duty

	osDelay(1);

  }
  /* USER CODE END 5 */
}
void DataAcquire(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint32_t tick;

  tick = osKernelGetTickCount();        // retrieve the number of system ticks
  for(;;)
  {
	tick += 10U;                      // delay 1000 ticks periodically
	osDelayUntil(tick);


	if(JoinStickFlag == 1 && FirstJoint == 1)
	{

		osSemaphoreAcquire(HC05IRQHandle, osWaitForever);

//		Vx_central = JoinStick[0];
//		Vy_central = JoinStick[1];
//		Wz_central = JoinStick[2];

		Vx_central = User_Buffer[0];
		Vy_central = User_Buffer[1];
		Wz_central = User_Buffer[2];


		FirstJoint = 0;

	}
	else if(FirstJoint == 0)
	{
		Serial_SendByte(0x01);

		x ++;

		osSemaphoreAcquire(HC05IRQHandle, osWaitForever);

		Vx = -((float)(JoinStick[0] - Vx_central) / (float)Vx_central) * max_Lspeed;
		Vy =  ((float)(JoinStick[1] - Vy_central) / (float)Vy_central) * max_Lspeed;

		if( (JoinStick[2] - Wz_central) > -1000 && (JoinStick[2] - Wz_central) < 1000 )
			Wz = 0;
		else
			Wz =  ((float)(JoinStick[2] - Wz_central) / (float)Wz_central) * max_Rspeed;

		Wz = -Wz;

		wheel1_speed = Vx + Vy + alpha * Wz; //front right
		wheel2_speed = Vx - Vy - alpha * Wz; //front left
		wheel3_speed = Vx + Vy - alpha * Wz; //rear  left
		wheel4_speed = Vx - Vy + alpha * Wz; //rear  right

		osSemaphoreRelease(semWheelHandle);
		osSemaphoreRelease(semWheelHandle);
		osSemaphoreRelease(semWheelHandle);
		osSemaphoreRelease(semWheelHandle);

//		osThreadFlagsSet(TaskWheel1Handle,0x01);
//		osThreadFlagsSet(TaskWheel2Handle,0x01);
//		osThreadFlagsSet(TaskWheel3Handle,0x01);
//		osThreadFlagsSet(TaskWheel4Handle,0x01);
	}
  }
  /* USER CODE END 5 */
}


void AcquireEncoder(void *argument)
{
	for(;;)
	{
		osSemaphoreAcquire(EncoderIRQHandle, osWaitForever);

		//wheel1
//		wheel1_count = Serial_RxPacket[0];
		wheel1_count = Encoder_Buffer[0];
		wheel1_current = (int16_t)wheel1_count;
		wheel1_delta = (int16_t)((uint16_t)wheel1_current - (uint16_t)wheel1_last_count);
		wheel1_last_count = wheel1_current;

		wheel1_motor_rps = (wheel1_delta / TICKS_PER_REV) / Sample_time ;
		wheel1_motor_rpm = wheel1_motor_rps * 60;

		//wheel2
//		wheel2_count = Serial_RxPacket[1];
		wheel2_count = Encoder_Buffer[1];
		wheel2_current = (int16_t)wheel2_count;
		wheel2_delta = (int16_t)((uint16_t)wheel2_current - (uint16_t)wheel2_last_count);
		wheel2_last_count = wheel2_current;

		wheel2_motor_rps = (wheel2_delta / TICKS_PER_REV) / Sample_time ;
		wheel2_motor_rpm = wheel2_motor_rps * 60;

		//wheel3
//		wheel3_count = Serial_RxPacket[2];
		wheel3_count = Encoder_Buffer[2];
		wheel3_current = (int16_t)wheel3_count;
		wheel3_delta = (int16_t)((uint16_t)wheel3_current - (uint16_t)wheel3_last_count);
		wheel3_last_count = wheel3_current;

		wheel3_motor_rps = (wheel3_delta / TICKS_PER_REV) / Sample_time ;
		wheel3_motor_rpm = wheel3_motor_rps * 60;

		//wheel4
//		wheel4_count = Serial_RxPacket[3];
		wheel4_count = Encoder_Buffer[3];
		wheel4_current = (int16_t)wheel4_count;
		wheel4_delta = (int16_t)((uint16_t)wheel4_current - (uint16_t)wheel4_last_count);
		wheel4_last_count = wheel4_current;

		wheel4_motor_rps = (wheel4_delta / TICKS_PER_REV) / Sample_time ;
		wheel4_motor_rpm = wheel4_motor_rps * 60;

		osMutexAcquire(EncoderMutex1,osWaitForever);
		WheelSpeed.speed1 = wheel1_motor_rpm;
		osMutexRelease(EncoderMutex1);
		osMutexAcquire(EncoderMutex2,osWaitForever);
		WheelSpeed.speed2 = wheel2_motor_rpm;
		osMutexRelease(EncoderMutex2);
		osMutexAcquire(EncoderMutex3,osWaitForever);
		WheelSpeed.speed3 = wheel3_motor_rpm;
		osMutexRelease(EncoderMutex3);
		osMutexAcquire(EncoderMutex4,osWaitForever);
		WheelSpeed.speed4 = wheel4_motor_rpm;
		osMutexRelease(EncoderMutex4);
	}
}

//void AcquireUser(void *argument)
//{
//	for(;;)
//	{
//		osSemaphoreAcquire(HC05IRQHandle, osWaitForever);
//
//		Vx = -((float)(JoinStick[0] - Vx_central) / (float)Vx_central) * max_Lspeed;
//		Vy =  ((float)(JoinStick[1] - Vy_central) / (float)Vy_central) * max_Lspeed;
//
//		if( (JoinStick[2] - Wz_central) > -1000 && (JoinStick[2] - Wz_central) < 1000 )
//			Wz = 0;
//		else
//			Wz =  ((float)(JoinStick[2] - Wz_central) / (float)Wz_central) * max_Rspeed;
//
//		Wz = -Wz;
//
//		osSemaphoreRelease(semDataAcquireHandle);
//	}
//}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
