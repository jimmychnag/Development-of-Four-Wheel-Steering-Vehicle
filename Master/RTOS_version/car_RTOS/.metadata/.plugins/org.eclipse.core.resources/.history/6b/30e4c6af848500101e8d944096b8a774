#include <stm32f446xx.h>
#include <stdio.h>
#include <stdarg.h>
#include <main.h>

uint8_t Serial_RxData;		//定义串口接收的数据变量
uint8_t Serial_RxFlag;		//定义串口接收的标志位变量
uint16_t Serial_RxPacket[4];				//定义接收数据包数组

uint16_t Encoder_Buffer[4];


/**
  * 函    数：串口初始化
  * 参    数：无
  * 返 回 值：无
  */
void Serial_Init(void)
{

	//開啟USART1、GPIOA時鐘
	RCC->APB2ENR |= 1 << 4;
	RCC->AHB1ENR |= 1 << 0;
	

	//PA9為TX復用輸出、PA10為RX上拉輸入
	GPIOA->AFR[1] &= ~(0xF << 4);  // 清除 AFRH9（PA9）
	GPIOA->AFR[1] |=  (7 << 4);    // AF7 = USART1_TX
	GPIOA->AFR[1] &= ~(0xF << 8);  // 清除 AFRH10（PA10）
	GPIOA->AFR[1] |=  (7 << 8);    // AF7 = USART1_RX

	GPIOA->MODER &= ~(3 << 18);  // 清 PA9 模式位
	GPIOA->MODER  |=  2 << 18;
	GPIOA->OTYPER &=~(1 << 9);
	GPIOA->OSPEEDR|=  3 << 18;
	
	GPIOA->MODER &= ~(3 << 20);  // PA10 模式為輸入或 AF
	GPIOA->MODER |=  (2 << 20);  // 設為 AF 模式
	GPIOA->PUPDR &= ~(3 << 20);
	GPIOA->PUPDR |=  (1 << 20);  // 上拉



	//設置字長(8位元)、校驗(不使用)、發送始能、接收始能
	USART1->CR1 &= ~(1 << 12);
	USART1->CR1 &= ~(1 << 10);
	USART1->CR1 |= 1 << 3;
	USART1->CR1 |= 1 << 2;

	//設置停止位(1bit)
	USART1->CR2 &= ~(3 << 12);

	//設置硬體流控(不用)
	USART1->CR3 &= ~(7 << 8);

	//設定波特律(115200*10)
	USART1->BRR = (4 << 4) | (9 & 0xF);


	//設置當RXNE為1時，產生USART1中斷
	USART1->CR1 |= 1 << 5;

	//設置USART始能
	USART1->CR1 |= 1 << 13;

	//設置NVIC打開USART1的IRQHandler
	NVIC->ISER[1] |= 1 << 5;  //位置在37

	NVIC_SetPriority(USART1_IRQn, 7); // OK

}

/**
  * 函    数：串口发送一个字节
  * 参    数：Byte 要发送的一个字节
  * 返 回 值：无
  */
void Serial_SendByte(uint8_t Byte)
{
	//將字節寫入TDR
	USART1->DR = Byte & (uint16_t)0x1FF;
	//判斷TDR是否為空，若空了代表已經送到移位暫存器內，會被設置成1
	while( ( USART1->SR & (1 << 7) ) == 0);
}

/**
  * 函    数：串口发送一个数组
  * 参    数：Array 要发送数组的首地址
  * 参    数：Length 要发送数组的长度
  * 返 回 值：无
  */
void Serial_SendArray(uint8_t *Array, uint16_t Length)
{
	uint16_t i;
	for (i = 0; i < Length; i ++)		//遍历数组
	{
		Serial_SendByte(Array[i]);		//依次调用Serial_SendByte发送每个字节数据
	}
}

/**
  * 函    数：串口发送一个字符串
  * 参    数：String 要发送字符串的首地址
  * 返 回 值：无
  */
void Serial_SendString(char *String)
{
	uint8_t i;
	for (i = 0; String[i] != '\0'; i ++)//遍历字符数组（字符串），遇到字符串结束标志位后停止
	{
		Serial_SendByte(String[i]);		//依次调用Serial_SendByte发送每个字节数据
	}
}

/**
  * 函    数：次方函数（内部使用）
  * 返 回 值：返回值等于X的Y次方
  */
uint32_t Serial_Pow(uint32_t X, uint32_t Y)
{
	uint32_t Result = 1;	//设置结果初值为1
	while (Y --)			//执行Y次
	{
		Result *= X;		//将X累乘到结果
	}
	return Result;
}

/**
  * 函    数：串口发送数字
  * 参    数：Number 要发送的数字，范围：0~4294967295
  * 参    数：Length 要发送数字的长度，范围：0~10
  * 返 回 值：无
  */
void Serial_SendNumber(uint32_t Number, uint8_t Length)
{
	uint8_t i;
	for (i = 0; i < Length; i ++)		//根据数字长度遍历数字的每一位
	{
		Serial_SendByte(Number / Serial_Pow(10, Length - i - 1) % 10 + '0');	//依次调用Serial_SendByte发送每位数字
	}
}

/**
  * 函    数：使用printf需要重定向的底层函数
  * 参    数：保持原始格式即可，无需变动
  * 返 回 值：保持原始格式即可，无需变动
  */
int fputc(int ch, FILE *f)
{
	Serial_SendByte(ch);			//将printf的底层重定向到自己的发送字节函数
	return ch;
}

/**
  * 函    数：自己封装的prinf函数
  * 参    数：format 格式化字符串
  * 参    数：... 可变的参数列表
  * 返 回 值：无
  */
void Serial_Printf(char *format, ...)
{
	char String[100];				//定义字符数组
	va_list arg;					//定义可变参数列表数据类型的变量arg
	va_start(arg, format);			//从format开始，接收参数列表到arg变量
	vsprintf(String, format, arg);	//使用vsprintf打印格式化字符串和参数列表到字符数组中
	va_end(arg);					//结束变量arg
	Serial_SendString(String);		//串口发送字符数组（字符串）
}

/**
  * 函    数：获取串口接收标志位
  * 参    数：无
  * 返 回 值：串口接收标志位，范围：0~1，接收到数据后，标志位置1，读取后标志位自动清零
  */
uint8_t Serial_GetRxFlag(void)
{
	if (Serial_RxFlag == 1)			//如果标志位为1
	{
		Serial_RxFlag = 0;
		return 1;					//则返回1，并自动清零标志位
	}
	return 0;						//如果标志位为0，则返回0
}

/**
  * 函    数：获取串口接收的数据
  * 参    数：无
  * 返 回 值：接收的数据，范围：0~255
  */
uint8_t Serial_GetRxData(void)
{
	return Serial_RxData;			//返回接收的数据变量
}

/**
  * 函    数：USART1中断函数
  * 参    数：无
  * 返 回 值：无
  * 注意事项：此函数为中断函数，无需调用，中断触发后自动执行
  *           函数名为预留的指定名称，可以从启动文件复制
  *           请确保函数名正确，不能有任何差异，否则中断函数将不能进入
  */
void USART1_IRQHandler(void)
{


	static uint8_t RxState = 0;		//定义表示当前状态机状态的静态变量
	static uint8_t Data_L,Data_H;

	if ( USART1->SR & (1 << 5) ) 		//判断是否是USART1的接收事件触发的中断
	{
		uint8_t RxData = USART1->DR;				//读取数据寄存器，存放在接收的数据变量

		/*使用状态机*/

		//Start
		if (RxState == 0)
		{
			if (RxData == 0xFF)			//如果数据确实是包头
			{
				RxState = 1;			//置下一个状态
			}
		}

		//1st
		else if(RxState == 1)
		{
			Data_L = RxData;
			RxState = 2;
		}
		else if(RxState == 2)
		{
			Data_H = RxData;
			Serial_RxPacket[0] = (Data_H << 6) | Data_L;
			RxState = 3;
		}
		//2nd
		else if(RxState == 3)
		{
			Data_L = RxData;
			RxState = 4;
		}
		else if(RxState == 4)
		{
			Data_H = RxData;
			Serial_RxPacket[1] = (Data_H << 6) | Data_L;
			RxState = 5;
		}
		//3rd
		else if(RxState == 5)
		{
			Data_L = RxData;
			RxState = 6;
		}
		else if(RxState == 6)
		{
			Data_H = RxData;
			Serial_RxPacket[2] = (Data_H << 6) | Data_L;
			RxState = 7;
		}
		//4th
		else if(RxState == 7)
		{
			Data_L = RxData;
			RxState = 8;
		}
		else if(RxState == 8)
		{
			Data_H = RxData;
			Serial_RxPacket[3] = (Data_H << 6) | Data_L;
			RxState = 9;
		}

		//end
		else if (RxState == 9)
		{
			if (RxData == 0xFE)
			{
				RxState = 0;
				Serial_RxFlag = 1;

				Encoder_Buffer[0] = Serial_RxPacket[0];
				Encoder_Buffer[1] = Serial_RxPacket[1];
				Encoder_Buffer[2] = Serial_RxPacket[2];
				Encoder_Buffer[3] = Serial_RxPacket[3];
				osSemaphoreRelease(EncoderIRQHandle);
			}
		}


		USART1->SR &= ~(1 << 5);
	}
}
