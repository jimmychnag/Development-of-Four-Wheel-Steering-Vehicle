
car_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  08008294  08008294  00009294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a10  08008a10  0000a050  2**0
                  CONTENTS
  4 .ARM          00000008  08008a10  08008a10  00009a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a18  08008a18  0000a050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a18  08008a18  00009a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a1c  08008a1c  00009a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08008a20  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  20000050  08008a70  0000a050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ba8  08008a70  0000aba8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014088  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003612  00000000  00000000  0001e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00021720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8e  00000000  00000000  000226a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000433f  00000000  00000000  0002322e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d27  00000000  00000000  0002756d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d392a  00000000  00000000  0003b294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ebbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df8  00000000  00000000  0010ec04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001129fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000050 	.word	0x20000050
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800827c 	.word	0x0800827c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000054 	.word	0x20000054
 800020c:	0800827c 	.word	0x0800827c

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2iz>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009b4:	d215      	bcs.n	80009e2 <__aeabi_d2iz+0x36>
 80009b6:	d511      	bpl.n	80009dc <__aeabi_d2iz+0x30>
 80009b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d912      	bls.n	80009e8 <__aeabi_d2iz+0x3c>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009d2:	fa23 f002 	lsr.w	r0, r3, r2
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d105      	bne.n	80009f4 <__aeabi_d2iz+0x48>
 80009e8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009ec:	bf08      	it	eq
 80009ee:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b96a 	b.w	8000d88 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d14e      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ad8:	4694      	mov	ip, r2
 8000ada:	458c      	cmp	ip, r1
 8000adc:	4686      	mov	lr, r0
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	d962      	bls.n	8000baa <__udivmoddi4+0xde>
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	4091      	lsls	r1, r2
 8000aec:	fa20 f303 	lsr.w	r3, r0, r3
 8000af0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af4:	4319      	orrs	r1, r3
 8000af6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afe:	fa1f f68c 	uxth.w	r6, ip
 8000b02:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb04 f106 	mul.w	r1, r4, r6
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b22:	f080 8112 	bcs.w	8000d4a <__udivmoddi4+0x27e>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 810f 	bls.w	8000d4a <__udivmoddi4+0x27e>
 8000b2c:	3c02      	subs	r4, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b3a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb00 f606 	mul.w	r6, r0, r6
 8000b46:	429e      	cmp	r6, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x94>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b52:	f080 80fc 	bcs.w	8000d4e <__udivmoddi4+0x282>
 8000b56:	429e      	cmp	r6, r3
 8000b58:	f240 80f9 	bls.w	8000d4e <__udivmoddi4+0x282>
 8000b5c:	4463      	add	r3, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	1b9b      	subs	r3, r3, r6
 8000b62:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11d      	cbz	r5, 8000b72 <__udivmoddi4+0xa6>
 8000b6a:	40d3      	lsrs	r3, r2
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d905      	bls.n	8000b86 <__udivmoddi4+0xba>
 8000b7a:	b10d      	cbz	r5, 8000b80 <__udivmoddi4+0xb4>
 8000b7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b80:	2100      	movs	r1, #0
 8000b82:	4608      	mov	r0, r1
 8000b84:	e7f5      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000b86:	fab3 f183 	clz	r1, r3
 8000b8a:	2900      	cmp	r1, #0
 8000b8c:	d146      	bne.n	8000c1c <__udivmoddi4+0x150>
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xcc>
 8000b92:	4290      	cmp	r0, r2
 8000b94:	f0c0 80f0 	bcc.w	8000d78 <__udivmoddi4+0x2ac>
 8000b98:	1a86      	subs	r6, r0, r2
 8000b9a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d0e6      	beq.n	8000b72 <__udivmoddi4+0xa6>
 8000ba4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba8:	e7e3      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	f040 8090 	bne.w	8000cd0 <__udivmoddi4+0x204>
 8000bb0:	eba1 040c 	sub.w	r4, r1, ip
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	fa1f f78c 	uxth.w	r7, ip
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bce:	fb07 f006 	mul.w	r0, r7, r6
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x11c>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x11a>
 8000be0:	4298      	cmp	r0, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000be6:	4626      	mov	r6, r4
 8000be8:	1a1c      	subs	r4, r3, r0
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bf2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfa:	fb00 f707 	mul.w	r7, r0, r7
 8000bfe:	429f      	cmp	r7, r3
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x148>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0x146>
 8000c0c:	429f      	cmp	r7, r3
 8000c0e:	f200 80b0 	bhi.w	8000d72 <__udivmoddi4+0x2a6>
 8000c12:	4620      	mov	r0, r4
 8000c14:	1bdb      	subs	r3, r3, r7
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	e7a5      	b.n	8000b68 <__udivmoddi4+0x9c>
 8000c1c:	f1c1 0620 	rsb	r6, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 f706 	lsr.w	r7, r2, r6
 8000c26:	431f      	orrs	r7, r3
 8000c28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c30:	ea43 030c 	orr.w	r3, r3, ip
 8000c34:	40f4      	lsrs	r4, r6
 8000c36:	fa00 f801 	lsl.w	r8, r0, r1
 8000c3a:	0c38      	lsrs	r0, r7, #16
 8000c3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c40:	fbb4 fef0 	udiv	lr, r4, r0
 8000c44:	fa1f fc87 	uxth.w	ip, r7
 8000c48:	fb00 441e 	mls	r4, r0, lr, r4
 8000c4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c50:	fb0e f90c 	mul.w	r9, lr, ip
 8000c54:	45a1      	cmp	r9, r4
 8000c56:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x1a6>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c62:	f080 8084 	bcs.w	8000d6e <__udivmoddi4+0x2a2>
 8000c66:	45a1      	cmp	r9, r4
 8000c68:	f240 8081 	bls.w	8000d6e <__udivmoddi4+0x2a2>
 8000c6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c70:	443c      	add	r4, r7
 8000c72:	eba4 0409 	sub.w	r4, r4, r9
 8000c76:	fa1f f983 	uxth.w	r9, r3
 8000c7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x1d2>
 8000c8e:	193c      	adds	r4, r7, r4
 8000c90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c94:	d267      	bcs.n	8000d66 <__udivmoddi4+0x29a>
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0x29a>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	443c      	add	r4, r7
 8000c9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ca2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca6:	eba4 040c 	sub.w	r4, r4, ip
 8000caa:	429c      	cmp	r4, r3
 8000cac:	46ce      	mov	lr, r9
 8000cae:	469c      	mov	ip, r3
 8000cb0:	d351      	bcc.n	8000d56 <__udivmoddi4+0x28a>
 8000cb2:	d04e      	beq.n	8000d52 <__udivmoddi4+0x286>
 8000cb4:	b155      	cbz	r5, 8000ccc <__udivmoddi4+0x200>
 8000cb6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cba:	eb64 040c 	sbc.w	r4, r4, ip
 8000cbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000cc2:	40cb      	lsrs	r3, r1
 8000cc4:	431e      	orrs	r6, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e750      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000cd0:	f1c2 0320 	rsb	r3, r2, #32
 8000cd4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cdc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	430c      	orrs	r4, r1
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf8:	0c23      	lsrs	r3, r4, #16
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f107 	mul.w	r1, r0, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x24c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d0e:	d22c      	bcs.n	8000d6a <__udivmoddi4+0x29e>
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d92a      	bls.n	8000d6a <__udivmoddi4+0x29e>
 8000d14:	3802      	subs	r0, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d20:	fb08 3311 	mls	r3, r8, r1, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb01 f307 	mul.w	r3, r1, r7
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x276>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d38:	d213      	bcs.n	8000d62 <__udivmoddi4+0x296>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d911      	bls.n	8000d62 <__udivmoddi4+0x296>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	4464      	add	r4, ip
 8000d42:	1ae4      	subs	r4, r4, r3
 8000d44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d48:	e739      	b.n	8000bbe <__udivmoddi4+0xf2>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	e6f0      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e706      	b.n	8000b60 <__udivmoddi4+0x94>
 8000d52:	45c8      	cmp	r8, r9
 8000d54:	d2ae      	bcs.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5e:	3801      	subs	r0, #1
 8000d60:	e7a8      	b.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d62:	4631      	mov	r1, r6
 8000d64:	e7ed      	b.n	8000d42 <__udivmoddi4+0x276>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e799      	b.n	8000c9e <__udivmoddi4+0x1d2>
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	e7d4      	b.n	8000d18 <__udivmoddi4+0x24c>
 8000d6e:	46d6      	mov	lr, sl
 8000d70:	e77f      	b.n	8000c72 <__udivmoddi4+0x1a6>
 8000d72:	4463      	add	r3, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	e74d      	b.n	8000c14 <__udivmoddi4+0x148>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e70f      	b.n	8000ba0 <__udivmoddi4+0xd4>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	4463      	add	r3, ip
 8000d84:	e730      	b.n	8000be8 <__udivmoddi4+0x11c>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	0000      	movs	r0, r0
	...

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 ff3a 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f9b0 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f000 fa1c 	bl	80011d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();		//OLED初始化
 8000da0:	f002 fb71 	bl	8003486 <OLED_Init>
  	Timer_Init();
 8000da4:	f007 f8fa 	bl	8007f9c <Timer_Init>
  	Motor_Init();
 8000da8:	f002 f836 	bl	8002e18 <Motor_Init>

  	Serial_Init();		//串口初始化
 8000dac:	f002 fe6c 	bl	8003a88 <Serial_Init>
  	JoinStick_Init();
 8000db0:	f003 f81c 	bl	8003dec <JoinStick_Init>
  	//	AD_Init();
  	//	Encoder_Init();


  	OLED_ShowString(1, 1, "TIM1:");
 8000db4:	4aae      	ldr	r2, [pc, #696]	@ (8001070 <main+0x2e0>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	2001      	movs	r0, #1
 8000dba:	f002 fb3f 	bl	800343c <OLED_ShowString>
  	OLED_ShowString(2, 1, "TIM2:");
 8000dbe:	4aad      	ldr	r2, [pc, #692]	@ (8001074 <main+0x2e4>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f002 fb3a 	bl	800343c <OLED_ShowString>
  	OLED_ShowString(3, 1, "TIM3:");
 8000dc8:	4aab      	ldr	r2, [pc, #684]	@ (8001078 <main+0x2e8>)
 8000dca:	2101      	movs	r1, #1
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f002 fb35 	bl	800343c <OLED_ShowString>
  	OLED_ShowString(4, 1, "TIM4:");
 8000dd2:	4aaa      	ldr	r2, [pc, #680]	@ (800107c <main+0x2ec>)
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2004      	movs	r0, #4
 8000dd8:	f002 fb30 	bl	800343c <OLED_ShowString>


  	// 30RPM下 Kp = 2 Ki = 0.1 Kd = 0.02 good
  	//wheel1
  	wheel1.param.Kp = 1.5;
 8000ddc:	4ba8      	ldr	r3, [pc, #672]	@ (8001080 <main+0x2f0>)
 8000dde:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000de2:	635a      	str	r2, [r3, #52]	@ 0x34
  	wheel1.param.Ki = 0.15 / wheel1.param.Kp  ;
 8000de4:	4ba6      	ldr	r3, [pc, #664]	@ (8001080 <main+0x2f0>)
 8000de6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fb75 	bl	80004d8 <__aeabi_f2d>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	a19b      	add	r1, pc, #620	@ (adr r1, 8001060 <main+0x2d0>)
 8000df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000df8:	f7ff fcf0 	bl	80007dc <__aeabi_ddiv>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4610      	mov	r0, r2
 8000e02:	4619      	mov	r1, r3
 8000e04:	f7ff fdfa 	bl	80009fc <__aeabi_d2f>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4a9d      	ldr	r2, [pc, #628]	@ (8001080 <main+0x2f0>)
 8000e0c:	6393      	str	r3, [r2, #56]	@ 0x38
  	wheel1.param.Kd = 0.03 / wheel1.param.Kp ;
 8000e0e:	4b9c      	ldr	r3, [pc, #624]	@ (8001080 <main+0x2f0>)
 8000e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fb60 	bl	80004d8 <__aeabi_f2d>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	a192      	add	r1, pc, #584	@ (adr r1, 8001068 <main+0x2d8>)
 8000e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e22:	f7ff fcdb 	bl	80007dc <__aeabi_ddiv>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f7ff fde5 	bl	80009fc <__aeabi_d2f>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a92      	ldr	r2, [pc, #584]	@ (8001080 <main+0x2f0>)
 8000e36:	63d3      	str	r3, [r2, #60]	@ 0x3c
  	wheel1.param.Kr = 1.0f;
 8000e38:	4b91      	ldr	r3, [pc, #580]	@ (8001080 <main+0x2f0>)
 8000e3a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000e3e:	641a      	str	r2, [r3, #64]	@ 0x40
  	wheel1.param.Umax = 200.0f;
 8000e40:	4b8f      	ldr	r3, [pc, #572]	@ (8001080 <main+0x2f0>)
 8000e42:	4a90      	ldr	r2, [pc, #576]	@ (8001084 <main+0x2f4>)
 8000e44:	645a      	str	r2, [r3, #68]	@ 0x44
  	wheel1.param.Umin = -200.0f;
 8000e46:	4b8e      	ldr	r3, [pc, #568]	@ (8001080 <main+0x2f0>)
 8000e48:	4a8f      	ldr	r2, [pc, #572]	@ (8001088 <main+0x2f8>)
 8000e4a:	649a      	str	r2, [r3, #72]	@ 0x48
  	wheel1.term.c1 = 0.1f;  // D 濾波器
 8000e4c:	4b8c      	ldr	r3, [pc, #560]	@ (8001080 <main+0x2f0>)
 8000e4e:	4a8f      	ldr	r2, [pc, #572]	@ (800108c <main+0x2fc>)
 8000e50:	62da      	str	r2, [r3, #44]	@ 0x2c
  	wheel1.term.c2 = 0.9f;
 8000e52:	4b8b      	ldr	r3, [pc, #556]	@ (8001080 <main+0x2f0>)
 8000e54:	4a8e      	ldr	r2, [pc, #568]	@ (8001090 <main+0x300>)
 8000e56:	631a      	str	r2, [r3, #48]	@ 0x30

  	//wheel2
  	wheel2.param.Kp = 1.5;
 8000e58:	4b8e      	ldr	r3, [pc, #568]	@ (8001094 <main+0x304>)
 8000e5a:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000e5e:	635a      	str	r2, [r3, #52]	@ 0x34
  	wheel2.param.Ki = 0.15 / wheel2.param.Kp  ;
 8000e60:	4b8c      	ldr	r3, [pc, #560]	@ (8001094 <main+0x304>)
 8000e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fb37 	bl	80004d8 <__aeabi_f2d>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	a17c      	add	r1, pc, #496	@ (adr r1, 8001060 <main+0x2d0>)
 8000e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e74:	f7ff fcb2 	bl	80007dc <__aeabi_ddiv>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fdbc 	bl	80009fc <__aeabi_d2f>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a83      	ldr	r2, [pc, #524]	@ (8001094 <main+0x304>)
 8000e88:	6393      	str	r3, [r2, #56]	@ 0x38
  	wheel2.param.Kd = 0.03 / wheel2.param.Kp ;
 8000e8a:	4b82      	ldr	r3, [pc, #520]	@ (8001094 <main+0x304>)
 8000e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fb22 	bl	80004d8 <__aeabi_f2d>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	a173      	add	r1, pc, #460	@ (adr r1, 8001068 <main+0x2d8>)
 8000e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e9e:	f7ff fc9d 	bl	80007dc <__aeabi_ddiv>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fda7 	bl	80009fc <__aeabi_d2f>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a78      	ldr	r2, [pc, #480]	@ (8001094 <main+0x304>)
 8000eb2:	63d3      	str	r3, [r2, #60]	@ 0x3c
  	wheel2.param.Kr = 1.0f;
 8000eb4:	4b77      	ldr	r3, [pc, #476]	@ (8001094 <main+0x304>)
 8000eb6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000eba:	641a      	str	r2, [r3, #64]	@ 0x40
  	wheel2.param.Umax = 200.0f;
 8000ebc:	4b75      	ldr	r3, [pc, #468]	@ (8001094 <main+0x304>)
 8000ebe:	4a71      	ldr	r2, [pc, #452]	@ (8001084 <main+0x2f4>)
 8000ec0:	645a      	str	r2, [r3, #68]	@ 0x44
  	wheel2.param.Umin = -200.0f;
 8000ec2:	4b74      	ldr	r3, [pc, #464]	@ (8001094 <main+0x304>)
 8000ec4:	4a70      	ldr	r2, [pc, #448]	@ (8001088 <main+0x2f8>)
 8000ec6:	649a      	str	r2, [r3, #72]	@ 0x48
  	wheel2.term.c1 = 0.1f;  // D 濾波器
 8000ec8:	4b72      	ldr	r3, [pc, #456]	@ (8001094 <main+0x304>)
 8000eca:	4a70      	ldr	r2, [pc, #448]	@ (800108c <main+0x2fc>)
 8000ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
  	wheel2.term.c2 = 0.9f;
 8000ece:	4b71      	ldr	r3, [pc, #452]	@ (8001094 <main+0x304>)
 8000ed0:	4a6f      	ldr	r2, [pc, #444]	@ (8001090 <main+0x300>)
 8000ed2:	631a      	str	r2, [r3, #48]	@ 0x30

  	//wheel3
  	wheel3.param.Kp = 1.5;
 8000ed4:	4b70      	ldr	r3, [pc, #448]	@ (8001098 <main+0x308>)
 8000ed6:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000eda:	635a      	str	r2, [r3, #52]	@ 0x34
  	wheel3.param.Ki = 0.15 / wheel3.param.Kp  ;
 8000edc:	4b6e      	ldr	r3, [pc, #440]	@ (8001098 <main+0x308>)
 8000ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff faf9 	bl	80004d8 <__aeabi_f2d>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	a15d      	add	r1, pc, #372	@ (adr r1, 8001060 <main+0x2d0>)
 8000eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ef0:	f7ff fc74 	bl	80007dc <__aeabi_ddiv>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	f7ff fd7e 	bl	80009fc <__aeabi_d2f>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a65      	ldr	r2, [pc, #404]	@ (8001098 <main+0x308>)
 8000f04:	6393      	str	r3, [r2, #56]	@ 0x38
  	wheel3.param.Kd = 0.03 / wheel3.param.Kp ;
 8000f06:	4b64      	ldr	r3, [pc, #400]	@ (8001098 <main+0x308>)
 8000f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fae4 	bl	80004d8 <__aeabi_f2d>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	a154      	add	r1, pc, #336	@ (adr r1, 8001068 <main+0x2d8>)
 8000f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f1a:	f7ff fc5f 	bl	80007dc <__aeabi_ddiv>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff fd69 	bl	80009fc <__aeabi_d2f>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a5a      	ldr	r2, [pc, #360]	@ (8001098 <main+0x308>)
 8000f2e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  	wheel3.param.Kr = 1.0f;
 8000f30:	4b59      	ldr	r3, [pc, #356]	@ (8001098 <main+0x308>)
 8000f32:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f36:	641a      	str	r2, [r3, #64]	@ 0x40
  	wheel3.param.Umax = 200.0f;
 8000f38:	4b57      	ldr	r3, [pc, #348]	@ (8001098 <main+0x308>)
 8000f3a:	4a52      	ldr	r2, [pc, #328]	@ (8001084 <main+0x2f4>)
 8000f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  	wheel3.param.Umin = -200.0f;
 8000f3e:	4b56      	ldr	r3, [pc, #344]	@ (8001098 <main+0x308>)
 8000f40:	4a51      	ldr	r2, [pc, #324]	@ (8001088 <main+0x2f8>)
 8000f42:	649a      	str	r2, [r3, #72]	@ 0x48
  	wheel3.term.c1 = 0.1f;  // D 濾波器
 8000f44:	4b54      	ldr	r3, [pc, #336]	@ (8001098 <main+0x308>)
 8000f46:	4a51      	ldr	r2, [pc, #324]	@ (800108c <main+0x2fc>)
 8000f48:	62da      	str	r2, [r3, #44]	@ 0x2c
  	wheel3.term.c2 = 0.9f;
 8000f4a:	4b53      	ldr	r3, [pc, #332]	@ (8001098 <main+0x308>)
 8000f4c:	4a50      	ldr	r2, [pc, #320]	@ (8001090 <main+0x300>)
 8000f4e:	631a      	str	r2, [r3, #48]	@ 0x30

  	//wheel4
  	wheel4.param.Kp = 1.5;
 8000f50:	4b52      	ldr	r3, [pc, #328]	@ (800109c <main+0x30c>)
 8000f52:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000f56:	635a      	str	r2, [r3, #52]	@ 0x34
  	wheel4.param.Ki = 0.15 / wheel4.param.Kp  ;
 8000f58:	4b50      	ldr	r3, [pc, #320]	@ (800109c <main+0x30c>)
 8000f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fabb 	bl	80004d8 <__aeabi_f2d>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	a13e      	add	r1, pc, #248	@ (adr r1, 8001060 <main+0x2d0>)
 8000f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f6c:	f7ff fc36 	bl	80007dc <__aeabi_ddiv>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fd40 	bl	80009fc <__aeabi_d2f>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a47      	ldr	r2, [pc, #284]	@ (800109c <main+0x30c>)
 8000f80:	6393      	str	r3, [r2, #56]	@ 0x38
  	wheel4.param.Kd = 0.03 / wheel4.param.Kp ;
 8000f82:	4b46      	ldr	r3, [pc, #280]	@ (800109c <main+0x30c>)
 8000f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff faa6 	bl	80004d8 <__aeabi_f2d>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	a135      	add	r1, pc, #212	@ (adr r1, 8001068 <main+0x2d8>)
 8000f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f96:	f7ff fc21 	bl	80007dc <__aeabi_ddiv>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fd2b 	bl	80009fc <__aeabi_d2f>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800109c <main+0x30c>)
 8000faa:	63d3      	str	r3, [r2, #60]	@ 0x3c
  	wheel4.param.Kr = 1.0f;
 8000fac:	4b3b      	ldr	r3, [pc, #236]	@ (800109c <main+0x30c>)
 8000fae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000fb2:	641a      	str	r2, [r3, #64]	@ 0x40
  	wheel4.param.Umax = 200.0f;
 8000fb4:	4b39      	ldr	r3, [pc, #228]	@ (800109c <main+0x30c>)
 8000fb6:	4a33      	ldr	r2, [pc, #204]	@ (8001084 <main+0x2f4>)
 8000fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  	wheel4.param.Umin = -200.0f;
 8000fba:	4b38      	ldr	r3, [pc, #224]	@ (800109c <main+0x30c>)
 8000fbc:	4a32      	ldr	r2, [pc, #200]	@ (8001088 <main+0x2f8>)
 8000fbe:	649a      	str	r2, [r3, #72]	@ 0x48
  	wheel4.term.c1 = 0.1f;  // D 濾波器
 8000fc0:	4b36      	ldr	r3, [pc, #216]	@ (800109c <main+0x30c>)
 8000fc2:	4a32      	ldr	r2, [pc, #200]	@ (800108c <main+0x2fc>)
 8000fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  	wheel4.term.c2 = 0.9f;
 8000fc6:	4b35      	ldr	r3, [pc, #212]	@ (800109c <main+0x30c>)
 8000fc8:	4a31      	ldr	r2, [pc, #196]	@ (8001090 <main+0x300>)
 8000fca:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fcc:	f003 f8a6 	bl	800411c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  EncoderMutex = osMutexNew(&EncoderMutex_attr);                   // 初始化 Mutex
 8000fd0:	4833      	ldr	r0, [pc, #204]	@ (80010a0 <main+0x310>)
 8000fd2:	f003 fa4e 	bl	8004472 <osMutexNew>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a32      	ldr	r2, [pc, #200]	@ (80010a4 <main+0x314>)
 8000fda:	6013      	str	r3, [r2, #0]
  EncoderMutex = osMutexNew(&HC05Mutex_attr);                   // 初始化 Mutex
 8000fdc:	4832      	ldr	r0, [pc, #200]	@ (80010a8 <main+0x318>)
 8000fde:	f003 fa48 	bl	8004472 <osMutexNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80010a4 <main+0x314>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  semEncoderHandle = osSemaphoreNew(1, 0, &semEncoder_attr);  // binary semaphore，初始值 0
 8000fe8:	4a30      	ldr	r2, [pc, #192]	@ (80010ac <main+0x31c>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	2001      	movs	r0, #1
 8000fee:	f003 fb4e 	bl	800468e <osSemaphoreNew>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80010b0 <main+0x320>)
 8000ff6:	6013      	str	r3, [r2, #0]
  semWheelHandle = osSemaphoreNew(4, 0, &semWheel_attr);  	  // 初始值 0，等待同步
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80010b4 <main+0x324>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2004      	movs	r0, #4
 8000ffe:	f003 fb46 	bl	800468e <osSemaphoreNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a2c      	ldr	r2, [pc, #176]	@ (80010b8 <main+0x328>)
 8001006:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskWheel1 */
  TaskWheel1Handle  = osThreadNew(TaskWheel1, NULL, &TaskWheel1_attributes);
 8001008:	4a2c      	ldr	r2, [pc, #176]	@ (80010bc <main+0x32c>)
 800100a:	2100      	movs	r1, #0
 800100c:	482c      	ldr	r0, [pc, #176]	@ (80010c0 <main+0x330>)
 800100e:	f003 f8cf 	bl	80041b0 <osThreadNew>
 8001012:	4603      	mov	r3, r0
 8001014:	4a2b      	ldr	r2, [pc, #172]	@ (80010c4 <main+0x334>)
 8001016:	6013      	str	r3, [r2, #0]
  TaskWheel2Handle  = osThreadNew(TaskWheel2, NULL, &TaskWheel2_attributes);
 8001018:	4a2b      	ldr	r2, [pc, #172]	@ (80010c8 <main+0x338>)
 800101a:	2100      	movs	r1, #0
 800101c:	482b      	ldr	r0, [pc, #172]	@ (80010cc <main+0x33c>)
 800101e:	f003 f8c7 	bl	80041b0 <osThreadNew>
 8001022:	4603      	mov	r3, r0
 8001024:	4a2a      	ldr	r2, [pc, #168]	@ (80010d0 <main+0x340>)
 8001026:	6013      	str	r3, [r2, #0]
  TaskWheel3Handle  = osThreadNew(TaskWheel3, NULL, &TaskWheel3_attributes);
 8001028:	4a2a      	ldr	r2, [pc, #168]	@ (80010d4 <main+0x344>)
 800102a:	2100      	movs	r1, #0
 800102c:	482a      	ldr	r0, [pc, #168]	@ (80010d8 <main+0x348>)
 800102e:	f003 f8bf 	bl	80041b0 <osThreadNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a29      	ldr	r2, [pc, #164]	@ (80010dc <main+0x34c>)
 8001036:	6013      	str	r3, [r2, #0]
  TaskWheel4Handle  = osThreadNew(TaskWheel4, NULL, &TaskWheel4_attributes);
 8001038:	4a29      	ldr	r2, [pc, #164]	@ (80010e0 <main+0x350>)
 800103a:	2100      	movs	r1, #0
 800103c:	4829      	ldr	r0, [pc, #164]	@ (80010e4 <main+0x354>)
 800103e:	f003 f8b7 	bl	80041b0 <osThreadNew>
 8001042:	4603      	mov	r3, r0
 8001044:	4a28      	ldr	r2, [pc, #160]	@ (80010e8 <main+0x358>)
 8001046:	6013      	str	r3, [r2, #0]
  TaskEncoderHandle = osThreadNew(TaskEncoder, NULL, &TaskEncoder_attributes);
 8001048:	4a28      	ldr	r2, [pc, #160]	@ (80010ec <main+0x35c>)
 800104a:	2100      	movs	r1, #0
 800104c:	4828      	ldr	r0, [pc, #160]	@ (80010f0 <main+0x360>)
 800104e:	f003 f8af 	bl	80041b0 <osThreadNew>
 8001052:	4603      	mov	r3, r0
 8001054:	4a27      	ldr	r2, [pc, #156]	@ (80010f4 <main+0x364>)
 8001056:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001058:	f003 f884 	bl	8004164 <osKernelStart>
 800105c:	e04c      	b.n	80010f8 <main+0x368>
 800105e:	bf00      	nop
 8001060:	33333333 	.word	0x33333333
 8001064:	3fc33333 	.word	0x3fc33333
 8001068:	eb851eb8 	.word	0xeb851eb8
 800106c:	3f9eb851 	.word	0x3f9eb851
 8001070:	08008304 	.word	0x08008304
 8001074:	0800830c 	.word	0x0800830c
 8001078:	08008314 	.word	0x08008314
 800107c:	0800831c 	.word	0x0800831c
 8001080:	20000090 	.word	0x20000090
 8001084:	43480000 	.word	0x43480000
 8001088:	c3480000 	.word	0xc3480000
 800108c:	3dcccccd 	.word	0x3dcccccd
 8001090:	3f666666 	.word	0x3f666666
 8001094:	200000dc 	.word	0x200000dc
 8001098:	20000128 	.word	0x20000128
 800109c:	20000174 	.word	0x20000174
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000088 	.word	0x20000088
 80010a8:	20000010 	.word	0x20000010
 80010ac:	080083f0 	.word	0x080083f0
 80010b0:	20000080 	.word	0x20000080
 80010b4:	08008400 	.word	0x08008400
 80010b8:	20000084 	.word	0x20000084
 80010bc:	0800833c 	.word	0x0800833c
 80010c0:	08001545 	.word	0x08001545
 80010c4:	2000006c 	.word	0x2000006c
 80010c8:	08008360 	.word	0x08008360
 80010cc:	08001601 	.word	0x08001601
 80010d0:	20000070 	.word	0x20000070
 80010d4:	08008384 	.word	0x08008384
 80010d8:	080016bd 	.word	0x080016bd
 80010dc:	20000074 	.word	0x20000074
 80010e0:	080083a8 	.word	0x080083a8
 80010e4:	08001779 	.word	0x08001779
 80010e8:	20000078 	.word	0x20000078
 80010ec:	080083cc 	.word	0x080083cc
 80010f0:	08001835 	.word	0x08001835
 80010f4:	2000007c 	.word	0x2000007c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <main+0x368>

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	@ 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	2234      	movs	r2, #52	@ 0x34
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f007 f826 	bl	800815c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b2a      	ldr	r3, [pc, #168]	@ (80011d0 <SystemClock_Config+0xd4>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001128:	4a29      	ldr	r2, [pc, #164]	@ (80011d0 <SystemClock_Config+0xd4>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001130:	4b27      	ldr	r3, [pc, #156]	@ (80011d0 <SystemClock_Config+0xd4>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800113c:	2300      	movs	r3, #0
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <SystemClock_Config+0xd8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001148:	4a22      	ldr	r2, [pc, #136]	@ (80011d4 <SystemClock_Config+0xd8>)
 800114a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <SystemClock_Config+0xd8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2310      	movs	r3, #16
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001170:	2310      	movs	r3, #16
 8001172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001174:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001178:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800117a:	2304      	movs	r3, #4
 800117c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800117e:	2302      	movs	r3, #2
 8001180:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fb5a 	bl	8002844 <HAL_RCC_OscConfig>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001196:	f000 fca3 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119a:	230f      	movs	r3, #15
 800119c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119e:	2302      	movs	r3, #2
 80011a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	2102      	movs	r1, #2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 f82e 	bl	8002218 <HAL_RCC_ClockConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011c2:	f000 fc8d 	bl	8001ae0 <Error_Handler>
  }
}
 80011c6:	bf00      	nop
 80011c8:	3750      	adds	r7, #80	@ 0x50
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000

080011d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	@ 0x28
 80011dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a2c      	ldr	r2, [pc, #176]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a25      	ldr	r2, [pc, #148]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a1e      	ldr	r2, [pc, #120]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a17      	ldr	r2, [pc, #92]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <MX_GPIO_Init+0xd0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2120      	movs	r1, #32
 8001262:	4812      	ldr	r0, [pc, #72]	@ (80012ac <MX_GPIO_Init+0xd4>)
 8001264:	f000 ffbe 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800126e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <MX_GPIO_Init+0xd8>)
 8001280:	f000 fe1c 	bl	8001ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001284:	2320      	movs	r3, #32
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4804      	ldr	r0, [pc, #16]	@ (80012ac <MX_GPIO_Init+0xd4>)
 800129c:	f000 fe0e 	bl	8001ebc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	@ 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020800 	.word	0x40020800

080012b4 <TIM8_BRK_TIM12_IRQHandler>:

/* USER CODE BEGIN 4 */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	if (TIM12->SR & (1 << 0))
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <TIM8_BRK_TIM12_IRQHandler+0x2c>)
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00a      	beq.n	80012da <TIM8_BRK_TIM12_IRQHandler+0x26>
	{

		osSemaphoreRelease(semEncoderHandle);
 80012c4:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <TIM8_BRK_TIM12_IRQHandler+0x30>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 fabb 	bl	8004844 <osSemaphoreRelease>

		TIM12->SR &= ~(1 << 0);
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <TIM8_BRK_TIM12_IRQHandler+0x2c>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	4a03      	ldr	r2, [pc, #12]	@ (80012e0 <TIM8_BRK_TIM12_IRQHandler+0x2c>)
 80012d4:	f023 0301 	bic.w	r3, r3, #1
 80012d8:	6113      	str	r3, [r2, #16]
	}
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40001800 	.word	0x40001800
 80012e4:	20000080 	.word	0x20000080

080012e8 <EncoderSpeed>:

void EncoderSpeed(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	//wheel1
	wheel1_count = Serial_RxPacket[0];
 80012ec:	4b78      	ldr	r3, [pc, #480]	@ (80014d0 <EncoderSpeed+0x1e8>)
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	4b78      	ldr	r3, [pc, #480]	@ (80014d4 <EncoderSpeed+0x1ec>)
 80012f2:	801a      	strh	r2, [r3, #0]
	wheel1_current = (int16_t)wheel1_count;
 80012f4:	4b77      	ldr	r3, [pc, #476]	@ (80014d4 <EncoderSpeed+0x1ec>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	4b77      	ldr	r3, [pc, #476]	@ (80014d8 <EncoderSpeed+0x1f0>)
 80012fc:	801a      	strh	r2, [r3, #0]
	wheel1_delta = (int16_t)((uint16_t)wheel1_current - (uint16_t)wheel1_last_count);
 80012fe:	4b76      	ldr	r3, [pc, #472]	@ (80014d8 <EncoderSpeed+0x1f0>)
 8001300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b75      	ldr	r3, [pc, #468]	@ (80014dc <EncoderSpeed+0x1f4>)
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	b29b      	uxth	r3, r3
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	b29b      	uxth	r3, r3
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b72      	ldr	r3, [pc, #456]	@ (80014e0 <EncoderSpeed+0x1f8>)
 8001316:	801a      	strh	r2, [r3, #0]
	wheel1_last_count = wheel1_current;
 8001318:	4b6f      	ldr	r3, [pc, #444]	@ (80014d8 <EncoderSpeed+0x1f0>)
 800131a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800131e:	4b6f      	ldr	r3, [pc, #444]	@ (80014dc <EncoderSpeed+0x1f4>)
 8001320:	801a      	strh	r2, [r3, #0]

	wheel1_motor_rps = (wheel1_delta / TICKS_PER_REV) / Sample_time ;
 8001322:	4b6f      	ldr	r3, [pc, #444]	@ (80014e0 <EncoderSpeed+0x1f8>)
 8001324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001328:	ee07 3a90 	vmov	s15, r3
 800132c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001330:	eddf 6a6c 	vldr	s13, [pc, #432]	@ 80014e4 <EncoderSpeed+0x1fc>
 8001334:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001338:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 80014e8 <EncoderSpeed+0x200>
 800133c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001340:	4b6a      	ldr	r3, [pc, #424]	@ (80014ec <EncoderSpeed+0x204>)
 8001342:	edc3 7a00 	vstr	s15, [r3]
	wheel1_motor_rpm = wheel1_motor_rps * 60;
 8001346:	4b69      	ldr	r3, [pc, #420]	@ (80014ec <EncoderSpeed+0x204>)
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80014f0 <EncoderSpeed+0x208>
 8001350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001354:	4b67      	ldr	r3, [pc, #412]	@ (80014f4 <EncoderSpeed+0x20c>)
 8001356:	edc3 7a00 	vstr	s15, [r3]
	WheelSpeed.speed1 = wheel1_motor_rpm;
 800135a:	4b66      	ldr	r3, [pc, #408]	@ (80014f4 <EncoderSpeed+0x20c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a66      	ldr	r2, [pc, #408]	@ (80014f8 <EncoderSpeed+0x210>)
 8001360:	6013      	str	r3, [r2, #0]

	//wheel2
	wheel2_count = Serial_RxPacket[1];
 8001362:	4b5b      	ldr	r3, [pc, #364]	@ (80014d0 <EncoderSpeed+0x1e8>)
 8001364:	885a      	ldrh	r2, [r3, #2]
 8001366:	4b65      	ldr	r3, [pc, #404]	@ (80014fc <EncoderSpeed+0x214>)
 8001368:	801a      	strh	r2, [r3, #0]
	wheel2_current = (int16_t)wheel2_count;
 800136a:	4b64      	ldr	r3, [pc, #400]	@ (80014fc <EncoderSpeed+0x214>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b63      	ldr	r3, [pc, #396]	@ (8001500 <EncoderSpeed+0x218>)
 8001372:	801a      	strh	r2, [r3, #0]
	wheel2_delta = (int16_t)((uint16_t)wheel2_current - (uint16_t)wheel2_last_count);
 8001374:	4b62      	ldr	r3, [pc, #392]	@ (8001500 <EncoderSpeed+0x218>)
 8001376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137a:	b29a      	uxth	r2, r3
 800137c:	4b61      	ldr	r3, [pc, #388]	@ (8001504 <EncoderSpeed+0x21c>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	b29b      	uxth	r3, r3
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b5f      	ldr	r3, [pc, #380]	@ (8001508 <EncoderSpeed+0x220>)
 800138c:	801a      	strh	r2, [r3, #0]
	wheel2_last_count = wheel2_current;
 800138e:	4b5c      	ldr	r3, [pc, #368]	@ (8001500 <EncoderSpeed+0x218>)
 8001390:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001394:	4b5b      	ldr	r3, [pc, #364]	@ (8001504 <EncoderSpeed+0x21c>)
 8001396:	801a      	strh	r2, [r3, #0]

	wheel2_motor_rps = (wheel2_delta / TICKS_PER_REV) / Sample_time ;
 8001398:	4b5b      	ldr	r3, [pc, #364]	@ (8001508 <EncoderSpeed+0x220>)
 800139a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80014e4 <EncoderSpeed+0x1fc>
 80013aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013ae:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80014e8 <EncoderSpeed+0x200>
 80013b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b6:	4b55      	ldr	r3, [pc, #340]	@ (800150c <EncoderSpeed+0x224>)
 80013b8:	edc3 7a00 	vstr	s15, [r3]
	wheel2_motor_rpm = wheel2_motor_rps * 60;
 80013bc:	4b53      	ldr	r3, [pc, #332]	@ (800150c <EncoderSpeed+0x224>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80014f0 <EncoderSpeed+0x208>
 80013c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ca:	4b51      	ldr	r3, [pc, #324]	@ (8001510 <EncoderSpeed+0x228>)
 80013cc:	edc3 7a00 	vstr	s15, [r3]
	WheelSpeed.speed2 = wheel2_motor_rpm;
 80013d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001510 <EncoderSpeed+0x228>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a48      	ldr	r2, [pc, #288]	@ (80014f8 <EncoderSpeed+0x210>)
 80013d6:	6053      	str	r3, [r2, #4]

	//wheel3
	wheel3_count = Serial_RxPacket[2];
 80013d8:	4b3d      	ldr	r3, [pc, #244]	@ (80014d0 <EncoderSpeed+0x1e8>)
 80013da:	889a      	ldrh	r2, [r3, #4]
 80013dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001514 <EncoderSpeed+0x22c>)
 80013de:	801a      	strh	r2, [r3, #0]
	wheel3_current = (int16_t)wheel3_count;
 80013e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001514 <EncoderSpeed+0x22c>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001518 <EncoderSpeed+0x230>)
 80013e8:	801a      	strh	r2, [r3, #0]
	wheel3_delta = (int16_t)((uint16_t)wheel3_current - (uint16_t)wheel3_last_count);
 80013ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001518 <EncoderSpeed+0x230>)
 80013ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b4a      	ldr	r3, [pc, #296]	@ (800151c <EncoderSpeed+0x234>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b21a      	sxth	r2, r3
 8001400:	4b47      	ldr	r3, [pc, #284]	@ (8001520 <EncoderSpeed+0x238>)
 8001402:	801a      	strh	r2, [r3, #0]
	wheel3_last_count = wheel3_current;
 8001404:	4b44      	ldr	r3, [pc, #272]	@ (8001518 <EncoderSpeed+0x230>)
 8001406:	f9b3 2000 	ldrsh.w	r2, [r3]
 800140a:	4b44      	ldr	r3, [pc, #272]	@ (800151c <EncoderSpeed+0x234>)
 800140c:	801a      	strh	r2, [r3, #0]

	wheel3_motor_rps = (wheel3_delta / TICKS_PER_REV) / Sample_time ;
 800140e:	4b44      	ldr	r3, [pc, #272]	@ (8001520 <EncoderSpeed+0x238>)
 8001410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80014e4 <EncoderSpeed+0x1fc>
 8001420:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001424:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80014e8 <EncoderSpeed+0x200>
 8001428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142c:	4b3d      	ldr	r3, [pc, #244]	@ (8001524 <EncoderSpeed+0x23c>)
 800142e:	edc3 7a00 	vstr	s15, [r3]
	wheel3_motor_rpm = wheel3_motor_rps * 60;
 8001432:	4b3c      	ldr	r3, [pc, #240]	@ (8001524 <EncoderSpeed+0x23c>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80014f0 <EncoderSpeed+0x208>
 800143c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001440:	4b39      	ldr	r3, [pc, #228]	@ (8001528 <EncoderSpeed+0x240>)
 8001442:	edc3 7a00 	vstr	s15, [r3]
	WheelSpeed.speed3 = wheel3_motor_rpm;
 8001446:	4b38      	ldr	r3, [pc, #224]	@ (8001528 <EncoderSpeed+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a2b      	ldr	r2, [pc, #172]	@ (80014f8 <EncoderSpeed+0x210>)
 800144c:	6093      	str	r3, [r2, #8]

	//wheel4
	wheel4_count = Serial_RxPacket[3];
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <EncoderSpeed+0x1e8>)
 8001450:	88da      	ldrh	r2, [r3, #6]
 8001452:	4b36      	ldr	r3, [pc, #216]	@ (800152c <EncoderSpeed+0x244>)
 8001454:	801a      	strh	r2, [r3, #0]
	wheel4_current = (int16_t)wheel4_count;
 8001456:	4b35      	ldr	r3, [pc, #212]	@ (800152c <EncoderSpeed+0x244>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <EncoderSpeed+0x248>)
 800145e:	801a      	strh	r2, [r3, #0]
	wheel4_delta = (int16_t)((uint16_t)wheel4_current - (uint16_t)wheel4_last_count);
 8001460:	4b33      	ldr	r3, [pc, #204]	@ (8001530 <EncoderSpeed+0x248>)
 8001462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001466:	b29a      	uxth	r2, r3
 8001468:	4b32      	ldr	r3, [pc, #200]	@ (8001534 <EncoderSpeed+0x24c>)
 800146a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800146e:	b29b      	uxth	r3, r3
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	b21a      	sxth	r2, r3
 8001476:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <EncoderSpeed+0x250>)
 8001478:	801a      	strh	r2, [r3, #0]
	wheel4_last_count = wheel4_current;
 800147a:	4b2d      	ldr	r3, [pc, #180]	@ (8001530 <EncoderSpeed+0x248>)
 800147c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001480:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <EncoderSpeed+0x24c>)
 8001482:	801a      	strh	r2, [r3, #0]

	wheel4_motor_rps = (wheel4_delta / TICKS_PER_REV) / Sample_time ;
 8001484:	4b2c      	ldr	r3, [pc, #176]	@ (8001538 <EncoderSpeed+0x250>)
 8001486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80014e4 <EncoderSpeed+0x1fc>
 8001496:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800149a:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80014e8 <EncoderSpeed+0x200>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	4b26      	ldr	r3, [pc, #152]	@ (800153c <EncoderSpeed+0x254>)
 80014a4:	edc3 7a00 	vstr	s15, [r3]
	wheel4_motor_rpm = wheel4_motor_rps * 60;
 80014a8:	4b24      	ldr	r3, [pc, #144]	@ (800153c <EncoderSpeed+0x254>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80014f0 <EncoderSpeed+0x208>
 80014b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b6:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <EncoderSpeed+0x258>)
 80014b8:	edc3 7a00 	vstr	s15, [r3]
	WheelSpeed.speed4 = wheel4_motor_rpm;
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <EncoderSpeed+0x258>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0d      	ldr	r2, [pc, #52]	@ (80014f8 <EncoderSpeed+0x210>)
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000240 	.word	0x20000240
 80014d4:	200001da 	.word	0x200001da
 80014d8:	200001d6 	.word	0x200001d6
 80014dc:	200001d4 	.word	0x200001d4
 80014e0:	200001d8 	.word	0x200001d8
 80014e4:	45924000 	.word	0x45924000
 80014e8:	3c23d70a 	.word	0x3c23d70a
 80014ec:	200001dc 	.word	0x200001dc
 80014f0:	42700000 	.word	0x42700000
 80014f4:	200001d0 	.word	0x200001d0
 80014f8:	200001c0 	.word	0x200001c0
 80014fc:	200001ee 	.word	0x200001ee
 8001500:	200001ea 	.word	0x200001ea
 8001504:	200001e8 	.word	0x200001e8
 8001508:	200001ec 	.word	0x200001ec
 800150c:	200001f0 	.word	0x200001f0
 8001510:	200001e4 	.word	0x200001e4
 8001514:	20000202 	.word	0x20000202
 8001518:	200001fe 	.word	0x200001fe
 800151c:	200001fc 	.word	0x200001fc
 8001520:	20000200 	.word	0x20000200
 8001524:	20000204 	.word	0x20000204
 8001528:	200001f8 	.word	0x200001f8
 800152c:	20000216 	.word	0x20000216
 8001530:	20000212 	.word	0x20000212
 8001534:	20000210 	.word	0x20000210
 8001538:	20000214 	.word	0x20000214
 800153c:	20000218 	.word	0x20000218
 8001540:	2000020c 	.word	0x2000020c

08001544 <TaskWheel1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void TaskWheel1(void *argument)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	osSemaphoreAcquire(semWheelHandle, osWaitForever);

	uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	2100      	movs	r1, #0
 8001552:	2001      	movs	r0, #1
 8001554:	f002 ff0c 	bl	8004370 <osThreadFlagsWait>
 8001558:	4603      	mov	r3, r0
 800155a:	74fb      	strb	r3, [r7, #19]
	wheel1_speed = -wheel1_speed;
 800155c:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <TaskWheel1+0xa4>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	eef1 7a67 	vneg.f32	s15, s15
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <TaskWheel1+0xa4>)
 8001568:	edc3 7a00 	vstr	s15, [r3]
	wheel1.term.Ref = wheel1_speed;
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <TaskWheel1+0xa4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1e      	ldr	r2, [pc, #120]	@ (80015ec <TaskWheel1+0xa8>)
 8001572:	6213      	str	r3, [r2, #32]
	wheel1.term.Fbk = WheelSpeed.speed1;
 8001574:	4b1e      	ldr	r3, [pc, #120]	@ (80015f0 <TaskWheel1+0xac>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <TaskWheel1+0xa8>)
 800157a:	6253      	str	r3, [r2, #36]	@ 0x24
	float wheel1_output = PID_Update(&wheel1);
 800157c:	481b      	ldr	r0, [pc, #108]	@ (80015ec <TaskWheel1+0xa8>)
 800157e:	f006 fd4b 	bl	8008018 <PID_Update>
 8001582:	ed87 0a03 	vstr	s0, [r7, #12]
	wheel1_out = wheel1_output;
 8001586:	4a1b      	ldr	r2, [pc, #108]	@ (80015f4 <TaskWheel1+0xb0>)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6013      	str	r3, [r2, #0]
	int wheel1_pwm = (int)(fabs(wheel1_out) / 200.0f * PWM_MAX);
 800158c:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <TaskWheel1+0xb0>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	eef0 7ae7 	vabs.f32	s15, s15
 8001596:	ee17 0a90 	vmov	r0, s15
 800159a:	f7fe ff9d 	bl	80004d8 <__aeabi_f2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <TaskWheel1+0xb4>)
 80015a4:	f7ff f91a 	bl	80007dc <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <TaskWheel1+0xb8>)
 80015b6:	f7fe ffe7 	bl	8000588 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff f9f3 	bl	80009ac <__aeabi_d2iz>
 80015c6:	4603      	mov	r3, r0
 80015c8:	617b      	str	r3, [r7, #20]
	if (wheel1_pwm > PWM_MAX) wheel1_pwm = PWM_MAX;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015d0:	dd02      	ble.n	80015d8 <TaskWheel1+0x94>
 80015d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d6:	617b      	str	r3, [r7, #20]
	Motor_SetSpeed(1,wheel1_pwm,wheel1_output);  // 設定 PWM duty
 80015d8:	ed97 0a03 	vldr	s0, [r7, #12]
 80015dc:	6979      	ldr	r1, [r7, #20]
 80015de:	2001      	movs	r0, #1
 80015e0:	f001 fd00 	bl	8002fe4 <Motor_SetSpeed>
  {
 80015e4:	e7b2      	b.n	800154c <TaskWheel1+0x8>
 80015e6:	bf00      	nop
 80015e8:	20000020 	.word	0x20000020
 80015ec:	20000090 	.word	0x20000090
 80015f0:	200001c0 	.word	0x200001c0
 80015f4:	200001e0 	.word	0x200001e0
 80015f8:	40690000 	.word	0x40690000
 80015fc:	408f4000 	.word	0x408f4000

08001600 <TaskWheel2>:
  }
  /* USER CODE END 5 */
}

void TaskWheel2(void *argument)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	osSemaphoreAcquire(semWheelHandle, osWaitForever);

    uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	2100      	movs	r1, #0
 800160e:	2001      	movs	r0, #1
 8001610:	f002 feae 	bl	8004370 <osThreadFlagsWait>
 8001614:	4603      	mov	r3, r0
 8001616:	74fb      	strb	r3, [r7, #19]
	wheel2_speed = -wheel2_speed;
 8001618:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <TaskWheel2+0xa4>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	eef1 7a67 	vneg.f32	s15, s15
 8001622:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <TaskWheel2+0xa4>)
 8001624:	edc3 7a00 	vstr	s15, [r3]
	wheel2.term.Ref = wheel2_speed;
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <TaskWheel2+0xa4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a1e      	ldr	r2, [pc, #120]	@ (80016a8 <TaskWheel2+0xa8>)
 800162e:	6213      	str	r3, [r2, #32]
	wheel2.term.Fbk = WheelSpeed.speed2;
 8001630:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <TaskWheel2+0xac>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a1c      	ldr	r2, [pc, #112]	@ (80016a8 <TaskWheel2+0xa8>)
 8001636:	6253      	str	r3, [r2, #36]	@ 0x24
	float wheel2_output = PID_Update(&wheel2);
 8001638:	481b      	ldr	r0, [pc, #108]	@ (80016a8 <TaskWheel2+0xa8>)
 800163a:	f006 fced 	bl	8008018 <PID_Update>
 800163e:	ed87 0a03 	vstr	s0, [r7, #12]
	wheel2_out = wheel2_output;
 8001642:	4a1b      	ldr	r2, [pc, #108]	@ (80016b0 <TaskWheel2+0xb0>)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6013      	str	r3, [r2, #0]
	int wheel2_pwm = (int)(fabs(wheel2_out) / 200.0f * PWM_MAX);
 8001648:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <TaskWheel2+0xb0>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	eef0 7ae7 	vabs.f32	s15, s15
 8001652:	ee17 0a90 	vmov	r0, s15
 8001656:	f7fe ff3f 	bl	80004d8 <__aeabi_f2d>
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <TaskWheel2+0xb4>)
 8001660:	f7ff f8bc 	bl	80007dc <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <TaskWheel2+0xb8>)
 8001672:	f7fe ff89 	bl	8000588 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff f995 	bl	80009ac <__aeabi_d2iz>
 8001682:	4603      	mov	r3, r0
 8001684:	617b      	str	r3, [r7, #20]
	if (wheel2_pwm > PWM_MAX) wheel2_pwm = PWM_MAX;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800168c:	dd02      	ble.n	8001694 <TaskWheel2+0x94>
 800168e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001692:	617b      	str	r3, [r7, #20]
	Motor_SetSpeed(2,wheel2_pwm,wheel2_output);  // 設定 PWM duty
 8001694:	ed97 0a03 	vldr	s0, [r7, #12]
 8001698:	6979      	ldr	r1, [r7, #20]
 800169a:	2002      	movs	r0, #2
 800169c:	f001 fca2 	bl	8002fe4 <Motor_SetSpeed>
  {
 80016a0:	e7b2      	b.n	8001608 <TaskWheel2+0x8>
 80016a2:	bf00      	nop
 80016a4:	20000024 	.word	0x20000024
 80016a8:	200000dc 	.word	0x200000dc
 80016ac:	200001c0 	.word	0x200001c0
 80016b0:	200001f4 	.word	0x200001f4
 80016b4:	40690000 	.word	0x40690000
 80016b8:	408f4000 	.word	0x408f4000

080016bc <TaskWheel3>:
  }
  /* USER CODE END 5 */
}

void TaskWheel3(void *argument)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	osSemaphoreAcquire(semWheelHandle, osWaitForever);
	uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	2100      	movs	r1, #0
 80016ca:	2001      	movs	r0, #1
 80016cc:	f002 fe50 	bl	8004370 <osThreadFlagsWait>
 80016d0:	4603      	mov	r3, r0
 80016d2:	74fb      	strb	r3, [r7, #19]
	wheel3_speed = -wheel3_speed;
 80016d4:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <TaskWheel3+0xa4>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	eef1 7a67 	vneg.f32	s15, s15
 80016de:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <TaskWheel3+0xa4>)
 80016e0:	edc3 7a00 	vstr	s15, [r3]
	wheel3.term.Ref = wheel3_speed;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <TaskWheel3+0xa4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001764 <TaskWheel3+0xa8>)
 80016ea:	6213      	str	r3, [r2, #32]
	wheel3.term.Fbk = WheelSpeed.speed3;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <TaskWheel3+0xac>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001764 <TaskWheel3+0xa8>)
 80016f2:	6253      	str	r3, [r2, #36]	@ 0x24
	float wheel3_output = PID_Update(&wheel3);
 80016f4:	481b      	ldr	r0, [pc, #108]	@ (8001764 <TaskWheel3+0xa8>)
 80016f6:	f006 fc8f 	bl	8008018 <PID_Update>
 80016fa:	ed87 0a03 	vstr	s0, [r7, #12]
	wheel3_out = wheel3_output;
 80016fe:	4a1b      	ldr	r2, [pc, #108]	@ (800176c <TaskWheel3+0xb0>)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6013      	str	r3, [r2, #0]
	int wheel3_pwm = (int)(fabs(wheel3_out) / 200.0f * PWM_MAX);
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <TaskWheel3+0xb0>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	eef0 7ae7 	vabs.f32	s15, s15
 800170e:	ee17 0a90 	vmov	r0, s15
 8001712:	f7fe fee1 	bl	80004d8 <__aeabi_f2d>
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <TaskWheel3+0xb4>)
 800171c:	f7ff f85e 	bl	80007dc <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <TaskWheel3+0xb8>)
 800172e:	f7fe ff2b 	bl	8000588 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff f937 	bl	80009ac <__aeabi_d2iz>
 800173e:	4603      	mov	r3, r0
 8001740:	617b      	str	r3, [r7, #20]
	if (wheel3_pwm > PWM_MAX) wheel3_pwm = PWM_MAX;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001748:	dd02      	ble.n	8001750 <TaskWheel3+0x94>
 800174a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174e:	617b      	str	r3, [r7, #20]
	Motor_SetSpeed(3,wheel3_pwm,wheel3_output);  // 設定 PWM duty
 8001750:	ed97 0a03 	vldr	s0, [r7, #12]
 8001754:	6979      	ldr	r1, [r7, #20]
 8001756:	2003      	movs	r0, #3
 8001758:	f001 fc44 	bl	8002fe4 <Motor_SetSpeed>
  {
 800175c:	e7b2      	b.n	80016c4 <TaskWheel3+0x8>
 800175e:	bf00      	nop
 8001760:	20000028 	.word	0x20000028
 8001764:	20000128 	.word	0x20000128
 8001768:	200001c0 	.word	0x200001c0
 800176c:	20000208 	.word	0x20000208
 8001770:	40690000 	.word	0x40690000
 8001774:	408f4000 	.word	0x408f4000

08001778 <TaskWheel4>:
  }
  /* USER CODE END 5 */
}

void TaskWheel4(void *argument)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	osSemaphoreAcquire(semWheelHandle, osWaitForever);
	uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	2100      	movs	r1, #0
 8001786:	2001      	movs	r0, #1
 8001788:	f002 fdf2 	bl	8004370 <osThreadFlagsWait>
 800178c:	4603      	mov	r3, r0
 800178e:	74fb      	strb	r3, [r7, #19]
	wheel4_speed = -wheel4_speed;
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <TaskWheel4+0xa4>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	eef1 7a67 	vneg.f32	s15, s15
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <TaskWheel4+0xa4>)
 800179c:	edc3 7a00 	vstr	s15, [r3]
	wheel4.term.Ref = wheel4_speed;
 80017a0:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <TaskWheel4+0xa4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <TaskWheel4+0xa8>)
 80017a6:	6213      	str	r3, [r2, #32]
	wheel4.term.Fbk = WheelSpeed.speed4;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <TaskWheel4+0xac>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001820 <TaskWheel4+0xa8>)
 80017ae:	6253      	str	r3, [r2, #36]	@ 0x24
	float wheel4_output = PID_Update(&wheel4);
 80017b0:	481b      	ldr	r0, [pc, #108]	@ (8001820 <TaskWheel4+0xa8>)
 80017b2:	f006 fc31 	bl	8008018 <PID_Update>
 80017b6:	ed87 0a03 	vstr	s0, [r7, #12]
	wheel4_out = wheel4_output;
 80017ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001828 <TaskWheel4+0xb0>)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6013      	str	r3, [r2, #0]
	int wheel4_pwm = (int)(fabs(wheel4_out) / 200.0f * PWM_MAX);
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <TaskWheel4+0xb0>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	eef0 7ae7 	vabs.f32	s15, s15
 80017ca:	ee17 0a90 	vmov	r0, s15
 80017ce:	f7fe fe83 	bl	80004d8 <__aeabi_f2d>
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <TaskWheel4+0xb4>)
 80017d8:	f7ff f800 	bl	80007dc <__aeabi_ddiv>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <TaskWheel4+0xb8>)
 80017ea:	f7fe fecd 	bl	8000588 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff f8d9 	bl	80009ac <__aeabi_d2iz>
 80017fa:	4603      	mov	r3, r0
 80017fc:	617b      	str	r3, [r7, #20]
	if (wheel4_pwm > PWM_MAX) wheel4_pwm = PWM_MAX;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001804:	dd02      	ble.n	800180c <TaskWheel4+0x94>
 8001806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180a:	617b      	str	r3, [r7, #20]
	Motor_SetSpeed(4,wheel4_pwm,wheel4_output);  // 設定 PWM duty
 800180c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001810:	6979      	ldr	r1, [r7, #20]
 8001812:	2004      	movs	r0, #4
 8001814:	f001 fbe6 	bl	8002fe4 <Motor_SetSpeed>
  {
 8001818:	e7b2      	b.n	8001780 <TaskWheel4+0x8>
 800181a:	bf00      	nop
 800181c:	2000002c 	.word	0x2000002c
 8001820:	20000174 	.word	0x20000174
 8001824:	200001c0 	.word	0x200001c0
 8001828:	2000021c 	.word	0x2000021c
 800182c:	40690000 	.word	0x40690000
 8001830:	408f4000 	.word	0x408f4000

08001834 <TaskEncoder>:

  }
  /* USER CODE END 5 */
}
void TaskEncoder(void *argument)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(JoinStickFlag == 1 && FirstJoint == 1)
 800183c:	4b90      	ldr	r3, [pc, #576]	@ (8001a80 <TaskEncoder+0x24c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d113      	bne.n	800186c <TaskEncoder+0x38>
 8001844:	4b8f      	ldr	r3, [pc, #572]	@ (8001a84 <TaskEncoder+0x250>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10f      	bne.n	800186c <TaskEncoder+0x38>
	{
		Vx_central = JoinStick[0];
 800184c:	4b8e      	ldr	r3, [pc, #568]	@ (8001a88 <TaskEncoder+0x254>)
 800184e:	881a      	ldrh	r2, [r3, #0]
 8001850:	4b8e      	ldr	r3, [pc, #568]	@ (8001a8c <TaskEncoder+0x258>)
 8001852:	801a      	strh	r2, [r3, #0]
		Vy_central = JoinStick[1];
 8001854:	4b8c      	ldr	r3, [pc, #560]	@ (8001a88 <TaskEncoder+0x254>)
 8001856:	885a      	ldrh	r2, [r3, #2]
 8001858:	4b8d      	ldr	r3, [pc, #564]	@ (8001a90 <TaskEncoder+0x25c>)
 800185a:	801a      	strh	r2, [r3, #0]
		Wz_central = JoinStick[2];
 800185c:	4b8a      	ldr	r3, [pc, #552]	@ (8001a88 <TaskEncoder+0x254>)
 800185e:	889a      	ldrh	r2, [r3, #4]
 8001860:	4b8c      	ldr	r3, [pc, #560]	@ (8001a94 <TaskEncoder+0x260>)
 8001862:	801a      	strh	r2, [r3, #0]
		FirstJoint = 0;
 8001864:	4b87      	ldr	r3, [pc, #540]	@ (8001a84 <TaskEncoder+0x250>)
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e107      	b.n	8001a7c <TaskEncoder+0x248>
	}
	else if(FirstJoint == 0)
 800186c:	4b85      	ldr	r3, [pc, #532]	@ (8001a84 <TaskEncoder+0x250>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e3      	bne.n	800183c <TaskEncoder+0x8>
	{
		osSemaphoreAcquire(semEncoderHandle, osWaitForever);
 8001874:	4b88      	ldr	r3, [pc, #544]	@ (8001a98 <TaskEncoder+0x264>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	4618      	mov	r0, r3
 800187e:	f002 ff8f 	bl	80047a0 <osSemaphoreAcquire>
		Serial_SendByte(0x01);
 8001882:	2001      	movs	r0, #1
 8001884:	f002 f99e 	bl	8003bc4 <Serial_SendByte>

		osMutexAcquire(EncoderMutex, osWaitForever);  // 獲取 Mutex
 8001888:	4b84      	ldr	r3, [pc, #528]	@ (8001a9c <TaskEncoder+0x268>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	4618      	mov	r0, r3
 8001892:	f002 fe74 	bl	800457e <osMutexAcquire>
		EncoderSpeed();
 8001896:	f7ff fd27 	bl	80012e8 <EncoderSpeed>
		osMutexRelease(EncoderMutex);  // 釋放 Mutex
 800189a:	4b80      	ldr	r3, [pc, #512]	@ (8001a9c <TaskEncoder+0x268>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 feb8 	bl	8004614 <osMutexRelease>

		osMutexAcquire(HC05Mutex, osWaitForever);  // 獲取 Mutex
 80018a4:	4b7e      	ldr	r3, [pc, #504]	@ (8001aa0 <TaskEncoder+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fe66 	bl	800457e <osMutexAcquire>
		Vx = -((float)(JoinStick[0] - Vx_central) / (float)Vx_central) * max_Lspeed;
 80018b2:	4b75      	ldr	r3, [pc, #468]	@ (8001a88 <TaskEncoder+0x254>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b74      	ldr	r3, [pc, #464]	@ (8001a8c <TaskEncoder+0x258>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	ee07 3a90 	vmov	s15, r3
 80018c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018c6:	4b71      	ldr	r3, [pc, #452]	@ (8001a8c <TaskEncoder+0x258>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	ee07 3a90 	vmov	s15, r3
 80018ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d6:	eeb1 7a67 	vneg.f32	s14, s15
 80018da:	4b72      	ldr	r3, [pc, #456]	@ (8001aa4 <TaskEncoder+0x270>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e4:	4b70      	ldr	r3, [pc, #448]	@ (8001aa8 <TaskEncoder+0x274>)
 80018e6:	edc3 7a00 	vstr	s15, [r3]
		Vy =  ((float)(JoinStick[1] - Vy_central) / (float)Vy_central) * max_Lspeed;
 80018ea:	4b67      	ldr	r3, [pc, #412]	@ (8001a88 <TaskEncoder+0x254>)
 80018ec:	885b      	ldrh	r3, [r3, #2]
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b67      	ldr	r3, [pc, #412]	@ (8001a90 <TaskEncoder+0x25c>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018fe:	4b64      	ldr	r3, [pc, #400]	@ (8001a90 <TaskEncoder+0x25c>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800190a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800190e:	4b65      	ldr	r3, [pc, #404]	@ (8001aa4 <TaskEncoder+0x270>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001918:	4b64      	ldr	r3, [pc, #400]	@ (8001aac <TaskEncoder+0x278>)
 800191a:	edc3 7a00 	vstr	s15, [r3]


		if( (JoinStick[2] - Wz_central) > -1000 && (JoinStick[2] - Wz_central) < 1000 )
 800191e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a88 <TaskEncoder+0x254>)
 8001920:	889b      	ldrh	r3, [r3, #4]
 8001922:	461a      	mov	r2, r3
 8001924:	4b5b      	ldr	r3, [pc, #364]	@ (8001a94 <TaskEncoder+0x260>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800192e:	dd0d      	ble.n	800194c <TaskEncoder+0x118>
 8001930:	4b55      	ldr	r3, [pc, #340]	@ (8001a88 <TaskEncoder+0x254>)
 8001932:	889b      	ldrh	r3, [r3, #4]
 8001934:	461a      	mov	r2, r3
 8001936:	4b57      	ldr	r3, [pc, #348]	@ (8001a94 <TaskEncoder+0x260>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001940:	da04      	bge.n	800194c <TaskEncoder+0x118>
			Wz = 0;
 8001942:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab0 <TaskEncoder+0x27c>)
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e019      	b.n	8001980 <TaskEncoder+0x14c>
		else
			Wz =  ((float)(JoinStick[2] - Wz_central) / (float)Wz_central) * max_Rspeed;
 800194c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a88 <TaskEncoder+0x254>)
 800194e:	889b      	ldrh	r3, [r3, #4]
 8001950:	461a      	mov	r2, r3
 8001952:	4b50      	ldr	r3, [pc, #320]	@ (8001a94 <TaskEncoder+0x260>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	ee07 3a90 	vmov	s15, r3
 800195c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001960:	4b4c      	ldr	r3, [pc, #304]	@ (8001a94 <TaskEncoder+0x260>)
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001970:	4b50      	ldr	r3, [pc, #320]	@ (8001ab4 <TaskEncoder+0x280>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab0 <TaskEncoder+0x27c>)
 800197c:	edc3 7a00 	vstr	s15, [r3]

		Wz = -Wz;
 8001980:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab0 <TaskEncoder+0x27c>)
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	eef1 7a67 	vneg.f32	s15, s15
 800198a:	4b49      	ldr	r3, [pc, #292]	@ (8001ab0 <TaskEncoder+0x27c>)
 800198c:	edc3 7a00 	vstr	s15, [r3]
		osMutexRelease(HC05Mutex);  // 釋放 Mutex
 8001990:	4b43      	ldr	r3, [pc, #268]	@ (8001aa0 <TaskEncoder+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 fe3d 	bl	8004614 <osMutexRelease>

		x ++;
 800199a:	4b47      	ldr	r3, [pc, #284]	@ (8001ab8 <TaskEncoder+0x284>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	4a45      	ldr	r2, [pc, #276]	@ (8001ab8 <TaskEncoder+0x284>)
 80019a2:	6013      	str	r3, [r2, #0]

		wheel1_speed = Vx + Vy + alpha * Wz; //front right
 80019a4:	4b40      	ldr	r3, [pc, #256]	@ (8001aa8 <TaskEncoder+0x274>)
 80019a6:	ed93 7a00 	vldr	s14, [r3]
 80019aa:	4b40      	ldr	r3, [pc, #256]	@ (8001aac <TaskEncoder+0x278>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b4:	4b41      	ldr	r3, [pc, #260]	@ (8001abc <TaskEncoder+0x288>)
 80019b6:	edd3 6a00 	vldr	s13, [r3]
 80019ba:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <TaskEncoder+0x27c>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac0 <TaskEncoder+0x28c>)
 80019ca:	edc3 7a00 	vstr	s15, [r3]
		wheel2_speed = Vx - Vy - alpha * Wz; //front left
 80019ce:	4b36      	ldr	r3, [pc, #216]	@ (8001aa8 <TaskEncoder+0x274>)
 80019d0:	ed93 7a00 	vldr	s14, [r3]
 80019d4:	4b35      	ldr	r3, [pc, #212]	@ (8001aac <TaskEncoder+0x278>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019de:	4b37      	ldr	r3, [pc, #220]	@ (8001abc <TaskEncoder+0x288>)
 80019e0:	edd3 6a00 	vldr	s13, [r3]
 80019e4:	4b32      	ldr	r3, [pc, #200]	@ (8001ab0 <TaskEncoder+0x27c>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f2:	4b34      	ldr	r3, [pc, #208]	@ (8001ac4 <TaskEncoder+0x290>)
 80019f4:	edc3 7a00 	vstr	s15, [r3]
		wheel3_speed = Vx + Vy - alpha * Wz; //rear  left
 80019f8:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa8 <TaskEncoder+0x274>)
 80019fa:	ed93 7a00 	vldr	s14, [r3]
 80019fe:	4b2b      	ldr	r3, [pc, #172]	@ (8001aac <TaskEncoder+0x278>)
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a08:	4b2c      	ldr	r3, [pc, #176]	@ (8001abc <TaskEncoder+0x288>)
 8001a0a:	edd3 6a00 	vldr	s13, [r3]
 8001a0e:	4b28      	ldr	r3, [pc, #160]	@ (8001ab0 <TaskEncoder+0x27c>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <TaskEncoder+0x294>)
 8001a1e:	edc3 7a00 	vstr	s15, [r3]
		wheel4_speed = Vx - Vy + alpha * Wz; //rear  right
 8001a22:	4b21      	ldr	r3, [pc, #132]	@ (8001aa8 <TaskEncoder+0x274>)
 8001a24:	ed93 7a00 	vldr	s14, [r3]
 8001a28:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <TaskEncoder+0x278>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a32:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <TaskEncoder+0x288>)
 8001a34:	edd3 6a00 	vldr	s13, [r3]
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <TaskEncoder+0x27c>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a46:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <TaskEncoder+0x298>)
 8001a48:	edc3 7a00 	vstr	s15, [r3]


		osThreadFlagsSet(TaskWheel1Handle,0x01);
 8001a4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <TaskEncoder+0x29c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2101      	movs	r1, #1
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 fc3e 	bl	80042d4 <osThreadFlagsSet>
		osThreadFlagsSet(TaskWheel2Handle,0x01);
 8001a58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <TaskEncoder+0x2a0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 fc38 	bl	80042d4 <osThreadFlagsSet>
		osThreadFlagsSet(TaskWheel3Handle,0x01);
 8001a64:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <TaskEncoder+0x2a4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fc32 	bl	80042d4 <osThreadFlagsSet>
		osThreadFlagsSet(TaskWheel4Handle,0x01);
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <TaskEncoder+0x2a8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 fc2c 	bl	80042d4 <osThreadFlagsSet>
	if(JoinStickFlag == 1 && FirstJoint == 1)
 8001a7c:	e6de      	b.n	800183c <TaskEncoder+0x8>
 8001a7e:	bf00      	nop
 8001a80:	20000252 	.word	0x20000252
 8001a84:	20000034 	.word	0x20000034
 8001a88:	2000024c 	.word	0x2000024c
 8001a8c:	20000230 	.word	0x20000230
 8001a90:	20000232 	.word	0x20000232
 8001a94:	20000234 	.word	0x20000234
 8001a98:	20000080 	.word	0x20000080
 8001a9c:	20000088 	.word	0x20000088
 8001aa0:	2000008c 	.word	0x2000008c
 8001aa4:	20000038 	.word	0x20000038
 8001aa8:	20000224 	.word	0x20000224
 8001aac:	20000228 	.word	0x20000228
 8001ab0:	2000022c 	.word	0x2000022c
 8001ab4:	2000003c 	.word	0x2000003c
 8001ab8:	20000220 	.word	0x20000220
 8001abc:	20000030 	.word	0x20000030
 8001ac0:	20000020 	.word	0x20000020
 8001ac4:	20000024 	.word	0x20000024
 8001ac8:	20000028 	.word	0x20000028
 8001acc:	2000002c 	.word	0x2000002c
 8001ad0:	2000006c 	.word	0x2000006c
 8001ad4:	20000070 	.word	0x20000070
 8001ad8:	20000074 	.word	0x20000074
 8001adc:	20000078 	.word	0x20000078

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <Error_Handler+0x8>

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <HAL_MspInit+0x54>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <HAL_MspInit+0x54>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_MspInit+0x54>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_MspInit+0x54>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <HAL_MspInit+0x54>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <HAL_MspInit+0x54>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	f06f 0001 	mvn.w	r0, #1
 8001b32:	f000 f99a 	bl	8001e6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <NMI_Handler+0x4>

08001b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <HardFault_Handler+0x4>

08001b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <MemManage_Handler+0x4>

08001b5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <BusFault_Handler+0x4>

08001b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <UsageFault_Handler+0x4>

08001b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7e:	f000 f897 	bl	8001cb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b82:	f004 fe73 	bl	800686c <xTaskGetSchedulerState>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d001      	beq.n	8001b90 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b8c:	f005 ff5c 	bl	8007a48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <SystemInit+0x20>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b9e:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <SystemInit+0x20>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bbc:	f7ff ffea 	bl	8001b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bc0:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bc2:	490d      	ldr	r1, [pc, #52]	@ (8001bf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001be6:	f006 fac1 	bl	800816c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bea:	f7ff f8d1 	bl	8000d90 <main>
  bx  lr    
 8001bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8001bfc:	08008a20 	.word	0x08008a20
  ldr r2, =_sbss
 8001c00:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001c04:	20004ba8 	.word	0x20004ba8

08001c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c10:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	@ (8001c4c <HAL_Init+0x40>)
 8001c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <HAL_Init+0x40>)
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a07      	ldr	r2, [pc, #28]	@ (8001c4c <HAL_Init+0x40>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f000 f90d 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3a:	200f      	movs	r0, #15
 8001c3c:	f000 f808 	bl	8001c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c40:	f7ff ff54 	bl	8001aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c58:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <HAL_InitTick+0x54>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <HAL_InitTick+0x58>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f917 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00e      	b.n	8001c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b0f      	cmp	r3, #15
 8001c82:	d80a      	bhi.n	8001c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c84:	2200      	movs	r2, #0
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f000 f8ed 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c90:	4a06      	ldr	r2, [pc, #24]	@ (8001cac <HAL_InitTick+0x5c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000040 	.word	0x20000040
 8001ca8:	20000048 	.word	0x20000048
 8001cac:	20000044 	.word	0x20000044

08001cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_IncTick+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4a04      	ldr	r2, [pc, #16]	@ (8001cd4 <HAL_IncTick+0x24>)
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000048 	.word	0x20000048
 8001cd4:	20000238 	.word	0x20000238

08001cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <HAL_GetTick+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000238 	.word	0x20000238

08001cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d22:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d3c:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <__NVIC_GetPriorityGrouping+0x18>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 0307 	and.w	r3, r3, #7
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	@ (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	@ (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	@ 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f1c3 0307 	rsb	r3, r3, #7
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf28      	it	cs
 8001dc6:	2304      	movcs	r3, #4
 8001dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d902      	bls.n	8001dd8 <NVIC_EncodePriority+0x30>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b03      	subs	r3, #3
 8001dd6:	e000      	b.n	8001dda <NVIC_EncodePriority+0x32>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	4313      	orrs	r3, r2
         );
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	@ 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff8e 	bl	8001d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff47 	bl	8001cf0 <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff5c 	bl	8001d38 <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff8e 	bl	8001da8 <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5d 	bl	8001d54 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffb0 	bl	8001e10 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	@ 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	e165      	b.n	80021a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 8154 	bne.w	800219e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d005      	beq.n	8001f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d130      	bne.n	8001f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 0201 	and.w	r2, r3, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d017      	beq.n	8001fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d123      	bne.n	8002000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	08da      	lsrs	r2, r3, #3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3208      	adds	r2, #8
 8001fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	08da      	lsrs	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3208      	adds	r2, #8
 8001ffa:	69b9      	ldr	r1, [r7, #24]
 8001ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0203 	and.w	r2, r3, #3
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80ae 	beq.w	800219e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b5d      	ldr	r3, [pc, #372]	@ (80021bc <HAL_GPIO_Init+0x300>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	4a5c      	ldr	r2, [pc, #368]	@ (80021bc <HAL_GPIO_Init+0x300>)
 800204c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002050:	6453      	str	r3, [r2, #68]	@ 0x44
 8002052:	4b5a      	ldr	r3, [pc, #360]	@ (80021bc <HAL_GPIO_Init+0x300>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205e:	4a58      	ldr	r2, [pc, #352]	@ (80021c0 <HAL_GPIO_Init+0x304>)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4f      	ldr	r2, [pc, #316]	@ (80021c4 <HAL_GPIO_Init+0x308>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d025      	beq.n	80020d6 <HAL_GPIO_Init+0x21a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4e      	ldr	r2, [pc, #312]	@ (80021c8 <HAL_GPIO_Init+0x30c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_GPIO_Init+0x216>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4d      	ldr	r2, [pc, #308]	@ (80021cc <HAL_GPIO_Init+0x310>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <HAL_GPIO_Init+0x212>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4c      	ldr	r2, [pc, #304]	@ (80021d0 <HAL_GPIO_Init+0x314>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x20e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4b      	ldr	r2, [pc, #300]	@ (80021d4 <HAL_GPIO_Init+0x318>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x20a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4a      	ldr	r2, [pc, #296]	@ (80021d8 <HAL_GPIO_Init+0x31c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x206>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a49      	ldr	r2, [pc, #292]	@ (80021dc <HAL_GPIO_Init+0x320>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x202>
 80020ba:	2306      	movs	r3, #6
 80020bc:	e00c      	b.n	80020d8 <HAL_GPIO_Init+0x21c>
 80020be:	2307      	movs	r3, #7
 80020c0:	e00a      	b.n	80020d8 <HAL_GPIO_Init+0x21c>
 80020c2:	2305      	movs	r3, #5
 80020c4:	e008      	b.n	80020d8 <HAL_GPIO_Init+0x21c>
 80020c6:	2304      	movs	r3, #4
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x21c>
 80020ca:	2303      	movs	r3, #3
 80020cc:	e004      	b.n	80020d8 <HAL_GPIO_Init+0x21c>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_Init+0x21c>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_Init+0x21c>
 80020d6:	2300      	movs	r3, #0
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	f002 0203 	and.w	r2, r2, #3
 80020de:	0092      	lsls	r2, r2, #2
 80020e0:	4093      	lsls	r3, r2
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e8:	4935      	ldr	r1, [pc, #212]	@ (80021c0 <HAL_GPIO_Init+0x304>)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f6:	4b3a      	ldr	r3, [pc, #232]	@ (80021e0 <HAL_GPIO_Init+0x324>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211a:	4a31      	ldr	r2, [pc, #196]	@ (80021e0 <HAL_GPIO_Init+0x324>)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002120:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <HAL_GPIO_Init+0x324>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002144:	4a26      	ldr	r2, [pc, #152]	@ (80021e0 <HAL_GPIO_Init+0x324>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214a:	4b25      	ldr	r3, [pc, #148]	@ (80021e0 <HAL_GPIO_Init+0x324>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216e:	4a1c      	ldr	r2, [pc, #112]	@ (80021e0 <HAL_GPIO_Init+0x324>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002174:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <HAL_GPIO_Init+0x324>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002198:	4a11      	ldr	r2, [pc, #68]	@ (80021e0 <HAL_GPIO_Init+0x324>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b0f      	cmp	r3, #15
 80021a8:	f67f ae96 	bls.w	8001ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3724      	adds	r7, #36	@ 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40013800 	.word	0x40013800
 80021c4:	40020000 	.word	0x40020000
 80021c8:	40020400 	.word	0x40020400
 80021cc:	40020800 	.word	0x40020800
 80021d0:	40020c00 	.word	0x40020c00
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40021400 	.word	0x40021400
 80021dc:	40021800 	.word	0x40021800
 80021e0:	40013c00 	.word	0x40013c00

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002200:	e003      	b.n	800220a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002202:	887b      	ldrh	r3, [r7, #2]
 8002204:	041a      	lsls	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	619a      	str	r2, [r3, #24]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0cc      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b68      	ldr	r3, [pc, #416]	@ (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d90c      	bls.n	8002254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b65      	ldr	r3, [pc, #404]	@ (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b63      	ldr	r3, [pc, #396]	@ (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0b8      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800226c:	4b59      	ldr	r3, [pc, #356]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a58      	ldr	r2, [pc, #352]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002276:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002284:	4b53      	ldr	r3, [pc, #332]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a52      	ldr	r2, [pc, #328]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800228e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b50      	ldr	r3, [pc, #320]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	494d      	ldr	r1, [pc, #308]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d044      	beq.n	8002338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b47      	ldr	r3, [pc, #284]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d119      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d003      	beq.n	80022d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b3f      	ldr	r3, [pc, #252]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e06f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	4b3b      	ldr	r3, [pc, #236]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e067      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f6:	4b37      	ldr	r3, [pc, #220]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4934      	ldr	r1, [pc, #208]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	4313      	orrs	r3, r2
 8002306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002308:	f7ff fce6 	bl	8001cd8 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	e00a      	b.n	8002326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7ff fce2 	bl	8001cd8 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e04f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	4b2b      	ldr	r3, [pc, #172]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 020c 	and.w	r2, r3, #12
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d1eb      	bne.n	8002310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002338:	4b25      	ldr	r3, [pc, #148]	@ (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d20c      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b22      	ldr	r3, [pc, #136]	@ (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b20      	ldr	r3, [pc, #128]	@ (80023d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e032      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236c:	4b19      	ldr	r3, [pc, #100]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4916      	ldr	r1, [pc, #88]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238a:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	490e      	ldr	r1, [pc, #56]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800239e:	f000 f821 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	490a      	ldr	r1, [pc, #40]	@ (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	5ccb      	ldrb	r3, [r1, r3]
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	4a09      	ldr	r2, [pc, #36]	@ (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023ba:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fc46 	bl	8001c50 <HAL_InitTick>

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00
 80023d4:	40023800 	.word	0x40023800
 80023d8:	08008410 	.word	0x08008410
 80023dc:	20000040 	.word	0x20000040
 80023e0:	20000044 	.word	0x20000044

080023e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e8:	b0ae      	sub	sp, #184	@ 0xb8
 80023ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800240a:	4bcb      	ldr	r3, [pc, #812]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b0c      	cmp	r3, #12
 8002414:	f200 8206 	bhi.w	8002824 <HAL_RCC_GetSysClockFreq+0x440>
 8002418:	a201      	add	r2, pc, #4	@ (adr r2, 8002420 <HAL_RCC_GetSysClockFreq+0x3c>)
 800241a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241e:	bf00      	nop
 8002420:	08002455 	.word	0x08002455
 8002424:	08002825 	.word	0x08002825
 8002428:	08002825 	.word	0x08002825
 800242c:	08002825 	.word	0x08002825
 8002430:	0800245d 	.word	0x0800245d
 8002434:	08002825 	.word	0x08002825
 8002438:	08002825 	.word	0x08002825
 800243c:	08002825 	.word	0x08002825
 8002440:	08002465 	.word	0x08002465
 8002444:	08002825 	.word	0x08002825
 8002448:	08002825 	.word	0x08002825
 800244c:	08002825 	.word	0x08002825
 8002450:	08002655 	.word	0x08002655
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002454:	4bb9      	ldr	r3, [pc, #740]	@ (800273c <HAL_RCC_GetSysClockFreq+0x358>)
 8002456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800245a:	e1e7      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800245c:	4bb8      	ldr	r3, [pc, #736]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x35c>)
 800245e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002462:	e1e3      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002464:	4bb4      	ldr	r3, [pc, #720]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800246c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002470:	4bb1      	ldr	r3, [pc, #708]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d071      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247c:	4bae      	ldr	r3, [pc, #696]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	2200      	movs	r2, #0
 8002484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002488:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800248c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002494:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800249e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80024a2:	4622      	mov	r2, r4
 80024a4:	462b      	mov	r3, r5
 80024a6:	f04f 0000 	mov.w	r0, #0
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	0159      	lsls	r1, r3, #5
 80024b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b4:	0150      	lsls	r0, r2, #5
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4621      	mov	r1, r4
 80024bc:	1a51      	subs	r1, r2, r1
 80024be:	6439      	str	r1, [r7, #64]	@ 0x40
 80024c0:	4629      	mov	r1, r5
 80024c2:	eb63 0301 	sbc.w	r3, r3, r1
 80024c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80024d4:	4649      	mov	r1, r9
 80024d6:	018b      	lsls	r3, r1, #6
 80024d8:	4641      	mov	r1, r8
 80024da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024de:	4641      	mov	r1, r8
 80024e0:	018a      	lsls	r2, r1, #6
 80024e2:	4641      	mov	r1, r8
 80024e4:	1a51      	subs	r1, r2, r1
 80024e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024e8:	4649      	mov	r1, r9
 80024ea:	eb63 0301 	sbc.w	r3, r3, r1
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80024fc:	4649      	mov	r1, r9
 80024fe:	00cb      	lsls	r3, r1, #3
 8002500:	4641      	mov	r1, r8
 8002502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002506:	4641      	mov	r1, r8
 8002508:	00ca      	lsls	r2, r1, #3
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	4603      	mov	r3, r0
 8002510:	4622      	mov	r2, r4
 8002512:	189b      	adds	r3, r3, r2
 8002514:	633b      	str	r3, [r7, #48]	@ 0x30
 8002516:	462b      	mov	r3, r5
 8002518:	460a      	mov	r2, r1
 800251a:	eb42 0303 	adc.w	r3, r2, r3
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800252c:	4629      	mov	r1, r5
 800252e:	024b      	lsls	r3, r1, #9
 8002530:	4621      	mov	r1, r4
 8002532:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002536:	4621      	mov	r1, r4
 8002538:	024a      	lsls	r2, r1, #9
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002542:	2200      	movs	r2, #0
 8002544:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002548:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800254c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002550:	f7fe faa4 	bl	8000a9c <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4613      	mov	r3, r2
 800255a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800255e:	e067      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002560:	4b75      	ldr	r3, [pc, #468]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	2200      	movs	r2, #0
 8002568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800256c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002570:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002578:	67bb      	str	r3, [r7, #120]	@ 0x78
 800257a:	2300      	movs	r3, #0
 800257c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800257e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002582:	4622      	mov	r2, r4
 8002584:	462b      	mov	r3, r5
 8002586:	f04f 0000 	mov.w	r0, #0
 800258a:	f04f 0100 	mov.w	r1, #0
 800258e:	0159      	lsls	r1, r3, #5
 8002590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002594:	0150      	lsls	r0, r2, #5
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4621      	mov	r1, r4
 800259c:	1a51      	subs	r1, r2, r1
 800259e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80025a0:	4629      	mov	r1, r5
 80025a2:	eb63 0301 	sbc.w	r3, r3, r1
 80025a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80025b4:	4649      	mov	r1, r9
 80025b6:	018b      	lsls	r3, r1, #6
 80025b8:	4641      	mov	r1, r8
 80025ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025be:	4641      	mov	r1, r8
 80025c0:	018a      	lsls	r2, r1, #6
 80025c2:	4641      	mov	r1, r8
 80025c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80025c8:	4649      	mov	r1, r9
 80025ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025e2:	4692      	mov	sl, r2
 80025e4:	469b      	mov	fp, r3
 80025e6:	4623      	mov	r3, r4
 80025e8:	eb1a 0303 	adds.w	r3, sl, r3
 80025ec:	623b      	str	r3, [r7, #32]
 80025ee:	462b      	mov	r3, r5
 80025f0:	eb4b 0303 	adc.w	r3, fp, r3
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002602:	4629      	mov	r1, r5
 8002604:	028b      	lsls	r3, r1, #10
 8002606:	4621      	mov	r1, r4
 8002608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800260c:	4621      	mov	r1, r4
 800260e:	028a      	lsls	r2, r1, #10
 8002610:	4610      	mov	r0, r2
 8002612:	4619      	mov	r1, r3
 8002614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002618:	2200      	movs	r2, #0
 800261a:	673b      	str	r3, [r7, #112]	@ 0x70
 800261c:	677a      	str	r2, [r7, #116]	@ 0x74
 800261e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002622:	f7fe fa3b 	bl	8000a9c <__aeabi_uldivmod>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4613      	mov	r3, r2
 800262c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002630:	4b41      	ldr	r3, [pc, #260]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002652:	e0eb      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002654:	4b38      	ldr	r3, [pc, #224]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800265c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002660:	4b35      	ldr	r3, [pc, #212]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d06b      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266c:	4b32      	ldr	r3, [pc, #200]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x354>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	2200      	movs	r2, #0
 8002674:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002676:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800267a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002680:	2300      	movs	r3, #0
 8002682:	667b      	str	r3, [r7, #100]	@ 0x64
 8002684:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002688:	4622      	mov	r2, r4
 800268a:	462b      	mov	r3, r5
 800268c:	f04f 0000 	mov.w	r0, #0
 8002690:	f04f 0100 	mov.w	r1, #0
 8002694:	0159      	lsls	r1, r3, #5
 8002696:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800269a:	0150      	lsls	r0, r2, #5
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4621      	mov	r1, r4
 80026a2:	1a51      	subs	r1, r2, r1
 80026a4:	61b9      	str	r1, [r7, #24]
 80026a6:	4629      	mov	r1, r5
 80026a8:	eb63 0301 	sbc.w	r3, r3, r1
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026ba:	4659      	mov	r1, fp
 80026bc:	018b      	lsls	r3, r1, #6
 80026be:	4651      	mov	r1, sl
 80026c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026c4:	4651      	mov	r1, sl
 80026c6:	018a      	lsls	r2, r1, #6
 80026c8:	4651      	mov	r1, sl
 80026ca:	ebb2 0801 	subs.w	r8, r2, r1
 80026ce:	4659      	mov	r1, fp
 80026d0:	eb63 0901 	sbc.w	r9, r3, r1
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e8:	4690      	mov	r8, r2
 80026ea:	4699      	mov	r9, r3
 80026ec:	4623      	mov	r3, r4
 80026ee:	eb18 0303 	adds.w	r3, r8, r3
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	462b      	mov	r3, r5
 80026f6:	eb49 0303 	adc.w	r3, r9, r3
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002708:	4629      	mov	r1, r5
 800270a:	024b      	lsls	r3, r1, #9
 800270c:	4621      	mov	r1, r4
 800270e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002712:	4621      	mov	r1, r4
 8002714:	024a      	lsls	r2, r1, #9
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800271e:	2200      	movs	r2, #0
 8002720:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002722:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002724:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002728:	f7fe f9b8 	bl	8000a9c <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4613      	mov	r3, r2
 8002732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002736:	e065      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x420>
 8002738:	40023800 	.word	0x40023800
 800273c:	00f42400 	.word	0x00f42400
 8002740:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002744:	4b3d      	ldr	r3, [pc, #244]	@ (800283c <HAL_RCC_GetSysClockFreq+0x458>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	2200      	movs	r2, #0
 800274c:	4618      	mov	r0, r3
 800274e:	4611      	mov	r1, r2
 8002750:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002754:	653b      	str	r3, [r7, #80]	@ 0x50
 8002756:	2300      	movs	r3, #0
 8002758:	657b      	str	r3, [r7, #84]	@ 0x54
 800275a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800275e:	4642      	mov	r2, r8
 8002760:	464b      	mov	r3, r9
 8002762:	f04f 0000 	mov.w	r0, #0
 8002766:	f04f 0100 	mov.w	r1, #0
 800276a:	0159      	lsls	r1, r3, #5
 800276c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002770:	0150      	lsls	r0, r2, #5
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4641      	mov	r1, r8
 8002778:	1a51      	subs	r1, r2, r1
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	4649      	mov	r1, r9
 800277e:	eb63 0301 	sbc.w	r3, r3, r1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002790:	4659      	mov	r1, fp
 8002792:	018b      	lsls	r3, r1, #6
 8002794:	4651      	mov	r1, sl
 8002796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800279a:	4651      	mov	r1, sl
 800279c:	018a      	lsls	r2, r1, #6
 800279e:	4651      	mov	r1, sl
 80027a0:	1a54      	subs	r4, r2, r1
 80027a2:	4659      	mov	r1, fp
 80027a4:	eb63 0501 	sbc.w	r5, r3, r1
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	00eb      	lsls	r3, r5, #3
 80027b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b6:	00e2      	lsls	r2, r4, #3
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	18e3      	adds	r3, r4, r3
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	464b      	mov	r3, r9
 80027c4:	eb45 0303 	adc.w	r3, r5, r3
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027d6:	4629      	mov	r1, r5
 80027d8:	028b      	lsls	r3, r1, #10
 80027da:	4621      	mov	r1, r4
 80027dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e0:	4621      	mov	r1, r4
 80027e2:	028a      	lsls	r2, r1, #10
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027ec:	2200      	movs	r2, #0
 80027ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027f6:	f7fe f951 	bl	8000a9c <__aeabi_uldivmod>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4613      	mov	r3, r2
 8002800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002804:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <HAL_RCC_GetSysClockFreq+0x458>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	0f1b      	lsrs	r3, r3, #28
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002822:	e003      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800282a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002830:	4618      	mov	r0, r3
 8002832:	37b8      	adds	r7, #184	@ 0xb8
 8002834:	46bd      	mov	sp, r7
 8002836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	00f42400 	.word	0x00f42400

08002844 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e28d      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8083 	beq.w	800296a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002864:	4b94      	ldr	r3, [pc, #592]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b04      	cmp	r3, #4
 800286e:	d019      	beq.n	80028a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002870:	4b91      	ldr	r3, [pc, #580]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
        || \
 8002878:	2b08      	cmp	r3, #8
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800287c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002888:	d00c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800288a:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002892:	2b0c      	cmp	r3, #12
 8002894:	d112      	bne.n	80028bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002896:	4b88      	ldr	r3, [pc, #544]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800289e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028a2:	d10b      	bne.n	80028bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	4b84      	ldr	r3, [pc, #528]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d05b      	beq.n	8002968 <HAL_RCC_OscConfig+0x124>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d157      	bne.n	8002968 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e25a      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c4:	d106      	bne.n	80028d4 <HAL_RCC_OscConfig+0x90>
 80028c6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a7b      	ldr	r2, [pc, #492]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e01d      	b.n	8002910 <HAL_RCC_OscConfig+0xcc>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0xb4>
 80028de:	4b76      	ldr	r3, [pc, #472]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a75      	ldr	r2, [pc, #468]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b73      	ldr	r3, [pc, #460]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a72      	ldr	r2, [pc, #456]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	e00b      	b.n	8002910 <HAL_RCC_OscConfig+0xcc>
 80028f8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6e      	ldr	r2, [pc, #440]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80028fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800290a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800290e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d013      	beq.n	8002940 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7ff f9de 	bl	8001cd8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7ff f9da 	bl	8001cd8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	@ 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e21f      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b61      	ldr	r3, [pc, #388]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0xdc>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7ff f9ca 	bl	8001cd8 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7ff f9c6 	bl	8001cd8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	@ 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e20b      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	4b57      	ldr	r3, [pc, #348]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x104>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d06f      	beq.n	8002a56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002976:	4b50      	ldr	r3, [pc, #320]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b00      	cmp	r3, #0
 8002980:	d017      	beq.n	80029b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002982:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
        || \
 800298a:	2b08      	cmp	r3, #8
 800298c:	d105      	bne.n	800299a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800298e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299a:	4b47      	ldr	r3, [pc, #284]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d11c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a6:	4b44      	ldr	r3, [pc, #272]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d116      	bne.n	80029e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_RCC_OscConfig+0x186>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e1d3      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4937      	ldr	r1, [pc, #220]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	e03a      	b.n	8002a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e8:	4b34      	ldr	r3, [pc, #208]	@ (8002abc <HAL_RCC_OscConfig+0x278>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7ff f973 	bl	8001cd8 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f6:	f7ff f96f 	bl	8001cd8 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1b4      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	4b2b      	ldr	r3, [pc, #172]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b28      	ldr	r3, [pc, #160]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4925      	ldr	r1, [pc, #148]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e015      	b.n	8002a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2a:	4b24      	ldr	r3, [pc, #144]	@ (8002abc <HAL_RCC_OscConfig+0x278>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7ff f952 	bl	8001cd8 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a38:	f7ff f94e 	bl	8001cd8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e193      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d036      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4b15      	ldr	r3, [pc, #84]	@ (8002ac0 <HAL_RCC_OscConfig+0x27c>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7ff f932 	bl	8001cd8 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a78:	f7ff f92e 	bl	8001cd8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e173      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab8 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x234>
 8002a96:	e01b      	b.n	8002ad0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a98:	4b09      	ldr	r3, [pc, #36]	@ (8002ac0 <HAL_RCC_OscConfig+0x27c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9e:	f7ff f91b 	bl	8001cd8 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	e00e      	b.n	8002ac4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa6:	f7ff f917 	bl	8001cd8 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d907      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e15c      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	42470000 	.word	0x42470000
 8002ac0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	4b8a      	ldr	r3, [pc, #552]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ea      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8097 	beq.w	8002c0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae2:	4b83      	ldr	r3, [pc, #524]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	4b7f      	ldr	r3, [pc, #508]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	4a7e      	ldr	r2, [pc, #504]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002afe:	4b7c      	ldr	r3, [pc, #496]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0e:	4b79      	ldr	r3, [pc, #484]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1a:	4b76      	ldr	r3, [pc, #472]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a75      	ldr	r2, [pc, #468]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b26:	f7ff f8d7 	bl	8001cd8 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2e:	f7ff f8d3 	bl	8001cd8 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e118      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	4b6c      	ldr	r3, [pc, #432]	@ (8002cf4 <HAL_RCC_OscConfig+0x4b0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x31e>
 8002b54:	4b66      	ldr	r3, [pc, #408]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b58:	4a65      	ldr	r2, [pc, #404]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b60:	e01c      	b.n	8002b9c <HAL_RCC_OscConfig+0x358>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x340>
 8002b6a:	4b61      	ldr	r3, [pc, #388]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6e:	4a60      	ldr	r2, [pc, #384]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b76:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7a:	4a5d      	ldr	r2, [pc, #372]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0x358>
 8002b84:	4b5a      	ldr	r3, [pc, #360]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b88:	4a59      	ldr	r2, [pc, #356]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b90:	4b57      	ldr	r3, [pc, #348]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b94:	4a56      	ldr	r2, [pc, #344]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7ff f898 	bl	8001cd8 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7ff f894 	bl	8001cd8 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0d7      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ee      	beq.n	8002bac <HAL_RCC_OscConfig+0x368>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7ff f882 	bl	8001cd8 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7ff f87e 	bl	8001cd8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e0c1      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bee:	4b40      	ldr	r3, [pc, #256]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ee      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	4a3a      	ldr	r2, [pc, #232]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80ad 	beq.w	8002d70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c16:	4b36      	ldr	r3, [pc, #216]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d060      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d145      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b33      	ldr	r3, [pc, #204]	@ (8002cf8 <HAL_RCC_OscConfig+0x4b4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7ff f852 	bl	8001cd8 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7ff f84e 	bl	8001cd8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e093      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	4b29      	ldr	r3, [pc, #164]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c80:	071b      	lsls	r3, r3, #28
 8002c82:	491b      	ldr	r1, [pc, #108]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c88:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf8 <HAL_RCC_OscConfig+0x4b4>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7ff f823 	bl	8001cd8 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c96:	f7ff f81f 	bl	8001cd8 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e064      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x452>
 8002cb4:	e05c      	b.n	8002d70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb6:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <HAL_RCC_OscConfig+0x4b4>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7ff f80c 	bl	8001cd8 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7ff f808 	bl	8001cd8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e04d      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x480>
 8002ce2:	e045      	b.n	8002d70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d107      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e040      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002d7c <HAL_RCC_OscConfig+0x538>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d030      	beq.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d129      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d122      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d119      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	3b01      	subs	r3, #1
 8002d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d10f      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800

08002d80 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x00000001)
 8002d84:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <EXTI0_IRQHandler+0x40>)
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d011      	beq.n	8002db4 <EXTI0_IRQHandler+0x34>
	{
		if( (GPIOB->IDR & 0x00000002) == 0)
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <EXTI0_IRQHandler+0x44>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d108      	bne.n	8002dae <EXTI0_IRQHandler+0x2e>
		{
			Encoder_Count--;
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <EXTI0_IRQHandler+0x48>)
 8002d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	b21a      	sxth	r2, r3
 8002daa:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <EXTI0_IRQHandler+0x48>)
 8002dac:	801a      	strh	r2, [r3, #0]
		}
		EXTI->PR = 0x00000001;
 8002dae:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <EXTI0_IRQHandler+0x40>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	615a      	str	r2, [r3, #20]
	}
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40013c00 	.word	0x40013c00
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	2000023c 	.word	0x2000023c

08002dcc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x00000002)
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <EXTI1_IRQHandler+0x40>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d011      	beq.n	8002e00 <EXTI1_IRQHandler+0x34>
	{
		if((GPIOB->IDR & 0x00000001) == 0)
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e10 <EXTI1_IRQHandler+0x44>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d108      	bne.n	8002dfa <EXTI1_IRQHandler+0x2e>
		{
			Encoder_Count++;
 8002de8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <EXTI1_IRQHandler+0x48>)
 8002dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	b21a      	sxth	r2, r3
 8002df6:	4b07      	ldr	r3, [pc, #28]	@ (8002e14 <EXTI1_IRQHandler+0x48>)
 8002df8:	801a      	strh	r2, [r3, #0]
		}
		EXTI->PR = 0x00000002;
 8002dfa:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <EXTI1_IRQHandler+0x40>)
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	615a      	str	r2, [r3, #20]
	}
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40013c00 	.word	0x40013c00
 8002e10:	40020400 	.word	0x40020400
 8002e14:	2000023c 	.word	0x2000023c

08002e18 <Motor_Init>:
#include <stm32f446xx.h>



void Motor_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
	//PWM初始化
	Pwm1_Init();
 8002e1c:	f000 fb98 	bl	8003550 <Pwm1_Init>
	Pwm2_Init();
 8002e20:	f000 fc30 	bl	8003684 <Pwm2_Init>
	Pwm3_Init();
 8002e24:	f000 fcde 	bl	80037e4 <Pwm3_Init>
	Pwm4_Init();
 8002e28:	f000 fd70 	bl	800390c <Pwm4_Init>

	//GPIOB 時鐘開啟，GPIOC 時鐘開啟
	RCC->AHB1ENR |= 1 << 1;
 8002e2c:	4b69      	ldr	r3, [pc, #420]	@ (8002fd4 <Motor_Init+0x1bc>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e30:	4a68      	ldr	r2, [pc, #416]	@ (8002fd4 <Motor_Init+0x1bc>)
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= 1 << 2;
 8002e38:	4b66      	ldr	r3, [pc, #408]	@ (8002fd4 <Motor_Init+0x1bc>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3c:	4a65      	ldr	r2, [pc, #404]	@ (8002fd4 <Motor_Init+0x1bc>)
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= 1 << 0;
 8002e44:	4b63      	ldr	r3, [pc, #396]	@ (8002fd4 <Motor_Init+0x1bc>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e48:	4a62      	ldr	r2, [pc, #392]	@ (8002fd4 <Motor_Init+0x1bc>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6313      	str	r3, [r2, #48]	@ 0x30

	//使用PC8 PC6當正反轉接角
	GPIOC->MODER &= ~(3 << 16);
 8002e50:	4b61      	ldr	r3, [pc, #388]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a60      	ldr	r2, [pc, #384]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e56:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002e5a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=   1 << 16;
 8002e5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a5d      	ldr	r2, [pc, #372]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER&= ~(1 << 8);
 8002e68:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e72:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= 3 << 16;
 8002e74:	4b58      	ldr	r3, [pc, #352]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4a57      	ldr	r2, [pc, #348]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e7a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002e7e:	6093      	str	r3, [r2, #8]

	GPIOC->MODER &= ~(3 << 12);
 8002e80:	4b55      	ldr	r3, [pc, #340]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a54      	ldr	r2, [pc, #336]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e8a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=   1 << 12;
 8002e8c:	4b52      	ldr	r3, [pc, #328]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a51      	ldr	r2, [pc, #324]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e96:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER&= ~(1 << 6);
 8002e98:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a4e      	ldr	r2, [pc, #312]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ea2:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= 3 << 12;
 8002ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a4b      	ldr	r2, [pc, #300]	@ (8002fd8 <Motor_Init+0x1c0>)
 8002eaa:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8002eae:	6093      	str	r3, [r2, #8]

	//使用PB12 PB13當正反轉接角
	GPIOB->MODER &= ~(3 << 24);
 8002eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8002fdc <Motor_Init+0x1c4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a49      	ldr	r2, [pc, #292]	@ (8002fdc <Motor_Init+0x1c4>)
 8002eb6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002eba:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 24;
 8002ebc:	4b47      	ldr	r3, [pc, #284]	@ (8002fdc <Motor_Init+0x1c4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a46      	ldr	r2, [pc, #280]	@ (8002fdc <Motor_Init+0x1c4>)
 8002ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 12);
 8002ec8:	4b44      	ldr	r3, [pc, #272]	@ (8002fdc <Motor_Init+0x1c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a43      	ldr	r2, [pc, #268]	@ (8002fdc <Motor_Init+0x1c4>)
 8002ece:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ed2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 24;
 8002ed4:	4b41      	ldr	r3, [pc, #260]	@ (8002fdc <Motor_Init+0x1c4>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a40      	ldr	r2, [pc, #256]	@ (8002fdc <Motor_Init+0x1c4>)
 8002eda:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8002ede:	6093      	str	r3, [r2, #8]

	GPIOB->MODER &= ~(3 << 26);
 8002ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8002fdc <Motor_Init+0x1c4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a3d      	ldr	r2, [pc, #244]	@ (8002fdc <Motor_Init+0x1c4>)
 8002ee6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002eea:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 26;
 8002eec:	4b3b      	ldr	r3, [pc, #236]	@ (8002fdc <Motor_Init+0x1c4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8002fdc <Motor_Init+0x1c4>)
 8002ef2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ef6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 13);
 8002ef8:	4b38      	ldr	r3, [pc, #224]	@ (8002fdc <Motor_Init+0x1c4>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a37      	ldr	r2, [pc, #220]	@ (8002fdc <Motor_Init+0x1c4>)
 8002efe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f02:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 26;
 8002f04:	4b35      	ldr	r3, [pc, #212]	@ (8002fdc <Motor_Init+0x1c4>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a34      	ldr	r2, [pc, #208]	@ (8002fdc <Motor_Init+0x1c4>)
 8002f0a:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 8002f0e:	6093      	str	r3, [r2, #8]
	
	//使用PA11、PA12當正反轉接角
	GPIOA->MODER &= ~(3 << 22);
 8002f10:	4b33      	ldr	r3, [pc, #204]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a32      	ldr	r2, [pc, #200]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f16:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f1a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=   1 << 22;
 8002f1c:	4b30      	ldr	r3, [pc, #192]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2f      	ldr	r2, [pc, #188]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f26:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER&= ~(1 << 11);
 8002f28:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f32:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= 3 << 22;
 8002f34:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	4a29      	ldr	r2, [pc, #164]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f3a:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8002f3e:	6093      	str	r3, [r2, #8]

	GPIOA->MODER &= ~(3 << 24);
 8002f40:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a26      	ldr	r2, [pc, #152]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f46:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002f4a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=   1 << 24;
 8002f4c:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a23      	ldr	r2, [pc, #140]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER&= ~(1 << 12);
 8002f58:	4b21      	ldr	r3, [pc, #132]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a20      	ldr	r2, [pc, #128]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f62:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= 3 << 24;
 8002f64:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe0 <Motor_Init+0x1c8>)
 8002f6a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8002f6e:	6093      	str	r3, [r2, #8]

	//使用PB14 PB15當正反轉接角
	GPIOB->MODER &= ~(3 << 28);
 8002f70:	4b1a      	ldr	r3, [pc, #104]	@ (8002fdc <Motor_Init+0x1c4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a19      	ldr	r2, [pc, #100]	@ (8002fdc <Motor_Init+0x1c4>)
 8002f76:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002f7a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 28;
 8002f7c:	4b17      	ldr	r3, [pc, #92]	@ (8002fdc <Motor_Init+0x1c4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a16      	ldr	r2, [pc, #88]	@ (8002fdc <Motor_Init+0x1c4>)
 8002f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 14);
 8002f88:	4b14      	ldr	r3, [pc, #80]	@ (8002fdc <Motor_Init+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a13      	ldr	r2, [pc, #76]	@ (8002fdc <Motor_Init+0x1c4>)
 8002f8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f92:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 28;
 8002f94:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <Motor_Init+0x1c4>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a10      	ldr	r2, [pc, #64]	@ (8002fdc <Motor_Init+0x1c4>)
 8002f9a:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8002f9e:	6093      	str	r3, [r2, #8]

	GPIOB->MODER &= ~(3 << 30);
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002fdc <Motor_Init+0x1c4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002fdc <Motor_Init+0x1c4>)
 8002fa6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002faa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 30;
 8002fac:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <Motor_Init+0x1c4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fdc <Motor_Init+0x1c4>)
 8002fb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fb6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 15);
 8002fb8:	4b08      	ldr	r3, [pc, #32]	@ (8002fdc <Motor_Init+0x1c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a07      	ldr	r2, [pc, #28]	@ (8002fdc <Motor_Init+0x1c4>)
 8002fbe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002fc2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 30;
 8002fc4:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <Motor_Init+0x1c4>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a04      	ldr	r2, [pc, #16]	@ (8002fdc <Motor_Init+0x1c4>)
 8002fca:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002fce:	6093      	str	r3, [r2, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	40020400 	.word	0x40020400
 8002fe0:	40020000 	.word	0x40020000

08002fe4 <Motor_SetSpeed>:


void Motor_SetSpeed(uint8_t name,int speed,float output)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ff2:	73fb      	strb	r3, [r7, #15]
	if(name == 1)//PC8、PC6
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d121      	bne.n	800303e <Motor_SetSpeed+0x5a>
	{
		if(output >= 0)//正轉
 8002ffa:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ffe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003006:	db0d      	blt.n	8003024 <Motor_SetSpeed+0x40>
		{
			GPIOC->BSRR  = 1 << 8;
 8003008:	4b47      	ldr	r3, [pc, #284]	@ (8003128 <Motor_SetSpeed+0x144>)
 800300a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800300e:	619a      	str	r2, [r3, #24]
			GPIOC->BSRR  = 1 << (6+16);
 8003010:	4b45      	ldr	r3, [pc, #276]	@ (8003128 <Motor_SetSpeed+0x144>)
 8003012:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003016:	619a      	str	r2, [r3, #24]
			PWM1_SetCompare1(speed);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	b29b      	uxth	r3, r3
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fb21 	bl	8003664 <PWM1_SetCompare1>
			GPIOB->BSRR  = 1 << (15+16);
			PWM4_SetCompare1(speed);
		}
	}

}
 8003022:	e07d      	b.n	8003120 <Motor_SetSpeed+0x13c>
			GPIOC->BSRR  = 1 << (8+16);
 8003024:	4b40      	ldr	r3, [pc, #256]	@ (8003128 <Motor_SetSpeed+0x144>)
 8003026:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800302a:	619a      	str	r2, [r3, #24]
			GPIOC->BSRR  = 1 << 6;
 800302c:	4b3e      	ldr	r3, [pc, #248]	@ (8003128 <Motor_SetSpeed+0x144>)
 800302e:	2240      	movs	r2, #64	@ 0x40
 8003030:	619a      	str	r2, [r3, #24]
			PWM1_SetCompare1(speed);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	b29b      	uxth	r3, r3
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fb14 	bl	8003664 <PWM1_SetCompare1>
}
 800303c:	e070      	b.n	8003120 <Motor_SetSpeed+0x13c>
	else if(name == 2) // PA11、PA12
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d122      	bne.n	800308a <Motor_SetSpeed+0xa6>
		if(output >= 0)//正轉
 8003044:	edd7 7a01 	vldr	s15, [r7, #4]
 8003048:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003050:	db0d      	blt.n	800306e <Motor_SetSpeed+0x8a>
			GPIOA->BSRR  = 1 << (11+16);
 8003052:	4b36      	ldr	r3, [pc, #216]	@ (800312c <Motor_SetSpeed+0x148>)
 8003054:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003058:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR  = 1 << 12;
 800305a:	4b34      	ldr	r3, [pc, #208]	@ (800312c <Motor_SetSpeed+0x148>)
 800305c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003060:	619a      	str	r2, [r3, #24]
			PWM2_SetCompare1(speed);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	b29b      	uxth	r3, r3
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fbac 	bl	80037c4 <PWM2_SetCompare1>
}
 800306c:	e058      	b.n	8003120 <Motor_SetSpeed+0x13c>
			GPIOA->BSRR  = 1 << 11;
 800306e:	4b2f      	ldr	r3, [pc, #188]	@ (800312c <Motor_SetSpeed+0x148>)
 8003070:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003074:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR  = 1 << (12+16);
 8003076:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <Motor_SetSpeed+0x148>)
 8003078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800307c:	619a      	str	r2, [r3, #24]
			PWM2_SetCompare1(speed);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	b29b      	uxth	r3, r3
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fb9e 	bl	80037c4 <PWM2_SetCompare1>
}
 8003088:	e04a      	b.n	8003120 <Motor_SetSpeed+0x13c>
	else if(name == 3) // PB12、PB13
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d122      	bne.n	80030d6 <Motor_SetSpeed+0xf2>
		if(output >= 0)//正轉
 8003090:	edd7 7a01 	vldr	s15, [r7, #4]
 8003094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309c:	db0d      	blt.n	80030ba <Motor_SetSpeed+0xd6>
			GPIOB->BSRR  = 1 << 12;
 800309e:	4b24      	ldr	r3, [pc, #144]	@ (8003130 <Motor_SetSpeed+0x14c>)
 80030a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80030a4:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << (13+16);
 80030a6:	4b22      	ldr	r3, [pc, #136]	@ (8003130 <Motor_SetSpeed+0x14c>)
 80030a8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80030ac:	619a      	str	r2, [r3, #24]
			PWM3_SetCompare1(speed);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fc1a 	bl	80038ec <PWM3_SetCompare1>
}
 80030b8:	e032      	b.n	8003120 <Motor_SetSpeed+0x13c>
			GPIOB->BSRR  = 1 << (12+16);
 80030ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003130 <Motor_SetSpeed+0x14c>)
 80030bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030c0:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << 13;
 80030c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <Motor_SetSpeed+0x14c>)
 80030c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030c8:	619a      	str	r2, [r3, #24]
			PWM3_SetCompare1(speed);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fc0c 	bl	80038ec <PWM3_SetCompare1>
}
 80030d4:	e024      	b.n	8003120 <Motor_SetSpeed+0x13c>
	else if(name == 4) // PB14、PB15
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d121      	bne.n	8003120 <Motor_SetSpeed+0x13c>
		if(output >= 0)//正轉
 80030dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80030e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e8:	db0d      	blt.n	8003106 <Motor_SetSpeed+0x122>
			GPIOB->BSRR  = 1 << (14+16);
 80030ea:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <Motor_SetSpeed+0x14c>)
 80030ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80030f0:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << 15;
 80030f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003130 <Motor_SetSpeed+0x14c>)
 80030f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80030f8:	619a      	str	r2, [r3, #24]
			PWM4_SetCompare1(speed);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fc88 	bl	8003a14 <PWM4_SetCompare1>
}
 8003104:	e00c      	b.n	8003120 <Motor_SetSpeed+0x13c>
			GPIOB->BSRR  = 1 << 14;
 8003106:	4b0a      	ldr	r3, [pc, #40]	@ (8003130 <Motor_SetSpeed+0x14c>)
 8003108:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800310c:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << (15+16);
 800310e:	4b08      	ldr	r3, [pc, #32]	@ (8003130 <Motor_SetSpeed+0x14c>)
 8003110:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003114:	619a      	str	r2, [r3, #24]
			PWM4_SetCompare1(speed);
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	b29b      	uxth	r3, r3
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fc7a 	bl	8003a14 <PWM4_SetCompare1>
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40020800 	.word	0x40020800
 800312c:	40020000 	.word	0x40020000
 8003130:	40020400 	.word	0x40020400

08003134 <OLED_W_SCL>:
#include "OLED_Font.h"


//GPIOB 8 當SCL
void OLED_W_SCL(uint8_t set)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
	if(set == 1) GPIOB->BSRR = 1 << 8;
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d104      	bne.n	800314e <OLED_W_SCL+0x1a>
 8003144:	4b07      	ldr	r3, [pc, #28]	@ (8003164 <OLED_W_SCL+0x30>)
 8003146:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800314a:	619a      	str	r2, [r3, #24]
	else	     GPIOB->BSRR = 1 << (24);
}
 800314c:	e003      	b.n	8003156 <OLED_W_SCL+0x22>
	else	     GPIOB->BSRR = 1 << (24);
 800314e:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <OLED_W_SCL+0x30>)
 8003150:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003154:	619a      	str	r2, [r3, #24]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40020400 	.word	0x40020400

08003168 <OLED_W_SDA>:
//GPIOB 9 當SDA
void OLED_W_SDA(uint8_t set)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
	if(set == 1) GPIOB->BSRR = 1 << 9;
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d104      	bne.n	8003182 <OLED_W_SDA+0x1a>
 8003178:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <OLED_W_SDA+0x30>)
 800317a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800317e:	619a      	str	r2, [r3, #24]
	else	     GPIOB->BSRR = 1 << (25);
}
 8003180:	e003      	b.n	800318a <OLED_W_SDA+0x22>
	else	     GPIOB->BSRR = 1 << (25);
 8003182:	4b05      	ldr	r3, [pc, #20]	@ (8003198 <OLED_W_SDA+0x30>)
 8003184:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003188:	619a      	str	r2, [r3, #24]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40020400 	.word	0x40020400

0800319c <OLED_I2C_Init>:

/*引脚初始化*/
void OLED_I2C_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
    //開啟GPIOB時鐘
    RCC->AHB1ENR |= 1 << 1;
 80031a0:	4b18      	ldr	r3, [pc, #96]	@ (8003204 <OLED_I2C_Init+0x68>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	4a17      	ldr	r2, [pc, #92]	@ (8003204 <OLED_I2C_Init+0x68>)
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	6313      	str	r3, [r2, #48]	@ 0x30

    //PB8 PB9 都OPEN DRAIN
	GPIOB->MODER  |= 1 << 16;
 80031ac:	4b16      	ldr	r3, [pc, #88]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a15      	ldr	r2, [pc, #84]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= 1 << 8;
 80031b8:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a12      	ldr	r2, [pc, #72]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR|= 3 << 16;
 80031c4:	4b10      	ldr	r3, [pc, #64]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031ca:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80031ce:	6093      	str	r3, [r2, #8]

	GPIOB->MODER  |= 1 << 18;
 80031d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031da:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= 1 << 9;
 80031dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a09      	ldr	r2, [pc, #36]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031e6:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR|= 3 << 18;
 80031e8:	4b07      	ldr	r3, [pc, #28]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a06      	ldr	r2, [pc, #24]	@ (8003208 <OLED_I2C_Init+0x6c>)
 80031ee:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80031f2:	6093      	str	r3, [r2, #8]
	
	OLED_W_SCL(1);
 80031f4:	2001      	movs	r0, #1
 80031f6:	f7ff ff9d 	bl	8003134 <OLED_W_SCL>
	OLED_W_SDA(1);
 80031fa:	2001      	movs	r0, #1
 80031fc:	f7ff ffb4 	bl	8003168 <OLED_W_SDA>
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40023800 	.word	0x40023800
 8003208:	40020400 	.word	0x40020400

0800320c <OLED_I2C_Start>:
  * @brief  I2C开始
  * @param  无
  * @retval 无
  */
void OLED_I2C_Start(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 8003210:	2001      	movs	r0, #1
 8003212:	f7ff ffa9 	bl	8003168 <OLED_W_SDA>
	OLED_W_SCL(1);
 8003216:	2001      	movs	r0, #1
 8003218:	f7ff ff8c 	bl	8003134 <OLED_W_SCL>
	OLED_W_SDA(0);
 800321c:	2000      	movs	r0, #0
 800321e:	f7ff ffa3 	bl	8003168 <OLED_W_SDA>
	OLED_W_SCL(0);
 8003222:	2000      	movs	r0, #0
 8003224:	f7ff ff86 	bl	8003134 <OLED_W_SCL>
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}

0800322c <OLED_I2C_Stop>:
  * @brief  I2C停止
  * @param  无
  * @retval 无
  */
void OLED_I2C_Stop(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 8003230:	2000      	movs	r0, #0
 8003232:	f7ff ff99 	bl	8003168 <OLED_W_SDA>
	OLED_W_SCL(1);
 8003236:	2001      	movs	r0, #1
 8003238:	f7ff ff7c 	bl	8003134 <OLED_W_SCL>
	OLED_W_SDA(1);
 800323c:	2001      	movs	r0, #1
 800323e:	f7ff ff93 	bl	8003168 <OLED_W_SDA>
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}

08003246 <OLED_I2C_SendByte>:
  * @brief  I2C发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_I2C_SendByte(uint8_t Byte)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	e016      	b.n	8003284 <OLED_I2C_SendByte+0x3e>
	{
		OLED_W_SDA(!!(Byte & (0x80 >> i)));
 8003256:	79fa      	ldrb	r2, [r7, #7]
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2180      	movs	r1, #128	@ 0x80
 800325c:	fa41 f303 	asr.w	r3, r1, r3
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf14      	ite	ne
 8003266:	2301      	movne	r3, #1
 8003268:	2300      	moveq	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff7b 	bl	8003168 <OLED_W_SDA>
		OLED_W_SCL(1);
 8003272:	2001      	movs	r0, #1
 8003274:	f7ff ff5e 	bl	8003134 <OLED_W_SCL>
		OLED_W_SCL(0);
 8003278:	2000      	movs	r0, #0
 800327a:	f7ff ff5b 	bl	8003134 <OLED_W_SCL>
	for (i = 0; i < 8; i++)
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	3301      	adds	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b07      	cmp	r3, #7
 8003288:	d9e5      	bls.n	8003256 <OLED_I2C_SendByte+0x10>
	}
	OLED_W_SCL(1);	//额外的一个时钟，不处理应答信号
 800328a:	2001      	movs	r0, #1
 800328c:	f7ff ff52 	bl	8003134 <OLED_W_SCL>
	OLED_W_SCL(0);
 8003290:	2000      	movs	r0, #0
 8003292:	f7ff ff4f 	bl	8003134 <OLED_W_SCL>
}
 8003296:	bf00      	nop
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 80032a8:	f7ff ffb0 	bl	800320c <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 80032ac:	2078      	movs	r0, #120	@ 0x78
 80032ae:	f7ff ffca 	bl	8003246 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00);		//写命令
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7ff ffc7 	bl	8003246 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command); 
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ffc3 	bl	8003246 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 80032c0:	f7ff ffb4 	bl	800322c <OLED_I2C_Stop>
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 80032d6:	f7ff ff99 	bl	800320c <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 80032da:	2078      	movs	r0, #120	@ 0x78
 80032dc:	f7ff ffb3 	bl	8003246 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40);		//写数据
 80032e0:	2040      	movs	r0, #64	@ 0x40
 80032e2:	f7ff ffb0 	bl	8003246 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ffac 	bl	8003246 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 80032ee:	f7ff ff9d 	bl	800322c <OLED_I2C_Stop>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	460a      	mov	r2, r1
 8003304:	71fb      	strb	r3, [r7, #7]
 8003306:	4613      	mov	r3, r2
 8003308:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ffc3 	bl	800329e <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 8003318:	79bb      	ldrb	r3, [r7, #6]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f043 0310 	orr.w	r3, r3, #16
 8003322:	b2db      	uxtb	r3, r3
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ffba 	bl	800329e <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 800332a:	79bb      	ldrb	r3, [r7, #6]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	b2db      	uxtb	r3, r3
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ffb3 	bl	800329e <OLED_WriteCommand>
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8003346:	2300      	movs	r3, #0
 8003348:	71bb      	strb	r3, [r7, #6]
 800334a:	e014      	b.n	8003376 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 800334c:	79bb      	ldrb	r3, [r7, #6]
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ffd2 	bl	80032fa <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	71fb      	strb	r3, [r7, #7]
 800335a:	e005      	b.n	8003368 <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 800335c:	2000      	movs	r0, #0
 800335e:	f7ff ffb5 	bl	80032cc <OLED_WriteData>
		for(i = 0; i < 128; i++)
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	3301      	adds	r3, #1
 8003366:	71fb      	strb	r3, [r7, #7]
 8003368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336c:	2b00      	cmp	r3, #0
 800336e:	daf5      	bge.n	800335c <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8003370:	79bb      	ldrb	r3, [r7, #6]
 8003372:	3301      	adds	r3, #1
 8003374:	71bb      	strb	r3, [r7, #6]
 8003376:	79bb      	ldrb	r3, [r7, #6]
 8003378:	2b07      	cmp	r3, #7
 800337a:	d9e7      	bls.n	800334c <OLED_Clear+0xc>
		}
	}
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{      	
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
 8003392:	460b      	mov	r3, r1
 8003394:	71bb      	strb	r3, [r7, #6]
 8003396:	4613      	mov	r3, r2
 8003398:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	3b01      	subs	r3, #1
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	79bb      	ldrb	r3, [r7, #6]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f7ff ffa2 	bl	80032fa <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	e00e      	b.n	80033da <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 80033bc:	797b      	ldrb	r3, [r7, #5]
 80033be:	f1a3 0220 	sub.w	r2, r3, #32
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	491c      	ldr	r1, [pc, #112]	@ (8003438 <OLED_ShowChar+0xb0>)
 80033c6:	0112      	lsls	r2, r2, #4
 80033c8:	440a      	add	r2, r1
 80033ca:	4413      	add	r3, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ff7c 	bl	80032cc <OLED_WriteData>
	for (i = 0; i < 8; i++)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	3301      	adds	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b07      	cmp	r3, #7
 80033de:	d9ed      	bls.n	80033bc <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	79bb      	ldrb	r3, [r7, #6]
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f7ff ff7d 	bl	80032fa <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
 8003404:	e00f      	b.n	8003426 <OLED_ShowChar+0x9e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 8003406:	797b      	ldrb	r3, [r7, #5]
 8003408:	f1a3 0220 	sub.w	r2, r3, #32
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	3308      	adds	r3, #8
 8003410:	4909      	ldr	r1, [pc, #36]	@ (8003438 <OLED_ShowChar+0xb0>)
 8003412:	0112      	lsls	r2, r2, #4
 8003414:	440a      	add	r2, r1
 8003416:	4413      	add	r3, r2
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff56 	bl	80032cc <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	3301      	adds	r3, #1
 8003424:	73fb      	strb	r3, [r7, #15]
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b07      	cmp	r3, #7
 800342a:	d9ec      	bls.n	8003406 <OLED_ShowChar+0x7e>
	}
}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	08008420 	.word	0x08008420

0800343c <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	603a      	str	r2, [r7, #0]
 8003446:	71fb      	strb	r3, [r7, #7]
 8003448:	460b      	mov	r3, r1
 800344a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 800344c:	2300      	movs	r3, #0
 800344e:	73fb      	strb	r3, [r7, #15]
 8003450:	e00e      	b.n	8003470 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 8003452:	79ba      	ldrb	r2, [r7, #6]
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	4413      	add	r3, r2
 8003458:	b2d9      	uxtb	r1, r3
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	4413      	add	r3, r2
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff8f 	bl	8003388 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	3301      	adds	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	4413      	add	r3, r2
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1ea      	bne.n	8003452 <OLED_ShowString+0x16>
	}
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b082      	sub	sp, #8
 800348a:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 800348c:	2300      	movs	r3, #0
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	e00c      	b.n	80034ac <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 8003492:	2300      	movs	r3, #0
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	e002      	b.n	800349e <OLED_Init+0x18>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034a4:	d3f8      	bcc.n	8003498 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3301      	adds	r3, #1
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034b2:	d3ee      	bcc.n	8003492 <OLED_Init+0xc>
	}
	
	OLED_I2C_Init();			//端口初始化
 80034b4:	f7ff fe72 	bl	800319c <OLED_I2C_Init>
	
	OLED_WriteCommand(0xAE);	//关闭显示
 80034b8:	20ae      	movs	r0, #174	@ 0xae
 80034ba:	f7ff fef0 	bl	800329e <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80034be:	20d5      	movs	r0, #213	@ 0xd5
 80034c0:	f7ff feed 	bl	800329e <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 80034c4:	2080      	movs	r0, #128	@ 0x80
 80034c6:	f7ff feea 	bl	800329e <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 80034ca:	20a8      	movs	r0, #168	@ 0xa8
 80034cc:	f7ff fee7 	bl	800329e <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 80034d0:	203f      	movs	r0, #63	@ 0x3f
 80034d2:	f7ff fee4 	bl	800329e <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 80034d6:	20d3      	movs	r0, #211	@ 0xd3
 80034d8:	f7ff fee1 	bl	800329e <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80034dc:	2000      	movs	r0, #0
 80034de:	f7ff fede 	bl	800329e <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 80034e2:	2040      	movs	r0, #64	@ 0x40
 80034e4:	f7ff fedb 	bl	800329e <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 80034e8:	20a1      	movs	r0, #161	@ 0xa1
 80034ea:	f7ff fed8 	bl	800329e <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 80034ee:	20c8      	movs	r0, #200	@ 0xc8
 80034f0:	f7ff fed5 	bl	800329e <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 80034f4:	20da      	movs	r0, #218	@ 0xda
 80034f6:	f7ff fed2 	bl	800329e <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 80034fa:	2012      	movs	r0, #18
 80034fc:	f7ff fecf 	bl	800329e <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 8003500:	2081      	movs	r0, #129	@ 0x81
 8003502:	f7ff fecc 	bl	800329e <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8003506:	20cf      	movs	r0, #207	@ 0xcf
 8003508:	f7ff fec9 	bl	800329e <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 800350c:	20d9      	movs	r0, #217	@ 0xd9
 800350e:	f7ff fec6 	bl	800329e <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8003512:	20f1      	movs	r0, #241	@ 0xf1
 8003514:	f7ff fec3 	bl	800329e <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8003518:	20db      	movs	r0, #219	@ 0xdb
 800351a:	f7ff fec0 	bl	800329e <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800351e:	2030      	movs	r0, #48	@ 0x30
 8003520:	f7ff febd 	bl	800329e <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8003524:	20a4      	movs	r0, #164	@ 0xa4
 8003526:	f7ff feba 	bl	800329e <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 800352a:	20a6      	movs	r0, #166	@ 0xa6
 800352c:	f7ff feb7 	bl	800329e <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8003530:	208d      	movs	r0, #141	@ 0x8d
 8003532:	f7ff feb4 	bl	800329e <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8003536:	2014      	movs	r0, #20
 8003538:	f7ff feb1 	bl	800329e <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 800353c:	20af      	movs	r0, #175	@ 0xaf
 800353e:	f7ff feae 	bl	800329e <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 8003542:	f7ff fefd 	bl	8003340 <OLED_Clear>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <Pwm1_Init>:
#include <stm32f446xx.h>


void Pwm1_Init(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
	//開啟GPIOA、TIM1時鐘
	RCC->AHB1ENR |= 1 << 0;
 8003554:	4b40      	ldr	r3, [pc, #256]	@ (8003658 <Pwm1_Init+0x108>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003558:	4a3f      	ldr	r2, [pc, #252]	@ (8003658 <Pwm1_Init+0x108>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= 1 << 0;
 8003560:	4b3d      	ldr	r3, [pc, #244]	@ (8003658 <Pwm1_Init+0x108>)
 8003562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003564:	4a3c      	ldr	r2, [pc, #240]	@ (8003658 <Pwm1_Init+0x108>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6453      	str	r3, [r2, #68]	@ 0x44

	//tim1 PWM輸出復用功能
	GPIOA->AFR[1] &= ~(0xF << 0);
 800356c:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <Pwm1_Init+0x10c>)
 800356e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003570:	4a3a      	ldr	r2, [pc, #232]	@ (800365c <Pwm1_Init+0x10c>)
 8003572:	f023 030f 	bic.w	r3, r3, #15
 8003576:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (1 << 0);
 8003578:	4b38      	ldr	r3, [pc, #224]	@ (800365c <Pwm1_Init+0x10c>)
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	4a37      	ldr	r2, [pc, #220]	@ (800365c <Pwm1_Init+0x10c>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6253      	str	r3, [r2, #36]	@ 0x24


	//設置PA8為復用推挽輸出
	GPIOA->MODER  &=~(3 << 16);
 8003584:	4b35      	ldr	r3, [pc, #212]	@ (800365c <Pwm1_Init+0x10c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a34      	ldr	r2, [pc, #208]	@ (800365c <Pwm1_Init+0x10c>)
 800358a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800358e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 16;
 8003590:	4b32      	ldr	r3, [pc, #200]	@ (800365c <Pwm1_Init+0x10c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a31      	ldr	r2, [pc, #196]	@ (800365c <Pwm1_Init+0x10c>)
 8003596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800359a:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 8);
 800359c:	4b2f      	ldr	r3, [pc, #188]	@ (800365c <Pwm1_Init+0x10c>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4a2e      	ldr	r2, [pc, #184]	@ (800365c <Pwm1_Init+0x10c>)
 80035a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035a6:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 16;
 80035a8:	4b2c      	ldr	r3, [pc, #176]	@ (800365c <Pwm1_Init+0x10c>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a2b      	ldr	r2, [pc, #172]	@ (800365c <Pwm1_Init+0x10c>)
 80035ae:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80035b2:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM1->SMCR &= ~(7 << 0);
 80035b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003660 <Pwm1_Init+0x110>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a29      	ldr	r2, [pc, #164]	@ (8003660 <Pwm1_Init+0x110>)
 80035ba:	f023 0307 	bic.w	r3, r3, #7
 80035be:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM1->PSC = 4-1;
 80035c0:	4b27      	ldr	r3, [pc, #156]	@ (8003660 <Pwm1_Init+0x110>)
 80035c2:	2203      	movs	r2, #3
 80035c4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 1000-1;
 80035c6:	4b26      	ldr	r3, [pc, #152]	@ (8003660 <Pwm1_Init+0x110>)
 80035c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80035cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	
	//設置自動裝載、計數方向、始能計數器
	TIM1->CR1 |=  1 << 7;
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <Pwm1_Init+0x110>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a23      	ldr	r2, [pc, #140]	@ (8003660 <Pwm1_Init+0x110>)
 80035d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d8:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(1 << 4);
 80035da:	4b21      	ldr	r3, [pc, #132]	@ (8003660 <Pwm1_Init+0x110>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a20      	ldr	r2, [pc, #128]	@ (8003660 <Pwm1_Init+0x110>)
 80035e0:	f023 0310 	bic.w	r3, r3, #16
 80035e4:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |=  1 << 0;
 80035e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003660 <Pwm1_Init+0x110>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003660 <Pwm1_Init+0x110>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6013      	str	r3, [r2, #0]
	
    //設置初始化計數器
	TIM1->EGR |=  1 << 0;
 80035f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003660 <Pwm1_Init+0x110>)
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003660 <Pwm1_Init+0x110>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
	
    //設置PWM模式、輸出比較自動裝載
	TIM1->CCMR1 &= ~(7 << 4);
 80035fe:	4b18      	ldr	r3, [pc, #96]	@ (8003660 <Pwm1_Init+0x110>)
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	4a17      	ldr	r2, [pc, #92]	@ (8003660 <Pwm1_Init+0x110>)
 8003604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003608:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |=   6 << 4;
 800360a:	4b15      	ldr	r3, [pc, #84]	@ (8003660 <Pwm1_Init+0x110>)
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	4a14      	ldr	r2, [pc, #80]	@ (8003660 <Pwm1_Init+0x110>)
 8003610:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003614:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |=   1 << 3;
 8003616:	4b12      	ldr	r3, [pc, #72]	@ (8003660 <Pwm1_Init+0x110>)
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	4a11      	ldr	r2, [pc, #68]	@ (8003660 <Pwm1_Init+0x110>)
 800361c:	f043 0308 	orr.w	r3, r3, #8
 8003620:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM1->CCR1  = 0;
 8003622:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <Pwm1_Init+0x110>)
 8003624:	2200      	movs	r2, #0
 8003626:	635a      	str	r2, [r3, #52]	@ 0x34
	
    //設置輸出比較始能、輸出極性
	TIM1->CCER  |=   1 << 0;
 8003628:	4b0d      	ldr	r3, [pc, #52]	@ (8003660 <Pwm1_Init+0x110>)
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4a0c      	ldr	r2, [pc, #48]	@ (8003660 <Pwm1_Init+0x110>)
 800362e:	f043 0301 	orr.w	r3, r3, #1
 8003632:	6213      	str	r3, [r2, #32]
	TIM1->CCER  &= ~(1 << 1);
 8003634:	4b0a      	ldr	r3, [pc, #40]	@ (8003660 <Pwm1_Init+0x110>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4a09      	ldr	r2, [pc, #36]	@ (8003660 <Pwm1_Init+0x110>)
 800363a:	f023 0302 	bic.w	r3, r3, #2
 800363e:	6213      	str	r3, [r2, #32]
	
	TIM1->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)
 8003640:	4b07      	ldr	r3, [pc, #28]	@ (8003660 <Pwm1_Init+0x110>)
 8003642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003644:	4a06      	ldr	r2, [pc, #24]	@ (8003660 <Pwm1_Init+0x110>)
 8003646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800364a:	6453      	str	r3, [r2, #68]	@ 0x44

	//TIM_Cmd(TIM1, ENABLE);

}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	40020000 	.word	0x40020000
 8003660:	40010000 	.word	0x40010000

08003664 <PWM1_SetCompare1>:

void PWM1_SetCompare1(uint16_t Compare)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM1->CCR1 = Compare;
 800366e:	4a04      	ldr	r2, [pc, #16]	@ (8003680 <PWM1_SetCompare1+0x1c>)
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40010000 	.word	0x40010000

08003684 <Pwm2_Init>:
#include <stm32f446xx.h>

//使用TIM2 CH1 PA0當PWM輸出
void Pwm2_Init(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
	//開啟GPIOA、TIM1時鐘
	RCC->AHB1ENR |= 1 << 0;
 8003688:	4b4c      	ldr	r3, [pc, #304]	@ (80037bc <Pwm2_Init+0x138>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368c:	4a4b      	ldr	r2, [pc, #300]	@ (80037bc <Pwm2_Init+0x138>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= 1 << 0;
 8003694:	4b49      	ldr	r3, [pc, #292]	@ (80037bc <Pwm2_Init+0x138>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	4a48      	ldr	r2, [pc, #288]	@ (80037bc <Pwm2_Init+0x138>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6413      	str	r3, [r2, #64]	@ 0x40

	//PA0當TIM2復用
	GPIOA->AFR[0] &= ~(0xF << 0);
 80036a0:	4b47      	ldr	r3, [pc, #284]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4a46      	ldr	r2, [pc, #280]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036a6:	f023 030f 	bic.w	r3, r3, #15
 80036aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1 << 0);
 80036ac:	4b44      	ldr	r3, [pc, #272]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	4a43      	ldr	r2, [pc, #268]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6213      	str	r3, [r2, #32]


	//設置PA0為復用推挽輸出
	GPIOA->MODER  &=~(3 << 0);
 80036b8:	4b41      	ldr	r3, [pc, #260]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a40      	ldr	r2, [pc, #256]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 0;
 80036c4:	4b3e      	ldr	r3, [pc, #248]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a3d      	ldr	r2, [pc, #244]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036ca:	f043 0302 	orr.w	r3, r3, #2
 80036ce:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 0);
 80036d0:	4b3b      	ldr	r3, [pc, #236]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4a3a      	ldr	r2, [pc, #232]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036d6:	f023 0301 	bic.w	r3, r3, #1
 80036da:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 0;
 80036dc:	4b38      	ldr	r3, [pc, #224]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	4a37      	ldr	r2, [pc, #220]	@ (80037c0 <Pwm2_Init+0x13c>)
 80036e2:	f043 0303 	orr.w	r3, r3, #3
 80036e6:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM2->SMCR &= ~(7 << 0);
 80036e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036f2:	f023 0307 	bic.w	r3, r3, #7
 80036f6:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM2->PSC = 4-1;
 80036f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036fc:	2203      	movs	r2, #3
 80036fe:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1000-1;
 8003700:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003704:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003708:	62da      	str	r2, [r3, #44]	@ 0x2c

	//設置自動裝載、計數方向、始能計數器
	TIM2->CR1 |=  1 << 7;
 800370a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003718:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(1 << 4);
 800371a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003724:	f023 0310 	bic.w	r3, r3, #16
 8003728:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |=  1 << 0;
 800372a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6013      	str	r3, [r2, #0]

    //設置初始化計數器
	TIM2->EGR |=  1 << 0;
 800373a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);

    //設置PWM模式、輸出比較自動裝載
	TIM2->CCMR1 &= ~(7 << 4);
 800374a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003758:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=   6 << 4;
 800375a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003764:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003768:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=   1 << 3;
 800376a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003774:	f043 0308 	orr.w	r3, r3, #8
 8003778:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM2->CCR1  = 0;
 800377a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800377e:	2200      	movs	r2, #0
 8003780:	635a      	str	r2, [r3, #52]	@ 0x34

    //設置輸出比較始能、輸出極性
	TIM2->CCER  |=   1 << 0;
 8003782:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6213      	str	r3, [r2, #32]
	TIM2->CCER  &= ~(1 << 1);
 8003792:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800379c:	f023 0302 	bic.w	r3, r3, #2
 80037a0:	6213      	str	r3, [r2, #32]

	TIM2->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)
 80037a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80037a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037b0:	6453      	str	r3, [r2, #68]	@ 0x44

	//TIM_Cmd(TIM1, ENABLE);

}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40020000 	.word	0x40020000

080037c4 <PWM2_SetCompare1>:

void PWM2_SetCompare1(uint16_t Compare)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM2->CCR1 = Compare;
 80037ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <Pwm3_Init>:
#include <stm32f446xx.h>


void Pwm3_Init(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
	//開啟GPIOA、TIM3時鐘
	RCC->AHB1ENR |= 1 << 0;
 80037e8:	4b3d      	ldr	r3, [pc, #244]	@ (80038e0 <Pwm3_Init+0xfc>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ec:	4a3c      	ldr	r2, [pc, #240]	@ (80038e0 <Pwm3_Init+0xfc>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= 1 << 1;
 80037f4:	4b3a      	ldr	r3, [pc, #232]	@ (80038e0 <Pwm3_Init+0xfc>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f8:	4a39      	ldr	r2, [pc, #228]	@ (80038e0 <Pwm3_Init+0xfc>)
 80037fa:	f043 0302 	orr.w	r3, r3, #2
 80037fe:	6413      	str	r3, [r2, #64]	@ 0x40

	//Tim3 PWM輸出復用功能 使用TIM3_CH1通道PA6
	GPIOA->AFR[0] &= ~(0xF << 24);
 8003800:	4b38      	ldr	r3, [pc, #224]	@ (80038e4 <Pwm3_Init+0x100>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4a37      	ldr	r2, [pc, #220]	@ (80038e4 <Pwm3_Init+0x100>)
 8003806:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800380a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (2 << 24);
 800380c:	4b35      	ldr	r3, [pc, #212]	@ (80038e4 <Pwm3_Init+0x100>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4a34      	ldr	r2, [pc, #208]	@ (80038e4 <Pwm3_Init+0x100>)
 8003812:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003816:	6213      	str	r3, [r2, #32]


	//設置PA6為復用推挽輸出
	GPIOA->MODER  &=~(3 << 12);
 8003818:	4b32      	ldr	r3, [pc, #200]	@ (80038e4 <Pwm3_Init+0x100>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a31      	ldr	r2, [pc, #196]	@ (80038e4 <Pwm3_Init+0x100>)
 800381e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003822:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 12;
 8003824:	4b2f      	ldr	r3, [pc, #188]	@ (80038e4 <Pwm3_Init+0x100>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a2e      	ldr	r2, [pc, #184]	@ (80038e4 <Pwm3_Init+0x100>)
 800382a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800382e:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 6);
 8003830:	4b2c      	ldr	r3, [pc, #176]	@ (80038e4 <Pwm3_Init+0x100>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a2b      	ldr	r2, [pc, #172]	@ (80038e4 <Pwm3_Init+0x100>)
 8003836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800383a:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 12;
 800383c:	4b29      	ldr	r3, [pc, #164]	@ (80038e4 <Pwm3_Init+0x100>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a28      	ldr	r2, [pc, #160]	@ (80038e4 <Pwm3_Init+0x100>)
 8003842:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8003846:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM3->SMCR &= ~(7 << 0);
 8003848:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <Pwm3_Init+0x104>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a26      	ldr	r2, [pc, #152]	@ (80038e8 <Pwm3_Init+0x104>)
 800384e:	f023 0307 	bic.w	r3, r3, #7
 8003852:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM3->PSC = 4-1;
 8003854:	4b24      	ldr	r3, [pc, #144]	@ (80038e8 <Pwm3_Init+0x104>)
 8003856:	2203      	movs	r2, #3
 8003858:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 1000-1;
 800385a:	4b23      	ldr	r3, [pc, #140]	@ (80038e8 <Pwm3_Init+0x104>)
 800385c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003860:	62da      	str	r2, [r3, #44]	@ 0x2c

	//設置自動裝載、計數方向、始能計數器
	TIM3->CR1 |=  1 << 7;
 8003862:	4b21      	ldr	r3, [pc, #132]	@ (80038e8 <Pwm3_Init+0x104>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a20      	ldr	r2, [pc, #128]	@ (80038e8 <Pwm3_Init+0x104>)
 8003868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800386c:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~(1 << 4);
 800386e:	4b1e      	ldr	r3, [pc, #120]	@ (80038e8 <Pwm3_Init+0x104>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1d      	ldr	r2, [pc, #116]	@ (80038e8 <Pwm3_Init+0x104>)
 8003874:	f023 0310 	bic.w	r3, r3, #16
 8003878:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |=  1 << 0;
 800387a:	4b1b      	ldr	r3, [pc, #108]	@ (80038e8 <Pwm3_Init+0x104>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1a      	ldr	r2, [pc, #104]	@ (80038e8 <Pwm3_Init+0x104>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6013      	str	r3, [r2, #0]

    //設置初始化計數器
	TIM3->EGR |=  1 << 0;
 8003886:	4b18      	ldr	r3, [pc, #96]	@ (80038e8 <Pwm3_Init+0x104>)
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	4a17      	ldr	r2, [pc, #92]	@ (80038e8 <Pwm3_Init+0x104>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);

    //設置PWM模式、輸出比較自動裝載
	TIM3->CCMR1 &= ~(7 << 4);
 8003892:	4b15      	ldr	r3, [pc, #84]	@ (80038e8 <Pwm3_Init+0x104>)
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	4a14      	ldr	r2, [pc, #80]	@ (80038e8 <Pwm3_Init+0x104>)
 8003898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389c:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=   6 << 4;
 800389e:	4b12      	ldr	r3, [pc, #72]	@ (80038e8 <Pwm3_Init+0x104>)
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	4a11      	ldr	r2, [pc, #68]	@ (80038e8 <Pwm3_Init+0x104>)
 80038a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80038a8:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=   1 << 3;
 80038aa:	4b0f      	ldr	r3, [pc, #60]	@ (80038e8 <Pwm3_Init+0x104>)
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	4a0e      	ldr	r2, [pc, #56]	@ (80038e8 <Pwm3_Init+0x104>)
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM3->CCR1  = 0;
 80038b6:	4b0c      	ldr	r3, [pc, #48]	@ (80038e8 <Pwm3_Init+0x104>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	635a      	str	r2, [r3, #52]	@ 0x34

    //設置輸出比較始能、輸出極性
	TIM3->CCER  |=   1 << 0;
 80038bc:	4b0a      	ldr	r3, [pc, #40]	@ (80038e8 <Pwm3_Init+0x104>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4a09      	ldr	r2, [pc, #36]	@ (80038e8 <Pwm3_Init+0x104>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6213      	str	r3, [r2, #32]
	TIM3->CCER  &= ~(1 << 1);
 80038c8:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <Pwm3_Init+0x104>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4a06      	ldr	r2, [pc, #24]	@ (80038e8 <Pwm3_Init+0x104>)
 80038ce:	f023 0302 	bic.w	r3, r3, #2
 80038d2:	6213      	str	r3, [r2, #32]

//	TIM3->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)

	//TIM_Cmd(TIM1, ENABLE);

}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40020000 	.word	0x40020000
 80038e8:	40000400 	.word	0x40000400

080038ec <PWM3_SetCompare1>:

void PWM3_SetCompare1(uint16_t Compare)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM3->CCR1 = Compare;
 80038f6:	4a04      	ldr	r2, [pc, #16]	@ (8003908 <PWM3_SetCompare1+0x1c>)
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40000400 	.word	0x40000400

0800390c <Pwm4_Init>:
#include <stm32f446xx.h>

//使用TIM4 CH1 PB6當PWM輸出
void Pwm4_Init(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
	//開啟GPIOB、TIM4時鐘
	RCC->AHB1ENR |= 1 << 1;
 8003910:	4b3d      	ldr	r3, [pc, #244]	@ (8003a08 <Pwm4_Init+0xfc>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	4a3c      	ldr	r2, [pc, #240]	@ (8003a08 <Pwm4_Init+0xfc>)
 8003916:	f043 0302 	orr.w	r3, r3, #2
 800391a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= 1 << 2;
 800391c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a08 <Pwm4_Init+0xfc>)
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	4a39      	ldr	r2, [pc, #228]	@ (8003a08 <Pwm4_Init+0xfc>)
 8003922:	f043 0304 	orr.w	r3, r3, #4
 8003926:	6413      	str	r3, [r2, #64]	@ 0x40

	//PB6當TIM4復用
	GPIOB->AFR[0] &= ~(0xF << 24);
 8003928:	4b38      	ldr	r3, [pc, #224]	@ (8003a0c <Pwm4_Init+0x100>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4a37      	ldr	r2, [pc, #220]	@ (8003a0c <Pwm4_Init+0x100>)
 800392e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8003932:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=  (2 << 24);
 8003934:	4b35      	ldr	r3, [pc, #212]	@ (8003a0c <Pwm4_Init+0x100>)
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	4a34      	ldr	r2, [pc, #208]	@ (8003a0c <Pwm4_Init+0x100>)
 800393a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800393e:	6213      	str	r3, [r2, #32]


	//設置PB6為復用推挽輸出
	GPIOB->MODER  &=~(3 << 12);
 8003940:	4b32      	ldr	r3, [pc, #200]	@ (8003a0c <Pwm4_Init+0x100>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a31      	ldr	r2, [pc, #196]	@ (8003a0c <Pwm4_Init+0x100>)
 8003946:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800394a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |=  2 << 12;
 800394c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a0c <Pwm4_Init+0x100>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2e      	ldr	r2, [pc, #184]	@ (8003a0c <Pwm4_Init+0x100>)
 8003952:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003956:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &=~(1 << 6);
 8003958:	4b2c      	ldr	r3, [pc, #176]	@ (8003a0c <Pwm4_Init+0x100>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a0c <Pwm4_Init+0x100>)
 800395e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003962:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR|=  3 << 12;
 8003964:	4b29      	ldr	r3, [pc, #164]	@ (8003a0c <Pwm4_Init+0x100>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a28      	ldr	r2, [pc, #160]	@ (8003a0c <Pwm4_Init+0x100>)
 800396a:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800396e:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM4->SMCR &= ~(7 << 0);
 8003970:	4b27      	ldr	r3, [pc, #156]	@ (8003a10 <Pwm4_Init+0x104>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a26      	ldr	r2, [pc, #152]	@ (8003a10 <Pwm4_Init+0x104>)
 8003976:	f023 0307 	bic.w	r3, r3, #7
 800397a:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM4->PSC = 4-1;
 800397c:	4b24      	ldr	r3, [pc, #144]	@ (8003a10 <Pwm4_Init+0x104>)
 800397e:	2203      	movs	r2, #3
 8003980:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 1000-1;
 8003982:	4b23      	ldr	r3, [pc, #140]	@ (8003a10 <Pwm4_Init+0x104>)
 8003984:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003988:	62da      	str	r2, [r3, #44]	@ 0x2c

	//設置自動裝載、計數方向、始能計數器
	TIM4->CR1 |=  1 << 7;
 800398a:	4b21      	ldr	r3, [pc, #132]	@ (8003a10 <Pwm4_Init+0x104>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a20      	ldr	r2, [pc, #128]	@ (8003a10 <Pwm4_Init+0x104>)
 8003990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003994:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~(1 << 4);
 8003996:	4b1e      	ldr	r3, [pc, #120]	@ (8003a10 <Pwm4_Init+0x104>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a10 <Pwm4_Init+0x104>)
 800399c:	f023 0310 	bic.w	r3, r3, #16
 80039a0:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |=  1 << 0;
 80039a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <Pwm4_Init+0x104>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a10 <Pwm4_Init+0x104>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6013      	str	r3, [r2, #0]

    //設置初始化計數器
	TIM4->EGR |=  1 << 0;
 80039ae:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <Pwm4_Init+0x104>)
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <Pwm4_Init+0x104>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);

    //設置PWM模式、輸出比較自動裝載
	TIM4->CCMR1 &= ~(7 << 4);
 80039ba:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <Pwm4_Init+0x104>)
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	4a14      	ldr	r2, [pc, #80]	@ (8003a10 <Pwm4_Init+0x104>)
 80039c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c4:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=   6 << 4;
 80039c6:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <Pwm4_Init+0x104>)
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	4a11      	ldr	r2, [pc, #68]	@ (8003a10 <Pwm4_Init+0x104>)
 80039cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80039d0:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=   1 << 3;
 80039d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <Pwm4_Init+0x104>)
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a10 <Pwm4_Init+0x104>)
 80039d8:	f043 0308 	orr.w	r3, r3, #8
 80039dc:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM4->CCR1  = 0;
 80039de:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <Pwm4_Init+0x104>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	635a      	str	r2, [r3, #52]	@ 0x34

    //設置輸出比較始能、輸出極性
	TIM4->CCER  |=   1 << 0;
 80039e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <Pwm4_Init+0x104>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a09      	ldr	r2, [pc, #36]	@ (8003a10 <Pwm4_Init+0x104>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6213      	str	r3, [r2, #32]
	TIM4->CCER  &= ~(1 << 1);
 80039f0:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <Pwm4_Init+0x104>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a06      	ldr	r2, [pc, #24]	@ (8003a10 <Pwm4_Init+0x104>)
 80039f6:	f023 0302 	bic.w	r3, r3, #2
 80039fa:	6213      	str	r3, [r2, #32]

//	TIM2->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)

	//TIM_Cmd(TIM1, ENABLE);

}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40020400 	.word	0x40020400
 8003a10:	40000800 	.word	0x40000800

08003a14 <PWM4_SetCompare1>:

void PWM4_SetCompare1(uint16_t Compare)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM4->CCR1 = Compare;
 8003a1e:	4a04      	ldr	r2, [pc, #16]	@ (8003a30 <PWM4_SetCompare1+0x1c>)
 8003a20:	88fb      	ldrh	r3, [r7, #6]
 8003a22:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	40000800 	.word	0x40000800

08003a34 <__NVIC_SetPriority>:
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	db0a      	blt.n	8003a5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	490c      	ldr	r1, [pc, #48]	@ (8003a80 <__NVIC_SetPriority+0x4c>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	0112      	lsls	r2, r2, #4
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	440b      	add	r3, r1
 8003a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a5c:	e00a      	b.n	8003a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4908      	ldr	r1, [pc, #32]	@ (8003a84 <__NVIC_SetPriority+0x50>)
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	3b04      	subs	r3, #4
 8003a6c:	0112      	lsls	r2, r2, #4
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	440b      	add	r3, r1
 8003a72:	761a      	strb	r2, [r3, #24]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000e100 	.word	0xe000e100
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <Serial_Init>:
  * 函    数：串口初始化
  * 参    数：无
  * 返 回 值：无
  */
void Serial_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0

	//開啟USART1、GPIOA時鐘
	RCC->APB2ENR |= 1 << 4;
 8003a8c:	4b49      	ldr	r3, [pc, #292]	@ (8003bb4 <Serial_Init+0x12c>)
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a90:	4a48      	ldr	r2, [pc, #288]	@ (8003bb4 <Serial_Init+0x12c>)
 8003a92:	f043 0310 	orr.w	r3, r3, #16
 8003a96:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= 1 << 0;
 8003a98:	4b46      	ldr	r3, [pc, #280]	@ (8003bb4 <Serial_Init+0x12c>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	4a45      	ldr	r2, [pc, #276]	@ (8003bb4 <Serial_Init+0x12c>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6313      	str	r3, [r2, #48]	@ 0x30
	

	//PA9為TX復用輸出、PA10為RX上拉輸入
	GPIOA->AFR[1] &= ~(0xF << 4);  // 清除 AFRH9（PA9）
 8003aa4:	4b44      	ldr	r3, [pc, #272]	@ (8003bb8 <Serial_Init+0x130>)
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	4a43      	ldr	r2, [pc, #268]	@ (8003bb8 <Serial_Init+0x130>)
 8003aaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003aae:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (7 << 4);    // AF7 = USART1_TX
 8003ab0:	4b41      	ldr	r3, [pc, #260]	@ (8003bb8 <Serial_Init+0x130>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	4a40      	ldr	r2, [pc, #256]	@ (8003bb8 <Serial_Init+0x130>)
 8003ab6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003aba:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(0xF << 8);  // 清除 AFRH10（PA10）
 8003abc:	4b3e      	ldr	r3, [pc, #248]	@ (8003bb8 <Serial_Init+0x130>)
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	4a3d      	ldr	r2, [pc, #244]	@ (8003bb8 <Serial_Init+0x130>)
 8003ac2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ac6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (7 << 8);    // AF7 = USART1_RX
 8003ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb8 <Serial_Init+0x130>)
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	4a3a      	ldr	r2, [pc, #232]	@ (8003bb8 <Serial_Init+0x130>)
 8003ace:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ad2:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOA->MODER &= ~(3 << 18);  // 清 PA9 模式位
 8003ad4:	4b38      	ldr	r3, [pc, #224]	@ (8003bb8 <Serial_Init+0x130>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a37      	ldr	r2, [pc, #220]	@ (8003bb8 <Serial_Init+0x130>)
 8003ada:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8003ade:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 18;
 8003ae0:	4b35      	ldr	r3, [pc, #212]	@ (8003bb8 <Serial_Init+0x130>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a34      	ldr	r2, [pc, #208]	@ (8003bb8 <Serial_Init+0x130>)
 8003ae6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003aea:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 9);
 8003aec:	4b32      	ldr	r3, [pc, #200]	@ (8003bb8 <Serial_Init+0x130>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a31      	ldr	r2, [pc, #196]	@ (8003bb8 <Serial_Init+0x130>)
 8003af2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003af6:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 18;
 8003af8:	4b2f      	ldr	r3, [pc, #188]	@ (8003bb8 <Serial_Init+0x130>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	4a2e      	ldr	r2, [pc, #184]	@ (8003bb8 <Serial_Init+0x130>)
 8003afe:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8003b02:	6093      	str	r3, [r2, #8]
	
	GPIOA->MODER &= ~(3 << 20);  // PA10 模式為輸入或 AF
 8003b04:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb8 <Serial_Init+0x130>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb8 <Serial_Init+0x130>)
 8003b0a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003b0e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (2 << 20);  // 設為 AF 模式
 8003b10:	4b29      	ldr	r3, [pc, #164]	@ (8003bb8 <Serial_Init+0x130>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a28      	ldr	r2, [pc, #160]	@ (8003bb8 <Serial_Init+0x130>)
 8003b16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b1a:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3 << 20);
 8003b1c:	4b26      	ldr	r3, [pc, #152]	@ (8003bb8 <Serial_Init+0x130>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a25      	ldr	r2, [pc, #148]	@ (8003bb8 <Serial_Init+0x130>)
 8003b22:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003b26:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (1 << 20);  // 上拉
 8003b28:	4b23      	ldr	r3, [pc, #140]	@ (8003bb8 <Serial_Init+0x130>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a22      	ldr	r2, [pc, #136]	@ (8003bb8 <Serial_Init+0x130>)
 8003b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b32:	60d3      	str	r3, [r2, #12]



	//設置字長(8位元)、校驗(不使用)、發送始能、接收始能
	USART1->CR1 &= ~(1 << 12);
 8003b34:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <Serial_Init+0x134>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a20      	ldr	r2, [pc, #128]	@ (8003bbc <Serial_Init+0x134>)
 8003b3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b3e:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1 << 10);
 8003b40:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <Serial_Init+0x134>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a1d      	ldr	r2, [pc, #116]	@ (8003bbc <Serial_Init+0x134>)
 8003b46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b4a:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= 1 << 3;
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bbc <Serial_Init+0x134>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a1a      	ldr	r2, [pc, #104]	@ (8003bbc <Serial_Init+0x134>)
 8003b52:	f043 0308 	orr.w	r3, r3, #8
 8003b56:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= 1 << 2;
 8003b58:	4b18      	ldr	r3, [pc, #96]	@ (8003bbc <Serial_Init+0x134>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a17      	ldr	r2, [pc, #92]	@ (8003bbc <Serial_Init+0x134>)
 8003b5e:	f043 0304 	orr.w	r3, r3, #4
 8003b62:	60d3      	str	r3, [r2, #12]

	//設置停止位(1bit)
	USART1->CR2 &= ~(3 << 12);
 8003b64:	4b15      	ldr	r3, [pc, #84]	@ (8003bbc <Serial_Init+0x134>)
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	4a14      	ldr	r2, [pc, #80]	@ (8003bbc <Serial_Init+0x134>)
 8003b6a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b6e:	6113      	str	r3, [r2, #16]

	//設置硬體流控(不用)
	USART1->CR3 &= ~(7 << 8);
 8003b70:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <Serial_Init+0x134>)
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	4a11      	ldr	r2, [pc, #68]	@ (8003bbc <Serial_Init+0x134>)
 8003b76:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b7a:	6153      	str	r3, [r2, #20]

	//設定波特律(115200*10)
	USART1->BRR = (4 << 4) | (9 & 0xF);
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <Serial_Init+0x134>)
 8003b7e:	2249      	movs	r2, #73	@ 0x49
 8003b80:	609a      	str	r2, [r3, #8]


	//設置當RXNE為1時，產生USART1中斷
	USART1->CR1 |= 1 << 5;
 8003b82:	4b0e      	ldr	r3, [pc, #56]	@ (8003bbc <Serial_Init+0x134>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	4a0d      	ldr	r2, [pc, #52]	@ (8003bbc <Serial_Init+0x134>)
 8003b88:	f043 0320 	orr.w	r3, r3, #32
 8003b8c:	60d3      	str	r3, [r2, #12]

	//設置USART始能
	USART1->CR1 |= 1 << 13;
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <Serial_Init+0x134>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <Serial_Init+0x134>)
 8003b94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b98:	60d3      	str	r3, [r2, #12]

	//設置NVIC打開USART1的IRQHandler
	NVIC->ISER[1] |= 1 << 5;  //位置在37
 8003b9a:	4b09      	ldr	r3, [pc, #36]	@ (8003bc0 <Serial_Init+0x138>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4a08      	ldr	r2, [pc, #32]	@ (8003bc0 <Serial_Init+0x138>)
 8003ba0:	f043 0320 	orr.w	r3, r3, #32
 8003ba4:	6053      	str	r3, [r2, #4]

	NVIC_SetPriority(USART1_IRQn, 7); // OK
 8003ba6:	2107      	movs	r1, #7
 8003ba8:	2025      	movs	r0, #37	@ 0x25
 8003baa:	f7ff ff43 	bl	8003a34 <__NVIC_SetPriority>

}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40020000 	.word	0x40020000
 8003bbc:	40011000 	.word	0x40011000
 8003bc0:	e000e100 	.word	0xe000e100

08003bc4 <Serial_SendByte>:
  * 函    数：串口发送一个字节
  * 参    数：Byte 要发送的一个字节
  * 返 回 值：无
  */
void Serial_SendByte(uint8_t Byte)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
	//將字節寫入TDR
	USART1->DR = Byte & (uint16_t)0x1FF;
 8003bce:	4a08      	ldr	r2, [pc, #32]	@ (8003bf0 <Serial_SendByte+0x2c>)
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	6053      	str	r3, [r2, #4]
	//判斷TDR是否為空，若空了代表已經送到移位暫存器內，會被設置成1
	while( ( USART1->SR & (1 << 7) ) == 0);
 8003bd4:	bf00      	nop
 8003bd6:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <Serial_SendByte+0x2c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f9      	beq.n	8003bd6 <Serial_SendByte+0x12>
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	40011000 	.word	0x40011000

08003bf4 <USART1_IRQHandler>:
  * 注意事项：此函数为中断函数，无需调用，中断触发后自动执行
  *           函数名为预留的指定名称，可以从启动文件复制
  *           请确保函数名正确，不能有任何差异，否则中断函数将不能进入
  */
void USART1_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
	osMutexAcquire(EncoderMutex, osWaitForever);  // 獲取 Mutex，保護 LED2
 8003bfa:	4b60      	ldr	r3, [pc, #384]	@ (8003d7c <USART1_IRQHandler+0x188>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fcbb 	bl	800457e <osMutexAcquire>

	static uint8_t RxState = 0;		//定义表示当前状态机状态的静态变量
	static uint8_t Data_L,Data_H;

	if ( USART1->SR & (1 << 5) ) 		//判断是否是USART1的接收事件触发的中断
 8003c08:	4b5d      	ldr	r3, [pc, #372]	@ (8003d80 <USART1_IRQHandler+0x18c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80af 	beq.w	8003d74 <USART1_IRQHandler+0x180>
	{
		uint8_t RxData = USART1->DR;				//读取数据寄存器，存放在接收的数据变量
 8003c16:	4b5a      	ldr	r3, [pc, #360]	@ (8003d80 <USART1_IRQHandler+0x18c>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	71fb      	strb	r3, [r7, #7]

		/*使用状态机*/

		//Start
		if (RxState == 0)
 8003c1c:	4b59      	ldr	r3, [pc, #356]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d107      	bne.n	8003c34 <USART1_IRQHandler+0x40>
		{
			if (RxData == 0xFF)			//如果数据确实是包头
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	2bff      	cmp	r3, #255	@ 0xff
 8003c28:	f040 8099 	bne.w	8003d5e <USART1_IRQHandler+0x16a>
			{
				RxState = 1;			//置下一个状态
 8003c2c:	4b55      	ldr	r3, [pc, #340]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	e094      	b.n	8003d5e <USART1_IRQHandler+0x16a>
			}
		}

		//1st
		else if(RxState == 1)
 8003c34:	4b53      	ldr	r3, [pc, #332]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <USART1_IRQHandler+0x56>
		{
			Data_L = RxData;
 8003c3c:	4a52      	ldr	r2, [pc, #328]	@ (8003d88 <USART1_IRQHandler+0x194>)
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	7013      	strb	r3, [r2, #0]
			RxState = 2;
 8003c42:	4b50      	ldr	r3, [pc, #320]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003c44:	2202      	movs	r2, #2
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	e089      	b.n	8003d5e <USART1_IRQHandler+0x16a>
		}
		else if(RxState == 2)
 8003c4a:	4b4e      	ldr	r3, [pc, #312]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d112      	bne.n	8003c78 <USART1_IRQHandler+0x84>
		{
			Data_H = RxData;
 8003c52:	4a4e      	ldr	r2, [pc, #312]	@ (8003d8c <USART1_IRQHandler+0x198>)
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[0] = (Data_H << 8) | Data_L;
 8003c58:	4b4c      	ldr	r3, [pc, #304]	@ (8003d8c <USART1_IRQHandler+0x198>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	b21a      	sxth	r2, r3
 8003c60:	4b49      	ldr	r3, [pc, #292]	@ (8003d88 <USART1_IRQHandler+0x194>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	4313      	orrs	r3, r2
 8003c68:	b21b      	sxth	r3, r3
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	4b48      	ldr	r3, [pc, #288]	@ (8003d90 <USART1_IRQHandler+0x19c>)
 8003c6e:	801a      	strh	r2, [r3, #0]
			RxState = 3;
 8003c70:	4b44      	ldr	r3, [pc, #272]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003c72:	2203      	movs	r2, #3
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e072      	b.n	8003d5e <USART1_IRQHandler+0x16a>
		}
		//2nd
		else if(RxState == 3)
 8003c78:	4b42      	ldr	r3, [pc, #264]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d106      	bne.n	8003c8e <USART1_IRQHandler+0x9a>
		{
			Data_L = RxData;
 8003c80:	4a41      	ldr	r2, [pc, #260]	@ (8003d88 <USART1_IRQHandler+0x194>)
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	7013      	strb	r3, [r2, #0]
			RxState = 4;
 8003c86:	4b3f      	ldr	r3, [pc, #252]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003c88:	2204      	movs	r2, #4
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	e067      	b.n	8003d5e <USART1_IRQHandler+0x16a>
		}
		else if(RxState == 4)
 8003c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d112      	bne.n	8003cbc <USART1_IRQHandler+0xc8>
		{
			Data_H = RxData;
 8003c96:	4a3d      	ldr	r2, [pc, #244]	@ (8003d8c <USART1_IRQHandler+0x198>)
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[1] = (Data_H << 8) | Data_L;
 8003c9c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d8c <USART1_IRQHandler+0x198>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	b21a      	sxth	r2, r3
 8003ca4:	4b38      	ldr	r3, [pc, #224]	@ (8003d88 <USART1_IRQHandler+0x194>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	4313      	orrs	r3, r2
 8003cac:	b21b      	sxth	r3, r3
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	4b37      	ldr	r3, [pc, #220]	@ (8003d90 <USART1_IRQHandler+0x19c>)
 8003cb2:	805a      	strh	r2, [r3, #2]
			RxState = 5;
 8003cb4:	4b33      	ldr	r3, [pc, #204]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e050      	b.n	8003d5e <USART1_IRQHandler+0x16a>
		}
		//3rd
		else if(RxState == 5)
 8003cbc:	4b31      	ldr	r3, [pc, #196]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b05      	cmp	r3, #5
 8003cc2:	d106      	bne.n	8003cd2 <USART1_IRQHandler+0xde>
		{
			Data_L = RxData;
 8003cc4:	4a30      	ldr	r2, [pc, #192]	@ (8003d88 <USART1_IRQHandler+0x194>)
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	7013      	strb	r3, [r2, #0]
			RxState = 6;
 8003cca:	4b2e      	ldr	r3, [pc, #184]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003ccc:	2206      	movs	r2, #6
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	e045      	b.n	8003d5e <USART1_IRQHandler+0x16a>
		}
		else if(RxState == 6)
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d112      	bne.n	8003d00 <USART1_IRQHandler+0x10c>
		{
			Data_H = RxData;
 8003cda:	4a2c      	ldr	r2, [pc, #176]	@ (8003d8c <USART1_IRQHandler+0x198>)
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[2] = (Data_H << 8) | Data_L;
 8003ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d8c <USART1_IRQHandler+0x198>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	b21a      	sxth	r2, r3
 8003ce8:	4b27      	ldr	r3, [pc, #156]	@ (8003d88 <USART1_IRQHandler+0x194>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b21b      	sxth	r3, r3
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	b21b      	sxth	r3, r3
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	4b26      	ldr	r3, [pc, #152]	@ (8003d90 <USART1_IRQHandler+0x19c>)
 8003cf6:	809a      	strh	r2, [r3, #4]
			RxState = 7;
 8003cf8:	4b22      	ldr	r3, [pc, #136]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003cfa:	2207      	movs	r2, #7
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e02e      	b.n	8003d5e <USART1_IRQHandler+0x16a>
		}
		//4th
		else if(RxState == 7)
 8003d00:	4b20      	ldr	r3, [pc, #128]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b07      	cmp	r3, #7
 8003d06:	d106      	bne.n	8003d16 <USART1_IRQHandler+0x122>
		{
			Data_L = RxData;
 8003d08:	4a1f      	ldr	r2, [pc, #124]	@ (8003d88 <USART1_IRQHandler+0x194>)
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	7013      	strb	r3, [r2, #0]
			RxState = 8;
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003d10:	2208      	movs	r2, #8
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	e023      	b.n	8003d5e <USART1_IRQHandler+0x16a>
		}
		else if(RxState == 8)
 8003d16:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d112      	bne.n	8003d44 <USART1_IRQHandler+0x150>
		{
			Data_H = RxData;
 8003d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d8c <USART1_IRQHandler+0x198>)
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[3] = (Data_H << 8) | Data_L;
 8003d24:	4b19      	ldr	r3, [pc, #100]	@ (8003d8c <USART1_IRQHandler+0x198>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	b21a      	sxth	r2, r3
 8003d2c:	4b16      	ldr	r3, [pc, #88]	@ (8003d88 <USART1_IRQHandler+0x194>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	b21b      	sxth	r3, r3
 8003d32:	4313      	orrs	r3, r2
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	4b15      	ldr	r3, [pc, #84]	@ (8003d90 <USART1_IRQHandler+0x19c>)
 8003d3a:	80da      	strh	r2, [r3, #6]
			RxState = 9;
 8003d3c:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003d3e:	2209      	movs	r2, #9
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e00c      	b.n	8003d5e <USART1_IRQHandler+0x16a>
		}

		//end
		else if (RxState == 9)
 8003d44:	4b0f      	ldr	r3, [pc, #60]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b09      	cmp	r3, #9
 8003d4a:	d108      	bne.n	8003d5e <USART1_IRQHandler+0x16a>
		{
			if (RxData == 0xFE)			//如果数据确实是包尾部
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003d50:	d105      	bne.n	8003d5e <USART1_IRQHandler+0x16a>
			{
				RxState = 0;			//状态归0
 8003d52:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <USART1_IRQHandler+0x190>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	701a      	strb	r2, [r3, #0]
				Serial_RxFlag = 1;		//接收数据包标志位置1，成功接收一个数据包
 8003d58:	4b0e      	ldr	r3, [pc, #56]	@ (8003d94 <USART1_IRQHandler+0x1a0>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
			}
		}

		osMutexRelease(EncoderMutex);  // 釋放 Mutex
 8003d5e:	4b07      	ldr	r3, [pc, #28]	@ (8003d7c <USART1_IRQHandler+0x188>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fc56 	bl	8004614 <osMutexRelease>
		USART1->SR &= ~(1 << 5);
 8003d68:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <USART1_IRQHandler+0x18c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a04      	ldr	r2, [pc, #16]	@ (8003d80 <USART1_IRQHandler+0x18c>)
 8003d6e:	f023 0320 	bic.w	r3, r3, #32
 8003d72:	6013      	str	r3, [r2, #0]
	}
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20000088 	.word	0x20000088
 8003d80:	40011000 	.word	0x40011000
 8003d84:	20000248 	.word	0x20000248
 8003d88:	20000249 	.word	0x20000249
 8003d8c:	2000024a 	.word	0x2000024a
 8003d90:	20000240 	.word	0x20000240
 8003d94:	2000023e 	.word	0x2000023e

08003d98 <__NVIC_SetPriority>:
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	6039      	str	r1, [r7, #0]
 8003da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	db0a      	blt.n	8003dc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	490c      	ldr	r1, [pc, #48]	@ (8003de4 <__NVIC_SetPriority+0x4c>)
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	0112      	lsls	r2, r2, #4
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	440b      	add	r3, r1
 8003dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003dc0:	e00a      	b.n	8003dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	4908      	ldr	r1, [pc, #32]	@ (8003de8 <__NVIC_SetPriority+0x50>)
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	3b04      	subs	r3, #4
 8003dd0:	0112      	lsls	r2, r2, #4
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	761a      	strb	r2, [r3, #24]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000e100 	.word	0xe000e100
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <JoinStick_Init>:

uint16_t JoinStick[3];
uint8_t  JoinStickFlag;

void JoinStick_Init(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0

	//開啟USART2、GPIOA時鐘
	RCC->APB1ENR |= 1 << 18;
 8003df0:	4b54      	ldr	r3, [pc, #336]	@ (8003f44 <JoinStick_Init+0x158>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	4a53      	ldr	r2, [pc, #332]	@ (8003f44 <JoinStick_Init+0x158>)
 8003df6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dfa:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= 1 << 2;
 8003dfc:	4b51      	ldr	r3, [pc, #324]	@ (8003f44 <JoinStick_Init+0x158>)
 8003dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e00:	4a50      	ldr	r2, [pc, #320]	@ (8003f44 <JoinStick_Init+0x158>)
 8003e02:	f043 0304 	orr.w	r3, r3, #4
 8003e06:	6313      	str	r3, [r2, #48]	@ 0x30

	//TX
	GPIOC->MODER &= ~(3 << 20);  // 清 PA2 模式位
 8003e08:	4b4f      	ldr	r3, [pc, #316]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a4e      	ldr	r2, [pc, #312]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e0e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003e12:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  |=  2 << 20;
 8003e14:	4b4c      	ldr	r3, [pc, #304]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a4b      	ldr	r2, [pc, #300]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e1e:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &=~(1 << 10);
 8003e20:	4b49      	ldr	r3, [pc, #292]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a48      	ldr	r2, [pc, #288]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e2a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR|=  3 << 20;
 8003e2c:	4b46      	ldr	r3, [pc, #280]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a45      	ldr	r2, [pc, #276]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e32:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003e36:	6093      	str	r3, [r2, #8]

	//RX
	GPIOC->MODER &= ~(3 << 22);  // PA3 模式為輸入或 AF
 8003e38:	4b43      	ldr	r3, [pc, #268]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a42      	ldr	r2, [pc, #264]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e3e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003e42:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (2 << 22);  // 設為 AF 模式
 8003e44:	4b40      	ldr	r3, [pc, #256]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a3f      	ldr	r2, [pc, #252]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e4e:	6013      	str	r3, [r2, #0]
	GPIOC->OSPEEDR|=  1 << 22;
 8003e50:	4b3d      	ldr	r3, [pc, #244]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a3c      	ldr	r2, [pc, #240]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e5a:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~(3 << 22);
 8003e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a39      	ldr	r2, [pc, #228]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e62:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003e66:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (1 << 22);  // 上拉
 8003e68:	4b37      	ldr	r3, [pc, #220]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a36      	ldr	r2, [pc, #216]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e6e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e72:	60d3      	str	r3, [r2, #12]

	//PA2為TX復用輸出、PA3為RX上拉輸入
	GPIOC->AFR[1] &= ~(0xF << 8);  // 清除 AFRH9（PA2）
 8003e74:	4b34      	ldr	r3, [pc, #208]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	4a33      	ldr	r2, [pc, #204]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e7a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e7e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] |=  (7 << 8);    // AF7 = USART2_TX
 8003e80:	4b31      	ldr	r3, [pc, #196]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	4a30      	ldr	r2, [pc, #192]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e8a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] &= ~(0xF << 12);  // 清除 AFRH10（PA2）
 8003e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	4a2d      	ldr	r2, [pc, #180]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e96:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] |=  (7 << 12);    // AF7 = USART2_RX
 8003e98:	4b2b      	ldr	r3, [pc, #172]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8003f48 <JoinStick_Init+0x15c>)
 8003e9e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8003ea2:	6253      	str	r3, [r2, #36]	@ 0x24

//	//設置波特率(9600)
	USART3->BRR  =  (273 << 4) | (0xD << 0);
 8003ea4:	4b29      	ldr	r3, [pc, #164]	@ (8003f4c <JoinStick_Init+0x160>)
 8003ea6:	f241 121d 	movw	r2, #4381	@ 0x111d
 8003eaa:	609a      	str	r2, [r3, #8]
	USART3->CR1 &= ~(1 << 15);
 8003eac:	4b27      	ldr	r3, [pc, #156]	@ (8003f4c <JoinStick_Init+0x160>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	@ (8003f4c <JoinStick_Init+0x160>)
 8003eb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003eb6:	60d3      	str	r3, [r2, #12]

//	//設置波特率(115200)
	USART3->BRR  =  (22 << 4) | (7 << 0);
 8003eb8:	4b24      	ldr	r3, [pc, #144]	@ (8003f4c <JoinStick_Init+0x160>)
 8003eba:	f240 1267 	movw	r2, #359	@ 0x167
 8003ebe:	609a      	str	r2, [r3, #8]
	USART3->CR1 &= ~(1 << 15);
 8003ec0:	4b22      	ldr	r3, [pc, #136]	@ (8003f4c <JoinStick_Init+0x160>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a21      	ldr	r2, [pc, #132]	@ (8003f4c <JoinStick_Init+0x160>)
 8003ec6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003eca:	60d3      	str	r3, [r2, #12]

	//設置字長(8位元)、校驗(不使用)、發送始能、接收始能
	USART3->CR1 &= ~(1 << 12);
 8003ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8003f4c <JoinStick_Init+0x160>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8003f4c <JoinStick_Init+0x160>)
 8003ed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ed6:	60d3      	str	r3, [r2, #12]
	USART3->CR1 &= ~(1 << 10);
 8003ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f4c <JoinStick_Init+0x160>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a1b      	ldr	r2, [pc, #108]	@ (8003f4c <JoinStick_Init+0x160>)
 8003ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee2:	60d3      	str	r3, [r2, #12]
	USART3->CR1 |= 1 << 3;
 8003ee4:	4b19      	ldr	r3, [pc, #100]	@ (8003f4c <JoinStick_Init+0x160>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	4a18      	ldr	r2, [pc, #96]	@ (8003f4c <JoinStick_Init+0x160>)
 8003eea:	f043 0308 	orr.w	r3, r3, #8
 8003eee:	60d3      	str	r3, [r2, #12]
	USART3->CR1 |= 1 << 2;
 8003ef0:	4b16      	ldr	r3, [pc, #88]	@ (8003f4c <JoinStick_Init+0x160>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a15      	ldr	r2, [pc, #84]	@ (8003f4c <JoinStick_Init+0x160>)
 8003ef6:	f043 0304 	orr.w	r3, r3, #4
 8003efa:	60d3      	str	r3, [r2, #12]

	//設置停止位(1bit)
	USART3->CR2 &= ~(3 << 12);
 8003efc:	4b13      	ldr	r3, [pc, #76]	@ (8003f4c <JoinStick_Init+0x160>)
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	4a12      	ldr	r2, [pc, #72]	@ (8003f4c <JoinStick_Init+0x160>)
 8003f02:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f06:	6113      	str	r3, [r2, #16]

	//設置硬體流控(不用)
	USART3->CR3 &= ~(7 << 8);
 8003f08:	4b10      	ldr	r3, [pc, #64]	@ (8003f4c <JoinStick_Init+0x160>)
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f4c <JoinStick_Init+0x160>)
 8003f0e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f12:	6153      	str	r3, [r2, #20]


	//設置當RXNE為1時，產生USART1中斷
	USART3->CR1 |= 1 << 5;
 8003f14:	4b0d      	ldr	r3, [pc, #52]	@ (8003f4c <JoinStick_Init+0x160>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a0c      	ldr	r2, [pc, #48]	@ (8003f4c <JoinStick_Init+0x160>)
 8003f1a:	f043 0320 	orr.w	r3, r3, #32
 8003f1e:	60d3      	str	r3, [r2, #12]

	//設置USART始能
	USART3->CR1 |= 1 << 13;
 8003f20:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <JoinStick_Init+0x160>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4a09      	ldr	r2, [pc, #36]	@ (8003f4c <JoinStick_Init+0x160>)
 8003f26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f2a:	60d3      	str	r3, [r2, #12]

	//設置NVIC打開USART2的IRQHandler
	NVIC->ISER[1] |= 1 << 7;  //位置在38
 8003f2c:	4b08      	ldr	r3, [pc, #32]	@ (8003f50 <JoinStick_Init+0x164>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a07      	ldr	r2, [pc, #28]	@ (8003f50 <JoinStick_Init+0x164>)
 8003f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f36:	6053      	str	r3, [r2, #4]

	NVIC_SetPriority(USART3_IRQn, 8); // OK
 8003f38:	2108      	movs	r1, #8
 8003f3a:	2027      	movs	r0, #39	@ 0x27
 8003f3c:	f7ff ff2c 	bl	8003d98 <__NVIC_SetPriority>

}
 8003f40:	bf00      	nop
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40020800 	.word	0x40020800
 8003f4c:	40004800 	.word	0x40004800
 8003f50:	e000e100 	.word	0xe000e100

08003f54 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0

	osMutexAcquire(HC05Mutex, osWaitForever);  // 獲取 Mutex，保護 LED2
 8003f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004098 <USART3_IRQHandler+0x144>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fb0b 	bl	800457e <osMutexAcquire>


	static uint8_t RxState = 0;		//定义表示当前状态机状态的静态变量
	static uint8_t Data_L,Data_H;

	if ( USART3->SR & (1 << 5) ) 		//判断是否是USART1的接收事件触发的中断
 8003f68:	4b4c      	ldr	r3, [pc, #304]	@ (800409c <USART3_IRQHandler+0x148>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 808c 	beq.w	800408e <USART3_IRQHandler+0x13a>
	{
		uint8_t RxData = USART3->DR;				//读取数据寄存器，存放在接收的数据变量
 8003f76:	4b49      	ldr	r3, [pc, #292]	@ (800409c <USART3_IRQHandler+0x148>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	71fb      	strb	r3, [r7, #7]

		/*使用状态机*/

		//Start
		if (RxState == 0)
 8003f7c:	4b48      	ldr	r3, [pc, #288]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <USART3_IRQHandler+0x3e>
		{
			if (RxData == 0xFF)			//如果数据确实是包头
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	2bff      	cmp	r3, #255	@ 0xff
 8003f88:	d176      	bne.n	8004078 <USART3_IRQHandler+0x124>
			{
				RxState = 1;			//置下一个状态
 8003f8a:	4b45      	ldr	r3, [pc, #276]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e072      	b.n	8004078 <USART3_IRQHandler+0x124>
			}
		}

		//1st
		else if(RxState == 1)
 8003f92:	4b43      	ldr	r3, [pc, #268]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d106      	bne.n	8003fa8 <USART3_IRQHandler+0x54>
		{
			Data_L = RxData;
 8003f9a:	4a42      	ldr	r2, [pc, #264]	@ (80040a4 <USART3_IRQHandler+0x150>)
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	7013      	strb	r3, [r2, #0]
			RxState = 2;
 8003fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e067      	b.n	8004078 <USART3_IRQHandler+0x124>
		}
		else if(RxState == 2)
 8003fa8:	4b3d      	ldr	r3, [pc, #244]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d112      	bne.n	8003fd6 <USART3_IRQHandler+0x82>
		{
			Data_H = RxData;
 8003fb0:	4a3d      	ldr	r2, [pc, #244]	@ (80040a8 <USART3_IRQHandler+0x154>)
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	7013      	strb	r3, [r2, #0]
			JoinStick[0] = (Data_H << 8) | Data_L;
 8003fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80040a8 <USART3_IRQHandler+0x154>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	b21a      	sxth	r2, r3
 8003fbe:	4b39      	ldr	r3, [pc, #228]	@ (80040a4 <USART3_IRQHandler+0x150>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b21b      	sxth	r3, r3
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	b21b      	sxth	r3, r3
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	4b38      	ldr	r3, [pc, #224]	@ (80040ac <USART3_IRQHandler+0x158>)
 8003fcc:	801a      	strh	r2, [r3, #0]
			RxState = 3;
 8003fce:	4b34      	ldr	r3, [pc, #208]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	701a      	strb	r2, [r3, #0]
 8003fd4:	e050      	b.n	8004078 <USART3_IRQHandler+0x124>
		}
		//2nd
		else if(RxState == 3)
 8003fd6:	4b32      	ldr	r3, [pc, #200]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d106      	bne.n	8003fec <USART3_IRQHandler+0x98>
		{
			Data_L = RxData;
 8003fde:	4a31      	ldr	r2, [pc, #196]	@ (80040a4 <USART3_IRQHandler+0x150>)
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	7013      	strb	r3, [r2, #0]
			RxState = 4;
 8003fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e045      	b.n	8004078 <USART3_IRQHandler+0x124>
		}
		else if(RxState == 4)
 8003fec:	4b2c      	ldr	r3, [pc, #176]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d112      	bne.n	800401a <USART3_IRQHandler+0xc6>
		{
			Data_H = RxData;
 8003ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80040a8 <USART3_IRQHandler+0x154>)
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	7013      	strb	r3, [r2, #0]
			JoinStick[1] = (Data_H << 8) | Data_L;
 8003ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80040a8 <USART3_IRQHandler+0x154>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	b21a      	sxth	r2, r3
 8004002:	4b28      	ldr	r3, [pc, #160]	@ (80040a4 <USART3_IRQHandler+0x150>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	b21b      	sxth	r3, r3
 8004008:	4313      	orrs	r3, r2
 800400a:	b21b      	sxth	r3, r3
 800400c:	b29a      	uxth	r2, r3
 800400e:	4b27      	ldr	r3, [pc, #156]	@ (80040ac <USART3_IRQHandler+0x158>)
 8004010:	805a      	strh	r2, [r3, #2]
			RxState = 5;
 8004012:	4b23      	ldr	r3, [pc, #140]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8004014:	2205      	movs	r2, #5
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	e02e      	b.n	8004078 <USART3_IRQHandler+0x124>
		}
		//3rd
		else if(RxState == 5)
 800401a:	4b21      	ldr	r3, [pc, #132]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b05      	cmp	r3, #5
 8004020:	d106      	bne.n	8004030 <USART3_IRQHandler+0xdc>
		{
			Data_L = RxData;
 8004022:	4a20      	ldr	r2, [pc, #128]	@ (80040a4 <USART3_IRQHandler+0x150>)
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	7013      	strb	r3, [r2, #0]
			RxState = 6;
 8004028:	4b1d      	ldr	r3, [pc, #116]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 800402a:	2206      	movs	r2, #6
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e023      	b.n	8004078 <USART3_IRQHandler+0x124>
		}
		else if(RxState == 6)
 8004030:	4b1b      	ldr	r3, [pc, #108]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b06      	cmp	r3, #6
 8004036:	d112      	bne.n	800405e <USART3_IRQHandler+0x10a>
		{
			Data_H = RxData;
 8004038:	4a1b      	ldr	r2, [pc, #108]	@ (80040a8 <USART3_IRQHandler+0x154>)
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	7013      	strb	r3, [r2, #0]
			JoinStick[2] = (Data_H << 8) | Data_L;
 800403e:	4b1a      	ldr	r3, [pc, #104]	@ (80040a8 <USART3_IRQHandler+0x154>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	b21a      	sxth	r2, r3
 8004046:	4b17      	ldr	r3, [pc, #92]	@ (80040a4 <USART3_IRQHandler+0x150>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	b21b      	sxth	r3, r3
 800404c:	4313      	orrs	r3, r2
 800404e:	b21b      	sxth	r3, r3
 8004050:	b29a      	uxth	r2, r3
 8004052:	4b16      	ldr	r3, [pc, #88]	@ (80040ac <USART3_IRQHandler+0x158>)
 8004054:	809a      	strh	r2, [r3, #4]
			RxState = 7;
 8004056:	4b12      	ldr	r3, [pc, #72]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8004058:	2207      	movs	r2, #7
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	e00c      	b.n	8004078 <USART3_IRQHandler+0x124>
		}

		//end
		else if (RxState == 7)
 800405e:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b07      	cmp	r3, #7
 8004064:	d108      	bne.n	8004078 <USART3_IRQHandler+0x124>
		{
			if (RxData == 0xFE)			//如果数据确实是包尾部
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	2bfe      	cmp	r3, #254	@ 0xfe
 800406a:	d105      	bne.n	8004078 <USART3_IRQHandler+0x124>
			{
				RxState = 0;			//状态归0
 800406c:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <USART3_IRQHandler+0x14c>)
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
				JoinStickFlag = 1;		//接收数据包标志位置1，成功接收一个数据包
 8004072:	4b0f      	ldr	r3, [pc, #60]	@ (80040b0 <USART3_IRQHandler+0x15c>)
 8004074:	2201      	movs	r2, #1
 8004076:	701a      	strb	r2, [r3, #0]
			}
		}

		osMutexRelease(HC05Mutex);  // 釋放 Mutex
 8004078:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <USART3_IRQHandler+0x144>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fac9 	bl	8004614 <osMutexRelease>

		USART3->SR &= ~(1 << 5);
 8004082:	4b06      	ldr	r3, [pc, #24]	@ (800409c <USART3_IRQHandler+0x148>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a05      	ldr	r2, [pc, #20]	@ (800409c <USART3_IRQHandler+0x148>)
 8004088:	f023 0320 	bic.w	r3, r3, #32
 800408c:	6013      	str	r3, [r2, #0]
	}
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	2000008c 	.word	0x2000008c
 800409c:	40004800 	.word	0x40004800
 80040a0:	20000253 	.word	0x20000253
 80040a4:	20000254 	.word	0x20000254
 80040a8:	20000255 	.word	0x20000255
 80040ac:	2000024c 	.word	0x2000024c
 80040b0:	20000252 	.word	0x20000252

080040b4 <__NVIC_SetPriority>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	db0a      	blt.n	80040de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	490c      	ldr	r1, [pc, #48]	@ (8004100 <__NVIC_SetPriority+0x4c>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	0112      	lsls	r2, r2, #4
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	440b      	add	r3, r1
 80040d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80040dc:	e00a      	b.n	80040f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4908      	ldr	r1, [pc, #32]	@ (8004104 <__NVIC_SetPriority+0x50>)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3b04      	subs	r3, #4
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	440b      	add	r3, r1
 80040f2:	761a      	strb	r2, [r3, #24]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000e100 	.word	0xe000e100
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800410c:	2100      	movs	r1, #0
 800410e:	f06f 0004 	mvn.w	r0, #4
 8004112:	f7ff ffcf 	bl	80040b4 <__NVIC_SetPriority>
#endif
}
 8004116:	bf00      	nop
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004122:	f3ef 8305 	mrs	r3, IPSR
 8004126:	603b      	str	r3, [r7, #0]
  return(result);
 8004128:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800412e:	f06f 0305 	mvn.w	r3, #5
 8004132:	607b      	str	r3, [r7, #4]
 8004134:	e00c      	b.n	8004150 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004136:	4b0a      	ldr	r3, [pc, #40]	@ (8004160 <osKernelInitialize+0x44>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800413e:	4b08      	ldr	r3, [pc, #32]	@ (8004160 <osKernelInitialize+0x44>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004144:	2300      	movs	r3, #0
 8004146:	607b      	str	r3, [r7, #4]
 8004148:	e002      	b.n	8004150 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800414a:	f04f 33ff 	mov.w	r3, #4294967295
 800414e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004150:	687b      	ldr	r3, [r7, #4]
}
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20000258 	.word	0x20000258

08004164 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800416a:	f3ef 8305 	mrs	r3, IPSR
 800416e:	603b      	str	r3, [r7, #0]
  return(result);
 8004170:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004176:	f06f 0305 	mvn.w	r3, #5
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	e010      	b.n	80041a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800417e:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <osKernelStart+0x48>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d109      	bne.n	800419a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004186:	f7ff ffbf 	bl	8004108 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800418a:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <osKernelStart+0x48>)
 800418c:	2202      	movs	r2, #2
 800418e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004190:	f001 ff0e 	bl	8005fb0 <vTaskStartScheduler>
      stat = osOK;
 8004194:	2300      	movs	r3, #0
 8004196:	607b      	str	r3, [r7, #4]
 8004198:	e002      	b.n	80041a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295
 800419e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80041a0:	687b      	ldr	r3, [r7, #4]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000258 	.word	0x20000258

080041b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08e      	sub	sp, #56	@ 0x38
 80041b4:	af04      	add	r7, sp, #16
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041c0:	f3ef 8305 	mrs	r3, IPSR
 80041c4:	617b      	str	r3, [r7, #20]
  return(result);
 80041c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d17e      	bne.n	80042ca <osThreadNew+0x11a>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d07b      	beq.n	80042ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80041d2:	2380      	movs	r3, #128	@ 0x80
 80041d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80041d6:	2318      	movs	r3, #24
 80041d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80041de:	f04f 33ff 	mov.w	r3, #4294967295
 80041e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d045      	beq.n	8004276 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <osThreadNew+0x48>
        name = attr->name;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <osThreadNew+0x6e>
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b38      	cmp	r3, #56	@ 0x38
 8004210:	d805      	bhi.n	800421e <osThreadNew+0x6e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <osThreadNew+0x72>
        return (NULL);
 800421e:	2300      	movs	r3, #0
 8004220:	e054      	b.n	80042cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <osThreadNew+0xa8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004240:	d90a      	bls.n	8004258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004246:	2b00      	cmp	r3, #0
 8004248:	d006      	beq.n	8004258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <osThreadNew+0xa8>
        mem = 1;
 8004252:	2301      	movs	r3, #1
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	e010      	b.n	800427a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10c      	bne.n	800427a <osThreadNew+0xca>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d108      	bne.n	800427a <osThreadNew+0xca>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d104      	bne.n	800427a <osThreadNew+0xca>
          mem = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	e001      	b.n	800427a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d110      	bne.n	80042a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004288:	9202      	str	r2, [sp, #8]
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	6a3a      	ldr	r2, [r7, #32]
 8004294:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f001 fce4 	bl	8005c64 <xTaskCreateStatic>
 800429c:	4603      	mov	r3, r0
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	e013      	b.n	80042ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d110      	bne.n	80042ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	f107 0310 	add.w	r3, r7, #16
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f001 fd32 	bl	8005d24 <xTaskCreate>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d001      	beq.n	80042ca <osThreadNew+0x11a>
            hTask = NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042ca:	693b      	ldr	r3, [r7, #16]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3728      	adds	r7, #40	@ 0x28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af02      	add	r7, sp, #8
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <osThreadFlagsSet+0x1a>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	da03      	bge.n	80042f6 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80042ee:	f06f 0303 	mvn.w	r3, #3
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e035      	b.n	8004362 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
 80042fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042fc:	f3ef 8305 	mrs	r3, IPSR
 8004300:	613b      	str	r3, [r7, #16]
  return(result);
 8004302:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01f      	beq.n	8004348 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800430c:	f107 0308 	add.w	r3, r7, #8
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2300      	movs	r3, #0
 8004314:	2201      	movs	r2, #1
 8004316:	6839      	ldr	r1, [r7, #0]
 8004318:	6978      	ldr	r0, [r7, #20]
 800431a:	f002 fd49 	bl	8006db0 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800431e:	f107 030c 	add.w	r3, r7, #12
 8004322:	2200      	movs	r2, #0
 8004324:	9200      	str	r2, [sp, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	2100      	movs	r1, #0
 800432a:	6978      	ldr	r0, [r7, #20]
 800432c:	f002 fd40 	bl	8006db0 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d015      	beq.n	8004362 <osThreadFlagsSet+0x8e>
 8004336:	4b0d      	ldr	r3, [pc, #52]	@ (800436c <osThreadFlagsSet+0x98>)
 8004338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	e00c      	b.n	8004362 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8004348:	2300      	movs	r3, #0
 800434a:	2201      	movs	r2, #1
 800434c:	6839      	ldr	r1, [r7, #0]
 800434e:	6978      	ldr	r0, [r7, #20]
 8004350:	f002 fc74 	bl	8006c3c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8004354:	f107 030c 	add.w	r3, r7, #12
 8004358:	2200      	movs	r2, #0
 800435a:	2100      	movs	r1, #0
 800435c:	6978      	ldr	r0, [r7, #20]
 800435e:	f002 fc6d 	bl	8006c3c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8004362:	68fb      	ldr	r3, [r7, #12]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	e000ed04 	.word	0xe000ed04

08004370 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8004370:	b580      	push	{r7, lr}
 8004372:	b08c      	sub	sp, #48	@ 0x30
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800437c:	f3ef 8305 	mrs	r3, IPSR
 8004380:	617b      	str	r3, [r7, #20]
  return(result);
 8004382:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8004388:	f06f 0305 	mvn.w	r3, #5
 800438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800438e:	e06b      	b.n	8004468 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	da03      	bge.n	800439e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8004396:	f06f 0303 	mvn.w	r3, #3
 800439a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800439c:	e064      	b.n	8004468 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <osThreadFlagsWait+0x3e>
      clear = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ac:	e001      	b.n	80043b2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 80043ba:	f001 ff0d 	bl	80061d8 <xTaskGetTickCount>
 80043be:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80043c0:	f107 0210 	add.w	r2, r7, #16
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043c8:	2000      	movs	r0, #0
 80043ca:	f002 fbdd 	bl	8006b88 <xTaskNotifyWait>
 80043ce:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d137      	bne.n	8004446 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80043d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4013      	ands	r3, r2
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043e2:	4313      	orrs	r3, r2
 80043e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00c      	beq.n	800440a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f4:	4013      	ands	r3, r2
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d032      	beq.n	8004462 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10f      	bne.n	8004422 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8004402:	f06f 0302 	mvn.w	r3, #2
 8004406:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8004408:	e02e      	b.n	8004468 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440e:	4013      	ands	r3, r2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d128      	bne.n	8004466 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d103      	bne.n	8004422 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800441a:	f06f 0302 	mvn.w	r3, #2
 800441e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8004420:	e022      	b.n	8004468 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8004422:	f001 fed9 	bl	80061d8 <xTaskGetTickCount>
 8004426:	4602      	mov	r2, r0
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	429a      	cmp	r2, r3
 8004434:	d902      	bls.n	800443c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
 800443a:	e00e      	b.n	800445a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800443c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
 8004444:	e009      	b.n	800445a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d103      	bne.n	8004454 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800444c:	f06f 0302 	mvn.w	r3, #2
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004452:	e002      	b.n	800445a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8004454:	f06f 0301 	mvn.w	r3, #1
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1af      	bne.n	80043c0 <osThreadFlagsWait+0x50>
 8004460:	e002      	b.n	8004468 <osThreadFlagsWait+0xf8>
            break;
 8004462:	bf00      	nop
 8004464:	e000      	b.n	8004468 <osThreadFlagsWait+0xf8>
            break;
 8004466:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8004468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800446a:	4618      	mov	r0, r3
 800446c:	3730      	adds	r7, #48	@ 0x30
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004472:	b580      	push	{r7, lr}
 8004474:	b088      	sub	sp, #32
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800447e:	f3ef 8305 	mrs	r3, IPSR
 8004482:	60bb      	str	r3, [r7, #8]
  return(result);
 8004484:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004486:	2b00      	cmp	r3, #0
 8004488:	d174      	bne.n	8004574 <osMutexNew+0x102>
    if (attr != NULL) {
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	e001      	b.n	800449c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <osMutexNew+0x3a>
      rmtx = 1U;
 80044a6:	2301      	movs	r3, #1
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e001      	b.n	80044b0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d15c      	bne.n	8004574 <osMutexNew+0x102>
      mem = -1;
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295
 80044be:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d015      	beq.n	80044f2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d006      	beq.n	80044dc <osMutexNew+0x6a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b4f      	cmp	r3, #79	@ 0x4f
 80044d4:	d902      	bls.n	80044dc <osMutexNew+0x6a>
          mem = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	e00c      	b.n	80044f6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d108      	bne.n	80044f6 <osMutexNew+0x84>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <osMutexNew+0x84>
            mem = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e001      	b.n	80044f6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d112      	bne.n	8004522 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	4619      	mov	r1, r3
 8004508:	2004      	movs	r0, #4
 800450a:	f000 fc3e 	bl	8004d8a <xQueueCreateMutexStatic>
 800450e:	61f8      	str	r0, [r7, #28]
 8004510:	e016      	b.n	8004540 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	4619      	mov	r1, r3
 8004518:	2001      	movs	r0, #1
 800451a:	f000 fc36 	bl	8004d8a <xQueueCreateMutexStatic>
 800451e:	61f8      	str	r0, [r7, #28]
 8004520:	e00e      	b.n	8004540 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10b      	bne.n	8004540 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d004      	beq.n	8004538 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800452e:	2004      	movs	r0, #4
 8004530:	f000 fc13 	bl	8004d5a <xQueueCreateMutex>
 8004534:	61f8      	str	r0, [r7, #28]
 8004536:	e003      	b.n	8004540 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004538:	2001      	movs	r0, #1
 800453a:	f000 fc0e 	bl	8004d5a <xQueueCreateMutex>
 800453e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <osMutexNew+0xee>
        if (attr != NULL) {
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <osMutexNew+0xe2>
          name = attr->name;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e001      	b.n	8004558 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004558:	68f9      	ldr	r1, [r7, #12]
 800455a:	69f8      	ldr	r0, [r7, #28]
 800455c:	f001 fafa 	bl	8005b54 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d006      	beq.n	8004574 <osMutexNew+0x102>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004574:	69fb      	ldr	r3, [r7, #28]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800459c:	f3ef 8305 	mrs	r3, IPSR
 80045a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80045a2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80045a8:	f06f 0305 	mvn.w	r3, #5
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	e02c      	b.n	800460a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80045b6:	f06f 0303 	mvn.w	r3, #3
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e025      	b.n	800460a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d011      	beq.n	80045e8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	6938      	ldr	r0, [r7, #16]
 80045c8:	f000 fc2f 	bl	8004e2a <xQueueTakeMutexRecursive>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d01b      	beq.n	800460a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80045d8:	f06f 0301 	mvn.w	r3, #1
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	e014      	b.n	800460a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80045e0:	f06f 0302 	mvn.w	r3, #2
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e010      	b.n	800460a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80045e8:	6839      	ldr	r1, [r7, #0]
 80045ea:	6938      	ldr	r0, [r7, #16]
 80045ec:	f000 ffd4 	bl	8005598 <xQueueSemaphoreTake>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d009      	beq.n	800460a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80045fc:	f06f 0301 	mvn.w	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	e002      	b.n	800460a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004604:	f06f 0302 	mvn.w	r3, #2
 8004608:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800460a:	697b      	ldr	r3, [r7, #20]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004630:	f3ef 8305 	mrs	r3, IPSR
 8004634:	60bb      	str	r3, [r7, #8]
  return(result);
 8004636:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <osMutexRelease+0x30>
    stat = osErrorISR;
 800463c:	f06f 0305 	mvn.w	r3, #5
 8004640:	617b      	str	r3, [r7, #20]
 8004642:	e01f      	b.n	8004684 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800464a:	f06f 0303 	mvn.w	r3, #3
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e018      	b.n	8004684 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d009      	beq.n	800466c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004658:	6938      	ldr	r0, [r7, #16]
 800465a:	f000 fbb1 	bl	8004dc0 <xQueueGiveMutexRecursive>
 800465e:	4603      	mov	r3, r0
 8004660:	2b01      	cmp	r3, #1
 8004662:	d00f      	beq.n	8004684 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004664:	f06f 0302 	mvn.w	r3, #2
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e00b      	b.n	8004684 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800466c:	2300      	movs	r3, #0
 800466e:	2200      	movs	r2, #0
 8004670:	2100      	movs	r1, #0
 8004672:	6938      	ldr	r0, [r7, #16]
 8004674:	f000 fc7e 	bl	8004f74 <xQueueGenericSend>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d002      	beq.n	8004684 <osMutexRelease+0x70>
        stat = osErrorResource;
 800467e:	f06f 0302 	mvn.w	r3, #2
 8004682:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004684:	697b      	ldr	r3, [r7, #20]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800468e:	b580      	push	{r7, lr}
 8004690:	b08a      	sub	sp, #40	@ 0x28
 8004692:	af02      	add	r7, sp, #8
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800469e:	f3ef 8305 	mrs	r3, IPSR
 80046a2:	613b      	str	r3, [r7, #16]
  return(result);
 80046a4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d175      	bne.n	8004796 <osSemaphoreNew+0x108>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d072      	beq.n	8004796 <osSemaphoreNew+0x108>
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d86e      	bhi.n	8004796 <osSemaphoreNew+0x108>
    mem = -1;
 80046b8:	f04f 33ff 	mov.w	r3, #4294967295
 80046bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d006      	beq.n	80046da <osSemaphoreNew+0x4c>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b4f      	cmp	r3, #79	@ 0x4f
 80046d2:	d902      	bls.n	80046da <osSemaphoreNew+0x4c>
        mem = 1;
 80046d4:	2301      	movs	r3, #1
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	e00c      	b.n	80046f4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d108      	bne.n	80046f4 <osSemaphoreNew+0x66>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <osSemaphoreNew+0x66>
          mem = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e001      	b.n	80046f4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d04c      	beq.n	8004796 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d128      	bne.n	8004754 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d10a      	bne.n	800471e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2203      	movs	r2, #3
 800470e:	9200      	str	r2, [sp, #0]
 8004710:	2200      	movs	r2, #0
 8004712:	2100      	movs	r1, #0
 8004714:	2001      	movs	r0, #1
 8004716:	f000 fa2b 	bl	8004b70 <xQueueGenericCreateStatic>
 800471a:	61f8      	str	r0, [r7, #28]
 800471c:	e005      	b.n	800472a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800471e:	2203      	movs	r2, #3
 8004720:	2100      	movs	r1, #0
 8004722:	2001      	movs	r0, #1
 8004724:	f000 faa1 	bl	8004c6a <xQueueGenericCreate>
 8004728:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d022      	beq.n	8004776 <osSemaphoreNew+0xe8>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01f      	beq.n	8004776 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004736:	2300      	movs	r3, #0
 8004738:	2200      	movs	r2, #0
 800473a:	2100      	movs	r1, #0
 800473c:	69f8      	ldr	r0, [r7, #28]
 800473e:	f000 fc19 	bl	8004f74 <xQueueGenericSend>
 8004742:	4603      	mov	r3, r0
 8004744:	2b01      	cmp	r3, #1
 8004746:	d016      	beq.n	8004776 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004748:	69f8      	ldr	r0, [r7, #28]
 800474a:	f001 f8b7 	bl	80058bc <vQueueDelete>
            hSemaphore = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e010      	b.n	8004776 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d108      	bne.n	800476c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	461a      	mov	r2, r3
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fb98 	bl	8004e98 <xQueueCreateCountingSemaphoreStatic>
 8004768:	61f8      	str	r0, [r7, #28]
 800476a:	e004      	b.n	8004776 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fbcb 	bl	8004f0a <xQueueCreateCountingSemaphore>
 8004774:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00c      	beq.n	8004796 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <osSemaphoreNew+0xfc>
          name = attr->name;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e001      	b.n	800478e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800478e:	6979      	ldr	r1, [r7, #20]
 8004790:	69f8      	ldr	r0, [r7, #28]
 8004792:	f001 f9df 	bl	8005b54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004796:	69fb      	ldr	r3, [r7, #28]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3720      	adds	r7, #32
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80047b8:	f06f 0303 	mvn.w	r3, #3
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e039      	b.n	8004834 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047c0:	f3ef 8305 	mrs	r3, IPSR
 80047c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80047c6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d022      	beq.n	8004812 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80047d2:	f06f 0303 	mvn.w	r3, #3
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e02c      	b.n	8004834 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80047de:	f107 0308 	add.w	r3, r7, #8
 80047e2:	461a      	mov	r2, r3
 80047e4:	2100      	movs	r1, #0
 80047e6:	6938      	ldr	r0, [r7, #16]
 80047e8:	f000 ffe6 	bl	80057b8 <xQueueReceiveFromISR>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d003      	beq.n	80047fa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80047f2:	f06f 0302 	mvn.w	r3, #2
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e01c      	b.n	8004834 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d019      	beq.n	8004834 <osSemaphoreAcquire+0x94>
 8004800:	4b0f      	ldr	r3, [pc, #60]	@ (8004840 <osSemaphoreAcquire+0xa0>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	e010      	b.n	8004834 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004812:	6839      	ldr	r1, [r7, #0]
 8004814:	6938      	ldr	r0, [r7, #16]
 8004816:	f000 febf 	bl	8005598 <xQueueSemaphoreTake>
 800481a:	4603      	mov	r3, r0
 800481c:	2b01      	cmp	r3, #1
 800481e:	d009      	beq.n	8004834 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004826:	f06f 0301 	mvn.w	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e002      	b.n	8004834 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800482e:	f06f 0302 	mvn.w	r3, #2
 8004832:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004834:	697b      	ldr	r3, [r7, #20]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	e000ed04 	.word	0xe000ed04

08004844 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d103      	bne.n	8004862 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800485a:	f06f 0303 	mvn.w	r3, #3
 800485e:	617b      	str	r3, [r7, #20]
 8004860:	e02c      	b.n	80048bc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004862:	f3ef 8305 	mrs	r3, IPSR
 8004866:	60fb      	str	r3, [r7, #12]
  return(result);
 8004868:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01a      	beq.n	80048a4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	4619      	mov	r1, r3
 8004878:	6938      	ldr	r0, [r7, #16]
 800487a:	f000 fd1b 	bl	80052b4 <xQueueGiveFromISR>
 800487e:	4603      	mov	r3, r0
 8004880:	2b01      	cmp	r3, #1
 8004882:	d003      	beq.n	800488c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004884:	f06f 0302 	mvn.w	r3, #2
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e017      	b.n	80048bc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d014      	beq.n	80048bc <osSemaphoreRelease+0x78>
 8004892:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <osSemaphoreRelease+0x84>)
 8004894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	e00b      	b.n	80048bc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80048a4:	2300      	movs	r3, #0
 80048a6:	2200      	movs	r2, #0
 80048a8:	2100      	movs	r1, #0
 80048aa:	6938      	ldr	r0, [r7, #16]
 80048ac:	f000 fb62 	bl	8004f74 <xQueueGenericSend>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d002      	beq.n	80048bc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80048b6:	f06f 0302 	mvn.w	r3, #2
 80048ba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80048bc:	697b      	ldr	r3, [r7, #20]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	e000ed04 	.word	0xe000ed04

080048cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a07      	ldr	r2, [pc, #28]	@ (80048f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80048dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4a06      	ldr	r2, [pc, #24]	@ (80048fc <vApplicationGetIdleTaskMemory+0x30>)
 80048e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2280      	movs	r2, #128	@ 0x80
 80048e8:	601a      	str	r2, [r3, #0]
}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	2000025c 	.word	0x2000025c
 80048fc:	200002b8 	.word	0x200002b8

08004900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a07      	ldr	r2, [pc, #28]	@ (800492c <vApplicationGetTimerTaskMemory+0x2c>)
 8004910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4a06      	ldr	r2, [pc, #24]	@ (8004930 <vApplicationGetTimerTaskMemory+0x30>)
 8004916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800491e:	601a      	str	r2, [r3, #0]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	200004b8 	.word	0x200004b8
 8004930:	20000514 	.word	0x20000514

08004934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f103 0208 	add.w	r2, r3, #8
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f04f 32ff 	mov.w	r2, #4294967295
 800494c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f103 0208 	add.w	r2, r3, #8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f103 0208 	add.w	r2, r3, #8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ec:	d103      	bne.n	80049f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e00c      	b.n	8004a10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3308      	adds	r3, #8
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e002      	b.n	8004a04 <vListInsert+0x2e>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d2f6      	bcs.n	80049fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	601a      	str	r2, [r3, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6852      	ldr	r2, [r2, #4]
 8004a68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d103      	bne.n	8004a7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	1e5a      	subs	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10b      	bne.n	8004ac8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	e7fd      	b.n	8004ac4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ac8:	f002 ff2e 	bl	8007928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad4:	68f9      	ldr	r1, [r7, #12]
 8004ad6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	441a      	add	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af8:	3b01      	subs	r3, #1
 8004afa:	68f9      	ldr	r1, [r7, #12]
 8004afc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	441a      	add	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	22ff      	movs	r2, #255	@ 0xff
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	22ff      	movs	r2, #255	@ 0xff
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d114      	bne.n	8004b48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d01a      	beq.n	8004b5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3310      	adds	r3, #16
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f001 fcce 	bl	80064cc <xTaskRemoveFromEventList>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d012      	beq.n	8004b5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b36:	4b0d      	ldr	r3, [pc, #52]	@ (8004b6c <xQueueGenericReset+0xd0>)
 8004b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	e009      	b.n	8004b5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3310      	adds	r3, #16
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff fef1 	bl	8004934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3324      	adds	r3, #36	@ 0x24
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff feec 	bl	8004934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b5c:	f002 ff16 	bl	800798c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b60:	2301      	movs	r3, #1
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	e000ed04 	.word	0xe000ed04

08004b70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08e      	sub	sp, #56	@ 0x38
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b96:	bf00      	nop
 8004b98:	bf00      	nop
 8004b9a:	e7fd      	b.n	8004b98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10b      	bne.n	8004bba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	e7fd      	b.n	8004bb6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <xQueueGenericCreateStatic+0x56>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <xQueueGenericCreateStatic+0x5a>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <xQueueGenericCreateStatic+0x5c>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10b      	bne.n	8004be8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	623b      	str	r3, [r7, #32]
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <xQueueGenericCreateStatic+0x84>
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <xQueueGenericCreateStatic+0x88>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <xQueueGenericCreateStatic+0x8a>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10b      	bne.n	8004c16 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	61fb      	str	r3, [r7, #28]
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	e7fd      	b.n	8004c12 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c16:	2350      	movs	r3, #80	@ 0x50
 8004c18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	2b50      	cmp	r3, #80	@ 0x50
 8004c1e:	d00b      	beq.n	8004c38 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	61bb      	str	r3, [r7, #24]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00d      	beq.n	8004c60 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c4c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f840 	bl	8004ce0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3730      	adds	r7, #48	@ 0x30
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b08a      	sub	sp, #40	@ 0x28
 8004c6e:	af02      	add	r7, sp, #8
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	4613      	mov	r3, r2
 8004c76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10b      	bne.n	8004c96 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	613b      	str	r3, [r7, #16]
}
 8004c90:	bf00      	nop
 8004c92:	bf00      	nop
 8004c94:	e7fd      	b.n	8004c92 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	3350      	adds	r3, #80	@ 0x50
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f002 ff61 	bl	8007b6c <pvPortMalloc>
 8004caa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d011      	beq.n	8004cd6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	3350      	adds	r3, #80	@ 0x50
 8004cba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cc4:	79fa      	ldrb	r2, [r7, #7]
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f805 	bl	8004ce0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cd6:	69bb      	ldr	r3, [r7, #24]
	}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d103      	bne.n	8004cfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e002      	b.n	8004d02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d0e:	2101      	movs	r1, #1
 8004d10:	69b8      	ldr	r0, [r7, #24]
 8004d12:	f7ff fec3 	bl	8004a9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004d46:	2300      	movs	r3, #0
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f911 	bl	8004f74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	4603      	mov	r3, r0
 8004d62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d64:	2301      	movs	r3, #1
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004d6c:	79fb      	ldrb	r3, [r7, #7]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6939      	ldr	r1, [r7, #16]
 8004d72:	6978      	ldr	r0, [r7, #20]
 8004d74:	f7ff ff79 	bl	8004c6a <xQueueGenericCreate>
 8004d78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f7ff ffd3 	bl	8004d26 <prvInitialiseMutex>

		return xNewQueue;
 8004d80:	68fb      	ldr	r3, [r7, #12]
	}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b088      	sub	sp, #32
 8004d8e:	af02      	add	r7, sp, #8
 8004d90:	4603      	mov	r3, r0
 8004d92:	6039      	str	r1, [r7, #0]
 8004d94:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d96:	2301      	movs	r3, #1
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004d9e:	79fb      	ldrb	r3, [r7, #7]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2200      	movs	r2, #0
 8004da6:	6939      	ldr	r1, [r7, #16]
 8004da8:	6978      	ldr	r0, [r7, #20]
 8004daa:	f7ff fee1 	bl	8004b70 <xQueueGenericCreateStatic>
 8004dae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff ffb8 	bl	8004d26 <prvInitialiseMutex>

		return xNewQueue;
 8004db6:	68fb      	ldr	r3, [r7, #12]
	}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10b      	bne.n	8004dea <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60fb      	str	r3, [r7, #12]
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	e7fd      	b.n	8004de6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	689c      	ldr	r4, [r3, #8]
 8004dee:	f001 fd2d 	bl	800684c <xTaskGetCurrentTaskHandle>
 8004df2:	4603      	mov	r3, r0
 8004df4:	429c      	cmp	r4, r3
 8004df6:	d111      	bne.n	8004e1c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	1e5a      	subs	r2, r3, #1
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d105      	bne.n	8004e16 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2100      	movs	r1, #0
 8004e10:	6938      	ldr	r0, [r7, #16]
 8004e12:	f000 f8af 	bl	8004f74 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004e16:	2301      	movs	r3, #1
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	e001      	b.n	8004e20 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004e20:	697b      	ldr	r3, [r7, #20]
	}
 8004e22:	4618      	mov	r0, r3
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd90      	pop	{r4, r7, pc}

08004e2a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004e2a:	b590      	push	{r4, r7, lr}
 8004e2c:	b087      	sub	sp, #28
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	60fb      	str	r3, [r7, #12]
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	e7fd      	b.n	8004e52 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	689c      	ldr	r4, [r3, #8]
 8004e5a:	f001 fcf7 	bl	800684c <xTaskGetCurrentTaskHandle>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	429c      	cmp	r4, r3
 8004e62:	d107      	bne.n	8004e74 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	e00c      	b.n	8004e8e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004e74:	6839      	ldr	r1, [r7, #0]
 8004e76:	6938      	ldr	r0, [r7, #16]
 8004e78:	f000 fb8e 	bl	8005598 <xQueueSemaphoreTake>
 8004e7c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004e8e:	697b      	ldr	r3, [r7, #20]
	}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd90      	pop	{r4, r7, pc}

08004e98 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	@ 0x28
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10b      	bne.n	8004ec2 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	61bb      	str	r3, [r7, #24]
}
 8004ebc:	bf00      	nop
 8004ebe:	bf00      	nop
 8004ec0:	e7fd      	b.n	8004ebe <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d90b      	bls.n	8004ee2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	617b      	str	r3, [r7, #20]
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	e7fd      	b.n	8004ede <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2100      	movs	r1, #0
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff fe3f 	bl	8004b70 <xQueueGenericCreateStatic>
 8004ef2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f00:	69fb      	ldr	r3, [r7, #28]
	}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3720      	adds	r7, #32
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b086      	sub	sp, #24
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	613b      	str	r3, [r7, #16]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d90b      	bls.n	8004f52 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	60fb      	str	r3, [r7, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	e7fd      	b.n	8004f4e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f52:	2202      	movs	r2, #2
 8004f54:	2100      	movs	r1, #0
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fe87 	bl	8004c6a <xQueueGenericCreate>
 8004f5c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f6a:	697b      	ldr	r3, [r7, #20]
	}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08e      	sub	sp, #56	@ 0x38
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f82:	2300      	movs	r3, #0
 8004f84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <xQueueGenericSend+0x34>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fa2:	bf00      	nop
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <xQueueGenericSend+0x42>
 8004fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <xQueueGenericSend+0x46>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <xQueueGenericSend+0x48>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <xQueueGenericSend+0x64>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	e7fd      	b.n	8004fd4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d103      	bne.n	8004fe6 <xQueueGenericSend+0x72>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <xQueueGenericSend+0x76>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <xQueueGenericSend+0x78>
 8004fea:	2300      	movs	r3, #0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <xQueueGenericSend+0x94>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	623b      	str	r3, [r7, #32]
}
 8005002:	bf00      	nop
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005008:	f001 fc30 	bl	800686c <xTaskGetSchedulerState>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <xQueueGenericSend+0xa4>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <xQueueGenericSend+0xa8>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <xQueueGenericSend+0xaa>
 800501c:	2300      	movs	r3, #0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10b      	bne.n	800503a <xQueueGenericSend+0xc6>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	61fb      	str	r3, [r7, #28]
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	e7fd      	b.n	8005036 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800503a:	f002 fc75 	bl	8007928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <xQueueGenericSend+0xdc>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d129      	bne.n	80050a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005056:	f000 fc6d 	bl	8005934 <prvCopyDataToQueue>
 800505a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d010      	beq.n	8005086 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	3324      	adds	r3, #36	@ 0x24
 8005068:	4618      	mov	r0, r3
 800506a:	f001 fa2f 	bl	80064cc <xTaskRemoveFromEventList>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d013      	beq.n	800509c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005074:	4b3f      	ldr	r3, [pc, #252]	@ (8005174 <xQueueGenericSend+0x200>)
 8005076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	e00a      	b.n	800509c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800508c:	4b39      	ldr	r3, [pc, #228]	@ (8005174 <xQueueGenericSend+0x200>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800509c:	f002 fc76 	bl	800798c <vPortExitCritical>
				return pdPASS;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e063      	b.n	800516c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050aa:	f002 fc6f 	bl	800798c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e05c      	b.n	800516c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	4618      	mov	r0, r3
 80050be:	f001 fa69 	bl	8006594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050c2:	2301      	movs	r3, #1
 80050c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050c6:	f002 fc61 	bl	800798c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050ca:	f000 ffd9 	bl	8006080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ce:	f002 fc2b 	bl	8007928 <vPortEnterCritical>
 80050d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050d8:	b25b      	sxtb	r3, r3
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d103      	bne.n	80050e8 <xQueueGenericSend+0x174>
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050ee:	b25b      	sxtb	r3, r3
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d103      	bne.n	80050fe <xQueueGenericSend+0x18a>
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050fe:	f002 fc45 	bl	800798c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005102:	1d3a      	adds	r2, r7, #4
 8005104:	f107 0314 	add.w	r3, r7, #20
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f001 fa58 	bl	80065c0 <xTaskCheckForTimeOut>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d124      	bne.n	8005160 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005116:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005118:	f000 fd04 	bl	8005b24 <prvIsQueueFull>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d018      	beq.n	8005154 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	3310      	adds	r3, #16
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f001 f97c 	bl	8006428 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005130:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005132:	f000 fc8f 	bl	8005a54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005136:	f000 ffb1 	bl	800609c <xTaskResumeAll>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	f47f af7c 	bne.w	800503a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005142:	4b0c      	ldr	r3, [pc, #48]	@ (8005174 <xQueueGenericSend+0x200>)
 8005144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	e772      	b.n	800503a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005154:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005156:	f000 fc7d 	bl	8005a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800515a:	f000 ff9f 	bl	800609c <xTaskResumeAll>
 800515e:	e76c      	b.n	800503a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005162:	f000 fc77 	bl	8005a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005166:	f000 ff99 	bl	800609c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800516a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800516c:	4618      	mov	r0, r3
 800516e:	3738      	adds	r7, #56	@ 0x38
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b090      	sub	sp, #64	@ 0x40
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d103      	bne.n	80051b6 <xQueueGenericSendFromISR+0x3e>
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <xQueueGenericSendFromISR+0x42>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <xQueueGenericSendFromISR+0x44>
 80051ba:	2300      	movs	r3, #0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d103      	bne.n	80051e6 <xQueueGenericSendFromISR+0x6e>
 80051de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <xQueueGenericSendFromISR+0x72>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <xQueueGenericSendFromISR+0x74>
 80051ea:	2300      	movs	r3, #0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10b      	bne.n	8005208 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	623b      	str	r3, [r7, #32]
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	e7fd      	b.n	8005204 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005208:	f002 fc6e 	bl	8007ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800520c:	f3ef 8211 	mrs	r2, BASEPRI
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	61fa      	str	r2, [r7, #28]
 8005222:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005224:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005226:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800522c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005230:	429a      	cmp	r2, r3
 8005232:	d302      	bcc.n	800523a <xQueueGenericSendFromISR+0xc2>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d12f      	bne.n	800529a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005240:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005250:	f000 fb70 	bl	8005934 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005254:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d112      	bne.n	8005284 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800525e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	d016      	beq.n	8005294 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005268:	3324      	adds	r3, #36	@ 0x24
 800526a:	4618      	mov	r0, r3
 800526c:	f001 f92e 	bl	80064cc <xTaskRemoveFromEventList>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00e      	beq.n	8005294 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e007      	b.n	8005294 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005284:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005288:	3301      	adds	r3, #1
 800528a:	b2db      	uxtb	r3, r3
 800528c:	b25a      	sxtb	r2, r3
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005294:	2301      	movs	r3, #1
 8005296:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005298:	e001      	b.n	800529e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800529a:	2300      	movs	r3, #0
 800529c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800529e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3740      	adds	r7, #64	@ 0x40
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08e      	sub	sp, #56	@ 0x38
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	623b      	str	r3, [r7, #32]
}
 80052da:	bf00      	nop
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00b      	beq.n	8005300 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	61fb      	str	r3, [r7, #28]
}
 80052fa:	bf00      	nop
 80052fc:	bf00      	nop
 80052fe:	e7fd      	b.n	80052fc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d103      	bne.n	8005310 <xQueueGiveFromISR+0x5c>
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <xQueueGiveFromISR+0x60>
 8005310:	2301      	movs	r3, #1
 8005312:	e000      	b.n	8005316 <xQueueGiveFromISR+0x62>
 8005314:	2300      	movs	r3, #0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	61bb      	str	r3, [r7, #24]
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005332:	f002 fbd9 	bl	8007ae8 <vPortValidateInterruptPriority>
	__asm volatile
 8005336:	f3ef 8211 	mrs	r2, BASEPRI
 800533a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	617a      	str	r2, [r7, #20]
 800534c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800534e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005350:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800535e:	429a      	cmp	r2, r3
 8005360:	d22b      	bcs.n	80053ba <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800536c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005372:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005374:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d112      	bne.n	80053a4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800537e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	3324      	adds	r3, #36	@ 0x24
 800538a:	4618      	mov	r0, r3
 800538c:	f001 f89e 	bl	80064cc <xTaskRemoveFromEventList>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00e      	beq.n	80053b4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e007      	b.n	80053b4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053a8:	3301      	adds	r3, #1
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	b25a      	sxtb	r2, r3
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80053b4:	2301      	movs	r3, #1
 80053b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b8:	e001      	b.n	80053be <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f383 8811 	msr	BASEPRI, r3
}
 80053c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3738      	adds	r7, #56	@ 0x38
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08c      	sub	sp, #48	@ 0x30
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10b      	bne.n	8005406 <xQueueReceive+0x32>
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	623b      	str	r3, [r7, #32]
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	e7fd      	b.n	8005402 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <xQueueReceive+0x40>
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <xQueueReceive+0x44>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <xQueueReceive+0x46>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <xQueueReceive+0x62>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	61fb      	str	r3, [r7, #28]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005436:	f001 fa19 	bl	800686c <xTaskGetSchedulerState>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <xQueueReceive+0x72>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <xQueueReceive+0x76>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <xQueueReceive+0x78>
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10b      	bne.n	8005468 <xQueueReceive+0x94>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	61bb      	str	r3, [r7, #24]
}
 8005462:	bf00      	nop
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005468:	f002 fa5e 	bl	8007928 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800546c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01f      	beq.n	80054b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800547c:	f000 fac4 	bl	8005a08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	1e5a      	subs	r2, r3, #1
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00f      	beq.n	80054b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005492:	3310      	adds	r3, #16
 8005494:	4618      	mov	r0, r3
 8005496:	f001 f819 	bl	80064cc <xTaskRemoveFromEventList>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d007      	beq.n	80054b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054a0:	4b3c      	ldr	r3, [pc, #240]	@ (8005594 <xQueueReceive+0x1c0>)
 80054a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054b0:	f002 fa6c 	bl	800798c <vPortExitCritical>
				return pdPASS;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e069      	b.n	800558c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d103      	bne.n	80054c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054be:	f002 fa65 	bl	800798c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054c2:	2300      	movs	r3, #0
 80054c4:	e062      	b.n	800558c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054cc:	f107 0310 	add.w	r3, r7, #16
 80054d0:	4618      	mov	r0, r3
 80054d2:	f001 f85f 	bl	8006594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054d6:	2301      	movs	r3, #1
 80054d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054da:	f002 fa57 	bl	800798c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054de:	f000 fdcf 	bl	8006080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054e2:	f002 fa21 	bl	8007928 <vPortEnterCritical>
 80054e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054ec:	b25b      	sxtb	r3, r3
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d103      	bne.n	80054fc <xQueueReceive+0x128>
 80054f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005502:	b25b      	sxtb	r3, r3
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d103      	bne.n	8005512 <xQueueReceive+0x13e>
 800550a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005512:	f002 fa3b 	bl	800798c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005516:	1d3a      	adds	r2, r7, #4
 8005518:	f107 0310 	add.w	r3, r7, #16
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f001 f84e 	bl	80065c0 <xTaskCheckForTimeOut>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d123      	bne.n	8005572 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800552a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800552c:	f000 fae4 	bl	8005af8 <prvIsQueueEmpty>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d017      	beq.n	8005566 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	3324      	adds	r3, #36	@ 0x24
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4611      	mov	r1, r2
 800553e:	4618      	mov	r0, r3
 8005540:	f000 ff72 	bl	8006428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005546:	f000 fa85 	bl	8005a54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800554a:	f000 fda7 	bl	800609c <xTaskResumeAll>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d189      	bne.n	8005468 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005554:	4b0f      	ldr	r3, [pc, #60]	@ (8005594 <xQueueReceive+0x1c0>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	e780      	b.n	8005468 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005568:	f000 fa74 	bl	8005a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800556c:	f000 fd96 	bl	800609c <xTaskResumeAll>
 8005570:	e77a      	b.n	8005468 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005574:	f000 fa6e 	bl	8005a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005578:	f000 fd90 	bl	800609c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800557c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800557e:	f000 fabb 	bl	8005af8 <prvIsQueueEmpty>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	f43f af6f 	beq.w	8005468 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800558a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800558c:	4618      	mov	r0, r3
 800558e:	3730      	adds	r7, #48	@ 0x30
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08e      	sub	sp, #56	@ 0x38
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10b      	bne.n	80055cc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	623b      	str	r3, [r7, #32]
}
 80055c6:	bf00      	nop
 80055c8:	bf00      	nop
 80055ca:	e7fd      	b.n	80055c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <xQueueSemaphoreTake+0x54>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	61fb      	str	r3, [r7, #28]
}
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	e7fd      	b.n	80055e8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055ec:	f001 f93e 	bl	800686c <xTaskGetSchedulerState>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <xQueueSemaphoreTake+0x64>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <xQueueSemaphoreTake+0x68>
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <xQueueSemaphoreTake+0x6a>
 8005600:	2300      	movs	r3, #0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	61bb      	str	r3, [r7, #24]
}
 8005618:	bf00      	nop
 800561a:	bf00      	nop
 800561c:	e7fd      	b.n	800561a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800561e:	f002 f983 	bl	8007928 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005626:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	2b00      	cmp	r3, #0
 800562c:	d024      	beq.n	8005678 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	1e5a      	subs	r2, r3, #1
 8005632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005634:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d104      	bne.n	8005648 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800563e:	f001 fa8f 	bl	8006b60 <pvTaskIncrementMutexHeldCount>
 8005642:	4602      	mov	r2, r0
 8005644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005646:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00f      	beq.n	8005670 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005652:	3310      	adds	r3, #16
 8005654:	4618      	mov	r0, r3
 8005656:	f000 ff39 	bl	80064cc <xTaskRemoveFromEventList>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d007      	beq.n	8005670 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005660:	4b54      	ldr	r3, [pc, #336]	@ (80057b4 <xQueueSemaphoreTake+0x21c>)
 8005662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005670:	f002 f98c 	bl	800798c <vPortExitCritical>
				return pdPASS;
 8005674:	2301      	movs	r3, #1
 8005676:	e098      	b.n	80057aa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d112      	bne.n	80056a4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00b      	beq.n	800569c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	617b      	str	r3, [r7, #20]
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800569c:	f002 f976 	bl	800798c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e082      	b.n	80057aa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056aa:	f107 030c 	add.w	r3, r7, #12
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 ff70 	bl	8006594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056b4:	2301      	movs	r3, #1
 80056b6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056b8:	f002 f968 	bl	800798c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056bc:	f000 fce0 	bl	8006080 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056c0:	f002 f932 	bl	8007928 <vPortEnterCritical>
 80056c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056ca:	b25b      	sxtb	r3, r3
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d103      	bne.n	80056da <xQueueSemaphoreTake+0x142>
 80056d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056e0:	b25b      	sxtb	r3, r3
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e6:	d103      	bne.n	80056f0 <xQueueSemaphoreTake+0x158>
 80056e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056f0:	f002 f94c 	bl	800798c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056f4:	463a      	mov	r2, r7
 80056f6:	f107 030c 	add.w	r3, r7, #12
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 ff5f 	bl	80065c0 <xTaskCheckForTimeOut>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d132      	bne.n	800576e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005708:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800570a:	f000 f9f5 	bl	8005af8 <prvIsQueueEmpty>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d026      	beq.n	8005762 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d109      	bne.n	8005730 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800571c:	f002 f904 	bl	8007928 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	4618      	mov	r0, r3
 8005726:	f001 f8bf 	bl	80068a8 <xTaskPriorityInherit>
 800572a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800572c:	f002 f92e 	bl	800798c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005732:	3324      	adds	r3, #36	@ 0x24
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	4611      	mov	r1, r2
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fe75 	bl	8006428 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800573e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005740:	f000 f988 	bl	8005a54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005744:	f000 fcaa 	bl	800609c <xTaskResumeAll>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	f47f af67 	bne.w	800561e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005750:	4b18      	ldr	r3, [pc, #96]	@ (80057b4 <xQueueSemaphoreTake+0x21c>)
 8005752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	e75d      	b.n	800561e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005762:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005764:	f000 f976 	bl	8005a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005768:	f000 fc98 	bl	800609c <xTaskResumeAll>
 800576c:	e757      	b.n	800561e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800576e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005770:	f000 f970 	bl	8005a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005774:	f000 fc92 	bl	800609c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005778:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800577a:	f000 f9bd 	bl	8005af8 <prvIsQueueEmpty>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	f43f af4c 	beq.w	800561e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00d      	beq.n	80057a8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800578c:	f002 f8cc 	bl	8007928 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005790:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005792:	f000 f8b7 	bl	8005904 <prvGetDisinheritPriorityAfterTimeout>
 8005796:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 f95a 	bl	8006a58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80057a4:	f002 f8f2 	bl	800798c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3738      	adds	r7, #56	@ 0x38
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08e      	sub	sp, #56	@ 0x38
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10b      	bne.n	80057e6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	623b      	str	r3, [r7, #32]
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	e7fd      	b.n	80057e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d103      	bne.n	80057f4 <xQueueReceiveFromISR+0x3c>
 80057ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <xQueueReceiveFromISR+0x40>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <xQueueReceiveFromISR+0x42>
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	61fb      	str	r3, [r7, #28]
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005816:	f002 f967 	bl	8007ae8 <vPortValidateInterruptPriority>
	__asm volatile
 800581a:	f3ef 8211 	mrs	r2, BASEPRI
 800581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	61ba      	str	r2, [r7, #24]
 8005830:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005832:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005834:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	d02f      	beq.n	80058a2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005850:	f000 f8da 	bl	8005a08 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	1e5a      	subs	r2, r3, #1
 8005858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800585c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005864:	d112      	bne.n	800588c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d016      	beq.n	800589c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	3310      	adds	r3, #16
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fe2a 	bl	80064cc <xTaskRemoveFromEventList>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00e      	beq.n	800589c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	e007      	b.n	800589c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800588c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005890:	3301      	adds	r3, #1
 8005892:	b2db      	uxtb	r3, r3
 8005894:	b25a      	sxtb	r2, r3
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800589c:	2301      	movs	r3, #1
 800589e:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a0:	e001      	b.n	80058a6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f383 8811 	msr	BASEPRI, r3
}
 80058b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3738      	adds	r7, #56	@ 0x38
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <vQueueDelete+0x2a>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	60bb      	str	r3, [r7, #8]
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	e7fd      	b.n	80058e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f95e 	bl	8005ba8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f002 fa06 	bl	8007d08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80058fc:	bf00      	nop
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d006      	beq.n	8005922 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e001      	b.n	8005926 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005926:	68fb      	ldr	r3, [r7, #12]
	}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10d      	bne.n	800596e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d14d      	bne.n	80059f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	4618      	mov	r0, r3
 8005960:	f001 f80a 	bl	8006978 <xTaskPriorityDisinherit>
 8005964:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	609a      	str	r2, [r3, #8]
 800596c:	e043      	b.n	80059f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d119      	bne.n	80059a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6858      	ldr	r0, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597c:	461a      	mov	r2, r3
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	f002 fc18 	bl	80081b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	441a      	add	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	429a      	cmp	r2, r3
 800599c:	d32b      	bcc.n	80059f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	605a      	str	r2, [r3, #4]
 80059a6:	e026      	b.n	80059f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68d8      	ldr	r0, [r3, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b0:	461a      	mov	r2, r3
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	f002 fbfe 	bl	80081b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c0:	425b      	negs	r3, r3
 80059c2:	441a      	add	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d207      	bcs.n	80059e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059dc:	425b      	negs	r3, r3
 80059de:	441a      	add	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d105      	bne.n	80059f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80059fe:	697b      	ldr	r3, [r7, #20]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d018      	beq.n	8005a4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a22:	441a      	add	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d303      	bcc.n	8005a3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68d9      	ldr	r1, [r3, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a44:	461a      	mov	r2, r3
 8005a46:	6838      	ldr	r0, [r7, #0]
 8005a48:	f002 fbb4 	bl	80081b4 <memcpy>
	}
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a5c:	f001 ff64 	bl	8007928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a68:	e011      	b.n	8005a8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d012      	beq.n	8005a98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3324      	adds	r3, #36	@ 0x24
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fd28 	bl	80064cc <xTaskRemoveFromEventList>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a82:	f000 fe01 	bl	8006688 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	dce9      	bgt.n	8005a6a <prvUnlockQueue+0x16>
 8005a96:	e000      	b.n	8005a9a <prvUnlockQueue+0x46>
					break;
 8005a98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	22ff      	movs	r2, #255	@ 0xff
 8005a9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005aa2:	f001 ff73 	bl	800798c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aa6:	f001 ff3f 	bl	8007928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ab0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ab2:	e011      	b.n	8005ad8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d012      	beq.n	8005ae2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3310      	adds	r3, #16
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fd03 	bl	80064cc <xTaskRemoveFromEventList>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005acc:	f000 fddc 	bl	8006688 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dce9      	bgt.n	8005ab4 <prvUnlockQueue+0x60>
 8005ae0:	e000      	b.n	8005ae4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ae2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	22ff      	movs	r2, #255	@ 0xff
 8005ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005aec:	f001 ff4e 	bl	800798c <vPortExitCritical>
}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b00:	f001 ff12 	bl	8007928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e001      	b.n	8005b16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b16:	f001 ff39 	bl	800798c <vPortExitCritical>

	return xReturn;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b2c:	f001 fefc 	bl	8007928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d102      	bne.n	8005b42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e001      	b.n	8005b46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b46:	f001 ff21 	bl	800798c <vPortExitCritical>

	return xReturn;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e014      	b.n	8005b8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b64:	4a0f      	ldr	r2, [pc, #60]	@ (8005ba4 <vQueueAddToRegistry+0x50>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b70:	490c      	ldr	r1, [pc, #48]	@ (8005ba4 <vQueueAddToRegistry+0x50>)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba4 <vQueueAddToRegistry+0x50>)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b86:	e006      	b.n	8005b96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b07      	cmp	r3, #7
 8005b92:	d9e7      	bls.n	8005b64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	20000914 	.word	0x20000914

08005ba8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e016      	b.n	8005be4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005bb6:	4a10      	ldr	r2, [pc, #64]	@ (8005bf8 <vQueueUnregisterQueue+0x50>)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d10b      	bne.n	8005bde <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8005bf8 <vQueueUnregisterQueue+0x50>)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2100      	movs	r1, #0
 8005bcc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005bd0:	4a09      	ldr	r2, [pc, #36]	@ (8005bf8 <vQueueUnregisterQueue+0x50>)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	2200      	movs	r2, #0
 8005bda:	605a      	str	r2, [r3, #4]
				break;
 8005bdc:	e006      	b.n	8005bec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3301      	adds	r3, #1
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b07      	cmp	r3, #7
 8005be8:	d9e5      	bls.n	8005bb6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	20000914 	.word	0x20000914

08005bfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c0c:	f001 fe8c 	bl	8007928 <vPortEnterCritical>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c16:	b25b      	sxtb	r3, r3
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d103      	bne.n	8005c26 <vQueueWaitForMessageRestricted+0x2a>
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c2c:	b25b      	sxtb	r3, r3
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d103      	bne.n	8005c3c <vQueueWaitForMessageRestricted+0x40>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c3c:	f001 fea6 	bl	800798c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3324      	adds	r3, #36	@ 0x24
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fc0f 	bl	8006474 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c56:	6978      	ldr	r0, [r7, #20]
 8005c58:	f7ff fefc 	bl	8005a54 <prvUnlockQueue>
	}
 8005c5c:	bf00      	nop
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08e      	sub	sp, #56	@ 0x38
 8005c68:	af04      	add	r7, sp, #16
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	623b      	str	r3, [r7, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <xTaskCreateStatic+0x4a>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	61fb      	str	r3, [r7, #28]
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	e7fd      	b.n	8005caa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cae:	235c      	movs	r3, #92	@ 0x5c
 8005cb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b5c      	cmp	r3, #92	@ 0x5c
 8005cb6:	d00b      	beq.n	8005cd0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	61bb      	str	r3, [r7, #24]
}
 8005cca:	bf00      	nop
 8005ccc:	bf00      	nop
 8005cce:	e7fd      	b.n	8005ccc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01e      	beq.n	8005d16 <xTaskCreateStatic+0xb2>
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01b      	beq.n	8005d16 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ce6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	9303      	str	r3, [sp, #12]
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	f107 0314 	add.w	r3, r7, #20
 8005cfc:	9301      	str	r3, [sp, #4]
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f850 	bl	8005dae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d10:	f000 f8de 	bl	8005ed0 <prvAddNewTaskToReadyList>
 8005d14:	e001      	b.n	8005d1a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d1a:	697b      	ldr	r3, [r7, #20]
	}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3728      	adds	r7, #40	@ 0x28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08c      	sub	sp, #48	@ 0x30
 8005d28:	af04      	add	r7, sp, #16
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d34:	88fb      	ldrh	r3, [r7, #6]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 ff17 	bl	8007b6c <pvPortMalloc>
 8005d3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00e      	beq.n	8005d64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d46:	205c      	movs	r0, #92	@ 0x5c
 8005d48:	f001 ff10 	bl	8007b6c <pvPortMalloc>
 8005d4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d5a:	e005      	b.n	8005d68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d5c:	6978      	ldr	r0, [r7, #20]
 8005d5e:	f001 ffd3 	bl	8007d08 <vPortFree>
 8005d62:	e001      	b.n	8005d68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d017      	beq.n	8005d9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d76:	88fa      	ldrh	r2, [r7, #6]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9303      	str	r3, [sp, #12]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	9302      	str	r3, [sp, #8]
 8005d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f80e 	bl	8005dae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d92:	69f8      	ldr	r0, [r7, #28]
 8005d94:	f000 f89c 	bl	8005ed0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	e002      	b.n	8005da4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005da2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005da4:	69bb      	ldr	r3, [r7, #24]
	}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b088      	sub	sp, #32
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	21a5      	movs	r1, #165	@ 0xa5
 8005dc8:	f002 f9c8 	bl	800815c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	f023 0307 	bic.w	r3, r3, #7
 8005de4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00b      	beq.n	8005e08 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	617b      	str	r3, [r7, #20]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d01f      	beq.n	8005e4e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	e012      	b.n	8005e3a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	7819      	ldrb	r1, [r3, #0]
 8005e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	4413      	add	r3, r2
 8005e22:	3334      	adds	r3, #52	@ 0x34
 8005e24:	460a      	mov	r2, r1
 8005e26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d006      	beq.n	8005e42 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	3301      	adds	r3, #1
 8005e38:	61fb      	str	r3, [r7, #28]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b0f      	cmp	r3, #15
 8005e3e:	d9e9      	bls.n	8005e14 <prvInitialiseNewTask+0x66>
 8005e40:	e000      	b.n	8005e44 <prvInitialiseNewTask+0x96>
			{
				break;
 8005e42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e4c:	e003      	b.n	8005e56 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e58:	2b37      	cmp	r3, #55	@ 0x37
 8005e5a:	d901      	bls.n	8005e60 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e5c:	2337      	movs	r3, #55	@ 0x37
 8005e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e64:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e6a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6e:	2200      	movs	r2, #0
 8005e70:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	3304      	adds	r3, #4
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fd7c 	bl	8004974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7e:	3318      	adds	r3, #24
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fe fd77 	bl	8004974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e9a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	68f9      	ldr	r1, [r7, #12]
 8005eae:	69b8      	ldr	r0, [r7, #24]
 8005eb0:	f001 fc0c 	bl	80076cc <pxPortInitialiseStack>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ed8:	f001 fd26 	bl	8007928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005edc:	4b2d      	ldr	r3, [pc, #180]	@ (8005f94 <prvAddNewTaskToReadyList+0xc4>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8005f94 <prvAddNewTaskToReadyList+0xc4>)
 8005ee4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8005f98 <prvAddNewTaskToReadyList+0xc8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005eee:	4a2a      	ldr	r2, [pc, #168]	@ (8005f98 <prvAddNewTaskToReadyList+0xc8>)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ef4:	4b27      	ldr	r3, [pc, #156]	@ (8005f94 <prvAddNewTaskToReadyList+0xc4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d110      	bne.n	8005f1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005efc:	f000 fbe8 	bl	80066d0 <prvInitialiseTaskLists>
 8005f00:	e00d      	b.n	8005f1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f02:	4b26      	ldr	r3, [pc, #152]	@ (8005f9c <prvAddNewTaskToReadyList+0xcc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f0a:	4b23      	ldr	r3, [pc, #140]	@ (8005f98 <prvAddNewTaskToReadyList+0xc8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d802      	bhi.n	8005f1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f18:	4a1f      	ldr	r2, [pc, #124]	@ (8005f98 <prvAddNewTaskToReadyList+0xc8>)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f1e:	4b20      	ldr	r3, [pc, #128]	@ (8005fa0 <prvAddNewTaskToReadyList+0xd0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3301      	adds	r3, #1
 8005f24:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa0 <prvAddNewTaskToReadyList+0xd0>)
 8005f26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f28:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa0 <prvAddNewTaskToReadyList+0xd0>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f34:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <prvAddNewTaskToReadyList+0xd4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d903      	bls.n	8005f44 <prvAddNewTaskToReadyList+0x74>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f40:	4a18      	ldr	r2, [pc, #96]	@ (8005fa4 <prvAddNewTaskToReadyList+0xd4>)
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4a15      	ldr	r2, [pc, #84]	@ (8005fa8 <prvAddNewTaskToReadyList+0xd8>)
 8005f52:	441a      	add	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f7fe fd17 	bl	800498e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f60:	f001 fd14 	bl	800798c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f64:	4b0d      	ldr	r3, [pc, #52]	@ (8005f9c <prvAddNewTaskToReadyList+0xcc>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00e      	beq.n	8005f8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f98 <prvAddNewTaskToReadyList+0xc8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d207      	bcs.n	8005f8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005fac <prvAddNewTaskToReadyList+0xdc>)
 8005f7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000e28 	.word	0x20000e28
 8005f98:	20000954 	.word	0x20000954
 8005f9c:	20000e34 	.word	0x20000e34
 8005fa0:	20000e44 	.word	0x20000e44
 8005fa4:	20000e30 	.word	0x20000e30
 8005fa8:	20000958 	.word	0x20000958
 8005fac:	e000ed04 	.word	0xe000ed04

08005fb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	@ 0x28
 8005fb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fbe:	463a      	mov	r2, r7
 8005fc0:	1d39      	adds	r1, r7, #4
 8005fc2:	f107 0308 	add.w	r3, r7, #8
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fe fc80 	bl	80048cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	9202      	str	r2, [sp, #8]
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	460a      	mov	r2, r1
 8005fde:	4922      	ldr	r1, [pc, #136]	@ (8006068 <vTaskStartScheduler+0xb8>)
 8005fe0:	4822      	ldr	r0, [pc, #136]	@ (800606c <vTaskStartScheduler+0xbc>)
 8005fe2:	f7ff fe3f 	bl	8005c64 <xTaskCreateStatic>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	4a21      	ldr	r2, [pc, #132]	@ (8006070 <vTaskStartScheduler+0xc0>)
 8005fea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fec:	4b20      	ldr	r3, [pc, #128]	@ (8006070 <vTaskStartScheduler+0xc0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	e001      	b.n	8005ffe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d102      	bne.n	800600a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006004:	f001 f808 	bl	8007018 <xTimerCreateTimerTask>
 8006008:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d116      	bne.n	800603e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	613b      	str	r3, [r7, #16]
}
 8006022:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006024:	4b13      	ldr	r3, [pc, #76]	@ (8006074 <vTaskStartScheduler+0xc4>)
 8006026:	f04f 32ff 	mov.w	r2, #4294967295
 800602a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800602c:	4b12      	ldr	r3, [pc, #72]	@ (8006078 <vTaskStartScheduler+0xc8>)
 800602e:	2201      	movs	r2, #1
 8006030:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006032:	4b12      	ldr	r3, [pc, #72]	@ (800607c <vTaskStartScheduler+0xcc>)
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006038:	f001 fbd2 	bl	80077e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800603c:	e00f      	b.n	800605e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d10b      	bne.n	800605e <vTaskStartScheduler+0xae>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	60fb      	str	r3, [r7, #12]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <vTaskStartScheduler+0xaa>
}
 800605e:	bf00      	nop
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	08008324 	.word	0x08008324
 800606c:	080066a1 	.word	0x080066a1
 8006070:	20000e4c 	.word	0x20000e4c
 8006074:	20000e48 	.word	0x20000e48
 8006078:	20000e34 	.word	0x20000e34
 800607c:	20000e2c 	.word	0x20000e2c

08006080 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006084:	4b04      	ldr	r3, [pc, #16]	@ (8006098 <vTaskSuspendAll+0x18>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	4a03      	ldr	r2, [pc, #12]	@ (8006098 <vTaskSuspendAll+0x18>)
 800608c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800608e:	bf00      	nop
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	20000e50 	.word	0x20000e50

0800609c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060aa:	4b42      	ldr	r3, [pc, #264]	@ (80061b4 <xTaskResumeAll+0x118>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <xTaskResumeAll+0x2e>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	603b      	str	r3, [r7, #0]
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	e7fd      	b.n	80060c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060ca:	f001 fc2d 	bl	8007928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060ce:	4b39      	ldr	r3, [pc, #228]	@ (80061b4 <xTaskResumeAll+0x118>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	4a37      	ldr	r2, [pc, #220]	@ (80061b4 <xTaskResumeAll+0x118>)
 80060d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d8:	4b36      	ldr	r3, [pc, #216]	@ (80061b4 <xTaskResumeAll+0x118>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d162      	bne.n	80061a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060e0:	4b35      	ldr	r3, [pc, #212]	@ (80061b8 <xTaskResumeAll+0x11c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d05e      	beq.n	80061a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060e8:	e02f      	b.n	800614a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ea:	4b34      	ldr	r3, [pc, #208]	@ (80061bc <xTaskResumeAll+0x120>)
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3318      	adds	r3, #24
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe fca6 	bl	8004a48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	3304      	adds	r3, #4
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe fca1 	bl	8004a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610a:	4b2d      	ldr	r3, [pc, #180]	@ (80061c0 <xTaskResumeAll+0x124>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d903      	bls.n	800611a <xTaskResumeAll+0x7e>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006116:	4a2a      	ldr	r2, [pc, #168]	@ (80061c0 <xTaskResumeAll+0x124>)
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4a27      	ldr	r2, [pc, #156]	@ (80061c4 <xTaskResumeAll+0x128>)
 8006128:	441a      	add	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f7fe fc2c 	bl	800498e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800613a:	4b23      	ldr	r3, [pc, #140]	@ (80061c8 <xTaskResumeAll+0x12c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006140:	429a      	cmp	r2, r3
 8006142:	d302      	bcc.n	800614a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006144:	4b21      	ldr	r3, [pc, #132]	@ (80061cc <xTaskResumeAll+0x130>)
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800614a:	4b1c      	ldr	r3, [pc, #112]	@ (80061bc <xTaskResumeAll+0x120>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1cb      	bne.n	80060ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006158:	f000 fb58 	bl	800680c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800615c:	4b1c      	ldr	r3, [pc, #112]	@ (80061d0 <xTaskResumeAll+0x134>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d010      	beq.n	800618a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006168:	f000 f846 	bl	80061f8 <xTaskIncrementTick>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006172:	4b16      	ldr	r3, [pc, #88]	@ (80061cc <xTaskResumeAll+0x130>)
 8006174:	2201      	movs	r2, #1
 8006176:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3b01      	subs	r3, #1
 800617c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1f1      	bne.n	8006168 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006184:	4b12      	ldr	r3, [pc, #72]	@ (80061d0 <xTaskResumeAll+0x134>)
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800618a:	4b10      	ldr	r3, [pc, #64]	@ (80061cc <xTaskResumeAll+0x130>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006192:	2301      	movs	r3, #1
 8006194:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006196:	4b0f      	ldr	r3, [pc, #60]	@ (80061d4 <xTaskResumeAll+0x138>)
 8006198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061a6:	f001 fbf1 	bl	800798c <vPortExitCritical>

	return xAlreadyYielded;
 80061aa:	68bb      	ldr	r3, [r7, #8]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000e50 	.word	0x20000e50
 80061b8:	20000e28 	.word	0x20000e28
 80061bc:	20000de8 	.word	0x20000de8
 80061c0:	20000e30 	.word	0x20000e30
 80061c4:	20000958 	.word	0x20000958
 80061c8:	20000954 	.word	0x20000954
 80061cc:	20000e3c 	.word	0x20000e3c
 80061d0:	20000e38 	.word	0x20000e38
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061de:	4b05      	ldr	r3, [pc, #20]	@ (80061f4 <xTaskGetTickCount+0x1c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061e4:	687b      	ldr	r3, [r7, #4]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000e2c 	.word	0x20000e2c

080061f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061fe:	2300      	movs	r3, #0
 8006200:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006202:	4b4f      	ldr	r3, [pc, #316]	@ (8006340 <xTaskIncrementTick+0x148>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 8090 	bne.w	800632c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800620c:	4b4d      	ldr	r3, [pc, #308]	@ (8006344 <xTaskIncrementTick+0x14c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3301      	adds	r3, #1
 8006212:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006214:	4a4b      	ldr	r2, [pc, #300]	@ (8006344 <xTaskIncrementTick+0x14c>)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d121      	bne.n	8006264 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006220:	4b49      	ldr	r3, [pc, #292]	@ (8006348 <xTaskIncrementTick+0x150>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00b      	beq.n	8006242 <xTaskIncrementTick+0x4a>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	603b      	str	r3, [r7, #0]
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	e7fd      	b.n	800623e <xTaskIncrementTick+0x46>
 8006242:	4b41      	ldr	r3, [pc, #260]	@ (8006348 <xTaskIncrementTick+0x150>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	4b40      	ldr	r3, [pc, #256]	@ (800634c <xTaskIncrementTick+0x154>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a3e      	ldr	r2, [pc, #248]	@ (8006348 <xTaskIncrementTick+0x150>)
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	4a3e      	ldr	r2, [pc, #248]	@ (800634c <xTaskIncrementTick+0x154>)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	4b3e      	ldr	r3, [pc, #248]	@ (8006350 <xTaskIncrementTick+0x158>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3301      	adds	r3, #1
 800625c:	4a3c      	ldr	r2, [pc, #240]	@ (8006350 <xTaskIncrementTick+0x158>)
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	f000 fad4 	bl	800680c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006264:	4b3b      	ldr	r3, [pc, #236]	@ (8006354 <xTaskIncrementTick+0x15c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	429a      	cmp	r2, r3
 800626c:	d349      	bcc.n	8006302 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800626e:	4b36      	ldr	r3, [pc, #216]	@ (8006348 <xTaskIncrementTick+0x150>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d104      	bne.n	8006282 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006278:	4b36      	ldr	r3, [pc, #216]	@ (8006354 <xTaskIncrementTick+0x15c>)
 800627a:	f04f 32ff 	mov.w	r2, #4294967295
 800627e:	601a      	str	r2, [r3, #0]
					break;
 8006280:	e03f      	b.n	8006302 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006282:	4b31      	ldr	r3, [pc, #196]	@ (8006348 <xTaskIncrementTick+0x150>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	429a      	cmp	r2, r3
 8006298:	d203      	bcs.n	80062a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800629a:	4a2e      	ldr	r2, [pc, #184]	@ (8006354 <xTaskIncrementTick+0x15c>)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062a0:	e02f      	b.n	8006302 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fbce 	bl	8004a48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d004      	beq.n	80062be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	3318      	adds	r3, #24
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fe fbc5 	bl	8004a48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c2:	4b25      	ldr	r3, [pc, #148]	@ (8006358 <xTaskIncrementTick+0x160>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d903      	bls.n	80062d2 <xTaskIncrementTick+0xda>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ce:	4a22      	ldr	r2, [pc, #136]	@ (8006358 <xTaskIncrementTick+0x160>)
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4a1f      	ldr	r2, [pc, #124]	@ (800635c <xTaskIncrementTick+0x164>)
 80062e0:	441a      	add	r2, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4619      	mov	r1, r3
 80062e8:	4610      	mov	r0, r2
 80062ea:	f7fe fb50 	bl	800498e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006360 <xTaskIncrementTick+0x168>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d3b8      	bcc.n	800626e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006300:	e7b5      	b.n	800626e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006302:	4b17      	ldr	r3, [pc, #92]	@ (8006360 <xTaskIncrementTick+0x168>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	4914      	ldr	r1, [pc, #80]	@ (800635c <xTaskIncrementTick+0x164>)
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d901      	bls.n	800631e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800631a:	2301      	movs	r3, #1
 800631c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800631e:	4b11      	ldr	r3, [pc, #68]	@ (8006364 <xTaskIncrementTick+0x16c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d007      	beq.n	8006336 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006326:	2301      	movs	r3, #1
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	e004      	b.n	8006336 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800632c:	4b0e      	ldr	r3, [pc, #56]	@ (8006368 <xTaskIncrementTick+0x170>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3301      	adds	r3, #1
 8006332:	4a0d      	ldr	r2, [pc, #52]	@ (8006368 <xTaskIncrementTick+0x170>)
 8006334:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006336:	697b      	ldr	r3, [r7, #20]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000e50 	.word	0x20000e50
 8006344:	20000e2c 	.word	0x20000e2c
 8006348:	20000de0 	.word	0x20000de0
 800634c:	20000de4 	.word	0x20000de4
 8006350:	20000e40 	.word	0x20000e40
 8006354:	20000e48 	.word	0x20000e48
 8006358:	20000e30 	.word	0x20000e30
 800635c:	20000958 	.word	0x20000958
 8006360:	20000954 	.word	0x20000954
 8006364:	20000e3c 	.word	0x20000e3c
 8006368:	20000e38 	.word	0x20000e38

0800636c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006372:	4b28      	ldr	r3, [pc, #160]	@ (8006414 <vTaskSwitchContext+0xa8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800637a:	4b27      	ldr	r3, [pc, #156]	@ (8006418 <vTaskSwitchContext+0xac>)
 800637c:	2201      	movs	r2, #1
 800637e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006380:	e042      	b.n	8006408 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006382:	4b25      	ldr	r3, [pc, #148]	@ (8006418 <vTaskSwitchContext+0xac>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006388:	4b24      	ldr	r3, [pc, #144]	@ (800641c <vTaskSwitchContext+0xb0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e011      	b.n	80063b4 <vTaskSwitchContext+0x48>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10b      	bne.n	80063ae <vTaskSwitchContext+0x42>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	607b      	str	r3, [r7, #4]
}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	e7fd      	b.n	80063aa <vTaskSwitchContext+0x3e>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	491a      	ldr	r1, [pc, #104]	@ (8006420 <vTaskSwitchContext+0xb4>)
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0e3      	beq.n	8006390 <vTaskSwitchContext+0x24>
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4a13      	ldr	r2, [pc, #76]	@ (8006420 <vTaskSwitchContext+0xb4>)
 80063d4:	4413      	add	r3, r2
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	3308      	adds	r3, #8
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d104      	bne.n	80063f8 <vTaskSwitchContext+0x8c>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	605a      	str	r2, [r3, #4]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	4a09      	ldr	r2, [pc, #36]	@ (8006424 <vTaskSwitchContext+0xb8>)
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	4a06      	ldr	r2, [pc, #24]	@ (800641c <vTaskSwitchContext+0xb0>)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6013      	str	r3, [r2, #0]
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20000e50 	.word	0x20000e50
 8006418:	20000e3c 	.word	0x20000e3c
 800641c:	20000e30 	.word	0x20000e30
 8006420:	20000958 	.word	0x20000958
 8006424:	20000954 	.word	0x20000954

08006428 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10b      	bne.n	8006450 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	60fb      	str	r3, [r7, #12]
}
 800644a:	bf00      	nop
 800644c:	bf00      	nop
 800644e:	e7fd      	b.n	800644c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006450:	4b07      	ldr	r3, [pc, #28]	@ (8006470 <vTaskPlaceOnEventList+0x48>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3318      	adds	r3, #24
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7fe fabc 	bl	80049d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800645e:	2101      	movs	r1, #1
 8006460:	6838      	ldr	r0, [r7, #0]
 8006462:	f000 fd85 	bl	8006f70 <prvAddCurrentTaskToDelayedList>
}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20000954 	.word	0x20000954

08006474 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10b      	bne.n	800649e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	617b      	str	r3, [r7, #20]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800649e:	4b0a      	ldr	r3, [pc, #40]	@ (80064c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3318      	adds	r3, #24
 80064a4:	4619      	mov	r1, r3
 80064a6:	68f8      	ldr	r0, [r7, #12]
 80064a8:	f7fe fa71 	bl	800498e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80064b2:	f04f 33ff 	mov.w	r3, #4294967295
 80064b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	68b8      	ldr	r0, [r7, #8]
 80064bc:	f000 fd58 	bl	8006f70 <prvAddCurrentTaskToDelayedList>
	}
 80064c0:	bf00      	nop
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20000954 	.word	0x20000954

080064cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10b      	bne.n	80064fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	60fb      	str	r3, [r7, #12]
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop
 80064f8:	e7fd      	b.n	80064f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	3318      	adds	r3, #24
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe faa2 	bl	8004a48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006504:	4b1d      	ldr	r3, [pc, #116]	@ (800657c <xTaskRemoveFromEventList+0xb0>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d11d      	bne.n	8006548 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	3304      	adds	r3, #4
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe fa99 	bl	8004a48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651a:	4b19      	ldr	r3, [pc, #100]	@ (8006580 <xTaskRemoveFromEventList+0xb4>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d903      	bls.n	800652a <xTaskRemoveFromEventList+0x5e>
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006526:	4a16      	ldr	r2, [pc, #88]	@ (8006580 <xTaskRemoveFromEventList+0xb4>)
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800652e:	4613      	mov	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4a13      	ldr	r2, [pc, #76]	@ (8006584 <xTaskRemoveFromEventList+0xb8>)
 8006538:	441a      	add	r2, r3
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3304      	adds	r3, #4
 800653e:	4619      	mov	r1, r3
 8006540:	4610      	mov	r0, r2
 8006542:	f7fe fa24 	bl	800498e <vListInsertEnd>
 8006546:	e005      	b.n	8006554 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	3318      	adds	r3, #24
 800654c:	4619      	mov	r1, r3
 800654e:	480e      	ldr	r0, [pc, #56]	@ (8006588 <xTaskRemoveFromEventList+0xbc>)
 8006550:	f7fe fa1d 	bl	800498e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006558:	4b0c      	ldr	r3, [pc, #48]	@ (800658c <xTaskRemoveFromEventList+0xc0>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655e:	429a      	cmp	r2, r3
 8006560:	d905      	bls.n	800656e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006562:	2301      	movs	r3, #1
 8006564:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006566:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <xTaskRemoveFromEventList+0xc4>)
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	e001      	b.n	8006572 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006572:	697b      	ldr	r3, [r7, #20]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000e50 	.word	0x20000e50
 8006580:	20000e30 	.word	0x20000e30
 8006584:	20000958 	.word	0x20000958
 8006588:	20000de8 	.word	0x20000de8
 800658c:	20000954 	.word	0x20000954
 8006590:	20000e3c 	.word	0x20000e3c

08006594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800659c:	4b06      	ldr	r3, [pc, #24]	@ (80065b8 <vTaskInternalSetTimeOutState+0x24>)
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065a4:	4b05      	ldr	r3, [pc, #20]	@ (80065bc <vTaskInternalSetTimeOutState+0x28>)
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	605a      	str	r2, [r3, #4]
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	20000e40 	.word	0x20000e40
 80065bc:	20000e2c 	.word	0x20000e2c

080065c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10b      	bne.n	80065e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	613b      	str	r3, [r7, #16]
}
 80065e2:	bf00      	nop
 80065e4:	bf00      	nop
 80065e6:	e7fd      	b.n	80065e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	60fb      	str	r3, [r7, #12]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006606:	f001 f98f 	bl	8007928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800660a:	4b1d      	ldr	r3, [pc, #116]	@ (8006680 <xTaskCheckForTimeOut+0xc0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006622:	d102      	bne.n	800662a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006624:	2300      	movs	r3, #0
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	e023      	b.n	8006672 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	4b15      	ldr	r3, [pc, #84]	@ (8006684 <xTaskCheckForTimeOut+0xc4>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d007      	beq.n	8006646 <xTaskCheckForTimeOut+0x86>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	429a      	cmp	r2, r3
 800663e:	d302      	bcc.n	8006646 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006640:	2301      	movs	r3, #1
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	e015      	b.n	8006672 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	429a      	cmp	r2, r3
 800664e:	d20b      	bcs.n	8006668 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	1ad2      	subs	r2, r2, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff ff99 	bl	8006594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	e004      	b.n	8006672 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800666e:	2301      	movs	r3, #1
 8006670:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006672:	f001 f98b 	bl	800798c <vPortExitCritical>

	return xReturn;
 8006676:	69fb      	ldr	r3, [r7, #28]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3720      	adds	r7, #32
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000e2c 	.word	0x20000e2c
 8006684:	20000e40 	.word	0x20000e40

08006688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800668c:	4b03      	ldr	r3, [pc, #12]	@ (800669c <vTaskMissedYield+0x14>)
 800668e:	2201      	movs	r2, #1
 8006690:	601a      	str	r2, [r3, #0]
}
 8006692:	bf00      	nop
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	20000e3c 	.word	0x20000e3c

080066a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066a8:	f000 f852 	bl	8006750 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066ac:	4b06      	ldr	r3, [pc, #24]	@ (80066c8 <prvIdleTask+0x28>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d9f9      	bls.n	80066a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066b4:	4b05      	ldr	r3, [pc, #20]	@ (80066cc <prvIdleTask+0x2c>)
 80066b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066c4:	e7f0      	b.n	80066a8 <prvIdleTask+0x8>
 80066c6:	bf00      	nop
 80066c8:	20000958 	.word	0x20000958
 80066cc:	e000ed04 	.word	0xe000ed04

080066d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066d6:	2300      	movs	r3, #0
 80066d8:	607b      	str	r3, [r7, #4]
 80066da:	e00c      	b.n	80066f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4a12      	ldr	r2, [pc, #72]	@ (8006730 <prvInitialiseTaskLists+0x60>)
 80066e8:	4413      	add	r3, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe f922 	bl	8004934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3301      	adds	r3, #1
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b37      	cmp	r3, #55	@ 0x37
 80066fa:	d9ef      	bls.n	80066dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066fc:	480d      	ldr	r0, [pc, #52]	@ (8006734 <prvInitialiseTaskLists+0x64>)
 80066fe:	f7fe f919 	bl	8004934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006702:	480d      	ldr	r0, [pc, #52]	@ (8006738 <prvInitialiseTaskLists+0x68>)
 8006704:	f7fe f916 	bl	8004934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006708:	480c      	ldr	r0, [pc, #48]	@ (800673c <prvInitialiseTaskLists+0x6c>)
 800670a:	f7fe f913 	bl	8004934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800670e:	480c      	ldr	r0, [pc, #48]	@ (8006740 <prvInitialiseTaskLists+0x70>)
 8006710:	f7fe f910 	bl	8004934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006714:	480b      	ldr	r0, [pc, #44]	@ (8006744 <prvInitialiseTaskLists+0x74>)
 8006716:	f7fe f90d 	bl	8004934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800671a:	4b0b      	ldr	r3, [pc, #44]	@ (8006748 <prvInitialiseTaskLists+0x78>)
 800671c:	4a05      	ldr	r2, [pc, #20]	@ (8006734 <prvInitialiseTaskLists+0x64>)
 800671e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006720:	4b0a      	ldr	r3, [pc, #40]	@ (800674c <prvInitialiseTaskLists+0x7c>)
 8006722:	4a05      	ldr	r2, [pc, #20]	@ (8006738 <prvInitialiseTaskLists+0x68>)
 8006724:	601a      	str	r2, [r3, #0]
}
 8006726:	bf00      	nop
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000958 	.word	0x20000958
 8006734:	20000db8 	.word	0x20000db8
 8006738:	20000dcc 	.word	0x20000dcc
 800673c:	20000de8 	.word	0x20000de8
 8006740:	20000dfc 	.word	0x20000dfc
 8006744:	20000e14 	.word	0x20000e14
 8006748:	20000de0 	.word	0x20000de0
 800674c:	20000de4 	.word	0x20000de4

08006750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006756:	e019      	b.n	800678c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006758:	f001 f8e6 	bl	8007928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800675c:	4b10      	ldr	r3, [pc, #64]	@ (80067a0 <prvCheckTasksWaitingTermination+0x50>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3304      	adds	r3, #4
 8006768:	4618      	mov	r0, r3
 800676a:	f7fe f96d 	bl	8004a48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800676e:	4b0d      	ldr	r3, [pc, #52]	@ (80067a4 <prvCheckTasksWaitingTermination+0x54>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3b01      	subs	r3, #1
 8006774:	4a0b      	ldr	r2, [pc, #44]	@ (80067a4 <prvCheckTasksWaitingTermination+0x54>)
 8006776:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006778:	4b0b      	ldr	r3, [pc, #44]	@ (80067a8 <prvCheckTasksWaitingTermination+0x58>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3b01      	subs	r3, #1
 800677e:	4a0a      	ldr	r2, [pc, #40]	@ (80067a8 <prvCheckTasksWaitingTermination+0x58>)
 8006780:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006782:	f001 f903 	bl	800798c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f810 	bl	80067ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800678c:	4b06      	ldr	r3, [pc, #24]	@ (80067a8 <prvCheckTasksWaitingTermination+0x58>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e1      	bne.n	8006758 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20000dfc 	.word	0x20000dfc
 80067a4:	20000e28 	.word	0x20000e28
 80067a8:	20000e10 	.word	0x20000e10

080067ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d108      	bne.n	80067d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 faa0 	bl	8007d08 <vPortFree>
				vPortFree( pxTCB );
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fa9d 	bl	8007d08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067ce:	e019      	b.n	8006804 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d103      	bne.n	80067e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 fa94 	bl	8007d08 <vPortFree>
	}
 80067e0:	e010      	b.n	8006804 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d00b      	beq.n	8006804 <prvDeleteTCB+0x58>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	60fb      	str	r3, [r7, #12]
}
 80067fe:	bf00      	nop
 8006800:	bf00      	nop
 8006802:	e7fd      	b.n	8006800 <prvDeleteTCB+0x54>
	}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006812:	4b0c      	ldr	r3, [pc, #48]	@ (8006844 <prvResetNextTaskUnblockTime+0x38>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800681c:	4b0a      	ldr	r3, [pc, #40]	@ (8006848 <prvResetNextTaskUnblockTime+0x3c>)
 800681e:	f04f 32ff 	mov.w	r2, #4294967295
 8006822:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006824:	e008      	b.n	8006838 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006826:	4b07      	ldr	r3, [pc, #28]	@ (8006844 <prvResetNextTaskUnblockTime+0x38>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	4a04      	ldr	r2, [pc, #16]	@ (8006848 <prvResetNextTaskUnblockTime+0x3c>)
 8006836:	6013      	str	r3, [r2, #0]
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	20000de0 	.word	0x20000de0
 8006848:	20000e48 	.word	0x20000e48

0800684c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006852:	4b05      	ldr	r3, [pc, #20]	@ (8006868 <xTaskGetCurrentTaskHandle+0x1c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006858:	687b      	ldr	r3, [r7, #4]
	}
 800685a:	4618      	mov	r0, r3
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	20000954 	.word	0x20000954

0800686c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006872:	4b0b      	ldr	r3, [pc, #44]	@ (80068a0 <xTaskGetSchedulerState+0x34>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800687a:	2301      	movs	r3, #1
 800687c:	607b      	str	r3, [r7, #4]
 800687e:	e008      	b.n	8006892 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006880:	4b08      	ldr	r3, [pc, #32]	@ (80068a4 <xTaskGetSchedulerState+0x38>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006888:	2302      	movs	r3, #2
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	e001      	b.n	8006892 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800688e:	2300      	movs	r3, #0
 8006890:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006892:	687b      	ldr	r3, [r7, #4]
	}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000e34 	.word	0x20000e34
 80068a4:	20000e50 	.word	0x20000e50

080068a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d051      	beq.n	8006962 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c2:	4b2a      	ldr	r3, [pc, #168]	@ (800696c <xTaskPriorityInherit+0xc4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d241      	bcs.n	8006950 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	db06      	blt.n	80068e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d4:	4b25      	ldr	r3, [pc, #148]	@ (800696c <xTaskPriorityInherit+0xc4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6959      	ldr	r1, [r3, #20]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006970 <xTaskPriorityInherit+0xc8>)
 80068f4:	4413      	add	r3, r2
 80068f6:	4299      	cmp	r1, r3
 80068f8:	d122      	bne.n	8006940 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	3304      	adds	r3, #4
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe f8a2 	bl	8004a48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006904:	4b19      	ldr	r3, [pc, #100]	@ (800696c <xTaskPriorityInherit+0xc4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006912:	4b18      	ldr	r3, [pc, #96]	@ (8006974 <xTaskPriorityInherit+0xcc>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d903      	bls.n	8006922 <xTaskPriorityInherit+0x7a>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691e:	4a15      	ldr	r2, [pc, #84]	@ (8006974 <xTaskPriorityInherit+0xcc>)
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4a10      	ldr	r2, [pc, #64]	@ (8006970 <xTaskPriorityInherit+0xc8>)
 8006930:	441a      	add	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	3304      	adds	r3, #4
 8006936:	4619      	mov	r1, r3
 8006938:	4610      	mov	r0, r2
 800693a:	f7fe f828 	bl	800498e <vListInsertEnd>
 800693e:	e004      	b.n	800694a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006940:	4b0a      	ldr	r3, [pc, #40]	@ (800696c <xTaskPriorityInherit+0xc4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800694a:	2301      	movs	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	e008      	b.n	8006962 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006954:	4b05      	ldr	r3, [pc, #20]	@ (800696c <xTaskPriorityInherit+0xc4>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695a:	429a      	cmp	r2, r3
 800695c:	d201      	bcs.n	8006962 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800695e:	2301      	movs	r3, #1
 8006960:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006962:	68fb      	ldr	r3, [r7, #12]
	}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	20000954 	.word	0x20000954
 8006970:	20000958 	.word	0x20000958
 8006974:	20000e30 	.word	0x20000e30

08006978 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d058      	beq.n	8006a40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800698e:	4b2f      	ldr	r3, [pc, #188]	@ (8006a4c <xTaskPriorityDisinherit+0xd4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	429a      	cmp	r2, r3
 8006996:	d00b      	beq.n	80069b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	60fb      	str	r3, [r7, #12]
}
 80069aa:	bf00      	nop
 80069ac:	bf00      	nop
 80069ae:	e7fd      	b.n	80069ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10b      	bne.n	80069d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	60bb      	str	r3, [r7, #8]
}
 80069ca:	bf00      	nop
 80069cc:	bf00      	nop
 80069ce:	e7fd      	b.n	80069cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d4:	1e5a      	subs	r2, r3, #1
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d02c      	beq.n	8006a40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d128      	bne.n	8006a40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe f828 	bl	8004a48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a10:	4b0f      	ldr	r3, [pc, #60]	@ (8006a50 <xTaskPriorityDisinherit+0xd8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d903      	bls.n	8006a20 <xTaskPriorityDisinherit+0xa8>
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006a50 <xTaskPriorityDisinherit+0xd8>)
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4a09      	ldr	r2, [pc, #36]	@ (8006a54 <xTaskPriorityDisinherit+0xdc>)
 8006a2e:	441a      	add	r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f7fd ffa9 	bl	800498e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a40:	697b      	ldr	r3, [r7, #20]
	}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	20000954 	.word	0x20000954
 8006a50:	20000e30 	.word	0x20000e30
 8006a54:	20000958 	.word	0x20000958

08006a58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006a66:	2301      	movs	r3, #1
 8006a68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d06c      	beq.n	8006b4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10b      	bne.n	8006a90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	60fb      	str	r3, [r7, #12]
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	e7fd      	b.n	8006a8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d902      	bls.n	8006aa0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	e002      	b.n	8006aa6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d04c      	beq.n	8006b4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d147      	bne.n	8006b4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006aba:	4b26      	ldr	r3, [pc, #152]	@ (8006b54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d10b      	bne.n	8006adc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	60bb      	str	r3, [r7, #8]
}
 8006ad6:	bf00      	nop
 8006ad8:	bf00      	nop
 8006ada:	e7fd      	b.n	8006ad8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	db04      	blt.n	8006afa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	6959      	ldr	r1, [r3, #20]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4a13      	ldr	r2, [pc, #76]	@ (8006b58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006b0a:	4413      	add	r3, r2
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	d11c      	bne.n	8006b4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fd ff97 	bl	8004a48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d903      	bls.n	8006b2e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8006b5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4a07      	ldr	r2, [pc, #28]	@ (8006b58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006b3c:	441a      	add	r2, r3
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	3304      	adds	r3, #4
 8006b42:	4619      	mov	r1, r3
 8006b44:	4610      	mov	r0, r2
 8006b46:	f7fd ff22 	bl	800498e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b4a:	bf00      	nop
 8006b4c:	3720      	adds	r7, #32
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20000954 	.word	0x20000954
 8006b58:	20000958 	.word	0x20000958
 8006b5c:	20000e30 	.word	0x20000e30

08006b60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006b64:	4b07      	ldr	r3, [pc, #28]	@ (8006b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d004      	beq.n	8006b76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006b6c:	4b05      	ldr	r3, [pc, #20]	@ (8006b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b72:	3201      	adds	r2, #1
 8006b74:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006b76:	4b03      	ldr	r3, [pc, #12]	@ (8006b84 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b78:	681b      	ldr	r3, [r3, #0]
	}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr
 8006b84:	20000954 	.word	0x20000954

08006b88 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006b96:	f000 fec7 	bl	8007928 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006b9a:	4b26      	ldr	r3, [pc, #152]	@ (8006c34 <xTaskNotifyWait+0xac>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d01a      	beq.n	8006bde <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006ba8:	4b22      	ldr	r3, [pc, #136]	@ (8006c34 <xTaskNotifyWait+0xac>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	43d2      	mvns	r2, r2
 8006bb2:	400a      	ands	r2, r1
 8006bb4:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8006c34 <xTaskNotifyWait+0xac>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00b      	beq.n	8006bde <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	6838      	ldr	r0, [r7, #0]
 8006bca:	f000 f9d1 	bl	8006f70 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006bce:	4b1a      	ldr	r3, [pc, #104]	@ (8006c38 <xTaskNotifyWait+0xb0>)
 8006bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006bde:	f000 fed5 	bl	800798c <vPortExitCritical>

		taskENTER_CRITICAL();
 8006be2:	f000 fea1 	bl	8007928 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006bec:	4b11      	ldr	r3, [pc, #68]	@ (8006c34 <xTaskNotifyWait+0xac>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c34 <xTaskNotifyWait+0xac>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d002      	beq.n	8006c0a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	e008      	b.n	8006c1c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c34 <xTaskNotifyWait+0xac>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	43d2      	mvns	r2, r2
 8006c14:	400a      	ands	r2, r1
 8006c16:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c1c:	4b05      	ldr	r3, [pc, #20]	@ (8006c34 <xTaskNotifyWait+0xac>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8006c26:	f000 feb1 	bl	800798c <vPortExitCritical>

		return xReturn;
 8006c2a:	697b      	ldr	r3, [r7, #20]
	}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000954 	.word	0x20000954
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08a      	sub	sp, #40	@ 0x28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	603b      	str	r3, [r7, #0]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10b      	bne.n	8006c6e <xTaskGenericNotify+0x32>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	61bb      	str	r3, [r7, #24]
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	e7fd      	b.n	8006c6a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006c72:	f000 fe59 	bl	8007928 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006c8a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d827      	bhi.n	8006cea <xTaskGenericNotify+0xae>
 8006c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ca0 <xTaskGenericNotify+0x64>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006d0d 	.word	0x08006d0d
 8006ca4:	08006cb5 	.word	0x08006cb5
 8006ca8:	08006cc3 	.word	0x08006cc3
 8006cac:	08006ccf 	.word	0x08006ccf
 8006cb0:	08006cd7 	.word	0x08006cd7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006cc0:	e027      	b.n	8006d12 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006ccc:	e021      	b.n	8006d12 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006cd4:	e01d      	b.n	8006d12 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006cd6:	7ffb      	ldrb	r3, [r7, #31]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d003      	beq.n	8006ce4 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006ce2:	e016      	b.n	8006d12 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006ce8:	e013      	b.n	8006d12 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf2:	d00d      	beq.n	8006d10 <xTaskGenericNotify+0xd4>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	617b      	str	r3, [r7, #20]
}
 8006d06:	bf00      	nop
 8006d08:	bf00      	nop
 8006d0a:	e7fd      	b.n	8006d08 <xTaskGenericNotify+0xcc>
					break;
 8006d0c:	bf00      	nop
 8006d0e:	e000      	b.n	8006d12 <xTaskGenericNotify+0xd6>

					break;
 8006d10:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006d12:	7ffb      	ldrb	r3, [r7, #31]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d13b      	bne.n	8006d90 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fd fe93 	bl	8004a48 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d26:	4b1e      	ldr	r3, [pc, #120]	@ (8006da0 <xTaskGenericNotify+0x164>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d903      	bls.n	8006d36 <xTaskGenericNotify+0xfa>
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d32:	4a1b      	ldr	r2, [pc, #108]	@ (8006da0 <xTaskGenericNotify+0x164>)
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4a18      	ldr	r2, [pc, #96]	@ (8006da4 <xTaskGenericNotify+0x168>)
 8006d44:	441a      	add	r2, r3
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4610      	mov	r0, r2
 8006d4e:	f7fd fe1e 	bl	800498e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <xTaskGenericNotify+0x136>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	613b      	str	r3, [r7, #16]
}
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
 8006d70:	e7fd      	b.n	8006d6e <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d76:	4b0c      	ldr	r3, [pc, #48]	@ (8006da8 <xTaskGenericNotify+0x16c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d907      	bls.n	8006d90 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006d80:	4b0a      	ldr	r3, [pc, #40]	@ (8006dac <xTaskGenericNotify+0x170>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006d90:	f000 fdfc 	bl	800798c <vPortExitCritical>

		return xReturn;
 8006d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3728      	adds	r7, #40	@ 0x28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000e30 	.word	0x20000e30
 8006da4:	20000958 	.word	0x20000958
 8006da8:	20000954 	.word	0x20000954
 8006dac:	e000ed04 	.word	0xe000ed04

08006db0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08e      	sub	sp, #56	@ 0x38
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006de2:	f000 fe81 	bl	8007ae8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8006dea:	f3ef 8211 	mrs	r2, BASEPRI
 8006dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	623a      	str	r2, [r7, #32]
 8006e00:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006e02:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8006e26:	79fb      	ldrb	r3, [r7, #7]
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d829      	bhi.n	8006e80 <xTaskGenericNotifyFromISR+0xd0>
 8006e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <xTaskGenericNotifyFromISR+0x84>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006ea3 	.word	0x08006ea3
 8006e38:	08006e49 	.word	0x08006e49
 8006e3c:	08006e57 	.word	0x08006e57
 8006e40:	08006e63 	.word	0x08006e63
 8006e44:	08006e6b 	.word	0x08006e6b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e52:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006e54:	e028      	b.n	8006ea8 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006e60:	e022      	b.n	8006ea8 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006e68:	e01e      	b.n	8006ea8 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006e6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d003      	beq.n	8006e7a <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006e78:	e016      	b.n	8006ea8 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8006e7e:	e013      	b.n	8006ea8 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d00d      	beq.n	8006ea6 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 8006e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	61bb      	str	r3, [r7, #24]
}
 8006e9c:	bf00      	nop
 8006e9e:	bf00      	nop
 8006ea0:	e7fd      	b.n	8006e9e <xTaskGenericNotifyFromISR+0xee>
					break;
 8006ea2:	bf00      	nop
 8006ea4:	e000      	b.n	8006ea8 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8006ea6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ea8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d147      	bne.n	8006f40 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	617b      	str	r3, [r7, #20]
}
 8006eca:	bf00      	nop
 8006ecc:	bf00      	nop
 8006ece:	e7fd      	b.n	8006ecc <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed0:	4b21      	ldr	r3, [pc, #132]	@ (8006f58 <xTaskGenericNotifyFromISR+0x1a8>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d11d      	bne.n	8006f14 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eda:	3304      	adds	r3, #4
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fd fdb3 	bl	8004a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8006f5c <xTaskGenericNotifyFromISR+0x1ac>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d903      	bls.n	8006ef6 <xTaskGenericNotifyFromISR+0x146>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8006f5c <xTaskGenericNotifyFromISR+0x1ac>)
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4a17      	ldr	r2, [pc, #92]	@ (8006f60 <xTaskGenericNotifyFromISR+0x1b0>)
 8006f04:	441a      	add	r2, r3
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	3304      	adds	r3, #4
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	f7fd fd3e 	bl	800498e <vListInsertEnd>
 8006f12:	e005      	b.n	8006f20 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	3318      	adds	r3, #24
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4812      	ldr	r0, [pc, #72]	@ (8006f64 <xTaskGenericNotifyFromISR+0x1b4>)
 8006f1c:	f7fd fd37 	bl	800498e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f24:	4b10      	ldr	r3, [pc, #64]	@ (8006f68 <xTaskGenericNotifyFromISR+0x1b8>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d908      	bls.n	8006f40 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f36:	2201      	movs	r2, #1
 8006f38:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f6c <xTaskGenericNotifyFromISR+0x1bc>)
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f42:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f383 8811 	msr	BASEPRI, r3
}
 8006f4a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3738      	adds	r7, #56	@ 0x38
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20000e50 	.word	0x20000e50
 8006f5c:	20000e30 	.word	0x20000e30
 8006f60:	20000958 	.word	0x20000958
 8006f64:	20000de8 	.word	0x20000de8
 8006f68:	20000954 	.word	0x20000954
 8006f6c:	20000e3c 	.word	0x20000e3c

08006f70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f7a:	4b21      	ldr	r3, [pc, #132]	@ (8007000 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f80:	4b20      	ldr	r3, [pc, #128]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fd fd5e 	bl	8004a48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d10a      	bne.n	8006faa <prvAddCurrentTaskToDelayedList+0x3a>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d007      	beq.n	8006faa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4819      	ldr	r0, [pc, #100]	@ (8007008 <prvAddCurrentTaskToDelayedList+0x98>)
 8006fa4:	f7fd fcf3 	bl	800498e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fa8:	e026      	b.n	8006ff8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4413      	add	r3, r2
 8006fb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fb2:	4b14      	ldr	r3, [pc, #80]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d209      	bcs.n	8006fd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc2:	4b12      	ldr	r3, [pc, #72]	@ (800700c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fd fd01 	bl	80049d6 <vListInsert>
}
 8006fd4:	e010      	b.n	8006ff8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8007010 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b0a      	ldr	r3, [pc, #40]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f7fd fcf7 	bl	80049d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8007014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d202      	bcs.n	8006ff8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ff2:	4a08      	ldr	r2, [pc, #32]	@ (8007014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	6013      	str	r3, [r2, #0]
}
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000e2c 	.word	0x20000e2c
 8007004:	20000954 	.word	0x20000954
 8007008:	20000e14 	.word	0x20000e14
 800700c:	20000de4 	.word	0x20000de4
 8007010:	20000de0 	.word	0x20000de0
 8007014:	20000e48 	.word	0x20000e48

08007018 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08a      	sub	sp, #40	@ 0x28
 800701c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007022:	f000 fb13 	bl	800764c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007026:	4b1d      	ldr	r3, [pc, #116]	@ (800709c <xTimerCreateTimerTask+0x84>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d021      	beq.n	8007072 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007036:	1d3a      	adds	r2, r7, #4
 8007038:	f107 0108 	add.w	r1, r7, #8
 800703c:	f107 030c 	add.w	r3, r7, #12
 8007040:	4618      	mov	r0, r3
 8007042:	f7fd fc5d 	bl	8004900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	9202      	str	r2, [sp, #8]
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	2302      	movs	r3, #2
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	460a      	mov	r2, r1
 8007058:	4911      	ldr	r1, [pc, #68]	@ (80070a0 <xTimerCreateTimerTask+0x88>)
 800705a:	4812      	ldr	r0, [pc, #72]	@ (80070a4 <xTimerCreateTimerTask+0x8c>)
 800705c:	f7fe fe02 	bl	8005c64 <xTaskCreateStatic>
 8007060:	4603      	mov	r3, r0
 8007062:	4a11      	ldr	r2, [pc, #68]	@ (80070a8 <xTimerCreateTimerTask+0x90>)
 8007064:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007066:	4b10      	ldr	r3, [pc, #64]	@ (80070a8 <xTimerCreateTimerTask+0x90>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800706e:	2301      	movs	r3, #1
 8007070:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10b      	bne.n	8007090 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	613b      	str	r3, [r7, #16]
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	e7fd      	b.n	800708c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007090:	697b      	ldr	r3, [r7, #20]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000e84 	.word	0x20000e84
 80070a0:	0800832c 	.word	0x0800832c
 80070a4:	080071e5 	.word	0x080071e5
 80070a8:	20000e88 	.word	0x20000e88

080070ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	@ 0x28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10b      	bne.n	80070dc <xTimerGenericCommand+0x30>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	623b      	str	r3, [r7, #32]
}
 80070d6:	bf00      	nop
 80070d8:	bf00      	nop
 80070da:	e7fd      	b.n	80070d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070dc:	4b19      	ldr	r3, [pc, #100]	@ (8007144 <xTimerGenericCommand+0x98>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d02a      	beq.n	800713a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b05      	cmp	r3, #5
 80070f4:	dc18      	bgt.n	8007128 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070f6:	f7ff fbb9 	bl	800686c <xTaskGetSchedulerState>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d109      	bne.n	8007114 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007100:	4b10      	ldr	r3, [pc, #64]	@ (8007144 <xTimerGenericCommand+0x98>)
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	f107 0110 	add.w	r1, r7, #16
 8007108:	2300      	movs	r3, #0
 800710a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800710c:	f7fd ff32 	bl	8004f74 <xQueueGenericSend>
 8007110:	6278      	str	r0, [r7, #36]	@ 0x24
 8007112:	e012      	b.n	800713a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007114:	4b0b      	ldr	r3, [pc, #44]	@ (8007144 <xTimerGenericCommand+0x98>)
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	f107 0110 	add.w	r1, r7, #16
 800711c:	2300      	movs	r3, #0
 800711e:	2200      	movs	r2, #0
 8007120:	f7fd ff28 	bl	8004f74 <xQueueGenericSend>
 8007124:	6278      	str	r0, [r7, #36]	@ 0x24
 8007126:	e008      	b.n	800713a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007128:	4b06      	ldr	r3, [pc, #24]	@ (8007144 <xTimerGenericCommand+0x98>)
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	f107 0110 	add.w	r1, r7, #16
 8007130:	2300      	movs	r3, #0
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	f7fe f820 	bl	8005178 <xQueueGenericSendFromISR>
 8007138:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800713c:	4618      	mov	r0, r3
 800713e:	3728      	adds	r7, #40	@ 0x28
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000e84 	.word	0x20000e84

08007148 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af02      	add	r7, sp, #8
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007152:	4b23      	ldr	r3, [pc, #140]	@ (80071e0 <prvProcessExpiredTimer+0x98>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	3304      	adds	r3, #4
 8007160:	4618      	mov	r0, r3
 8007162:	f7fd fc71 	bl	8004a48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d023      	beq.n	80071bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	699a      	ldr	r2, [r3, #24]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	18d1      	adds	r1, r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	6978      	ldr	r0, [r7, #20]
 8007182:	f000 f8d5 	bl	8007330 <prvInsertTimerInActiveList>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d020      	beq.n	80071ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800718c:	2300      	movs	r3, #0
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	2300      	movs	r3, #0
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	2100      	movs	r1, #0
 8007196:	6978      	ldr	r0, [r7, #20]
 8007198:	f7ff ff88 	bl	80070ac <xTimerGenericCommand>
 800719c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d114      	bne.n	80071ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	60fb      	str	r3, [r7, #12]
}
 80071b6:	bf00      	nop
 80071b8:	bf00      	nop
 80071ba:	e7fd      	b.n	80071b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	6978      	ldr	r0, [r7, #20]
 80071d4:	4798      	blx	r3
}
 80071d6:	bf00      	nop
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000e7c 	.word	0x20000e7c

080071e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071ec:	f107 0308 	add.w	r3, r7, #8
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 f859 	bl	80072a8 <prvGetNextExpireTime>
 80071f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4619      	mov	r1, r3
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 f805 	bl	800720c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007202:	f000 f8d7 	bl	80073b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007206:	bf00      	nop
 8007208:	e7f0      	b.n	80071ec <prvTimerTask+0x8>
	...

0800720c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007216:	f7fe ff33 	bl	8006080 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800721a:	f107 0308 	add.w	r3, r7, #8
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f866 	bl	80072f0 <prvSampleTimeNow>
 8007224:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d130      	bne.n	800728e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <prvProcessTimerOrBlockTask+0x3c>
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	429a      	cmp	r2, r3
 8007238:	d806      	bhi.n	8007248 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800723a:	f7fe ff2f 	bl	800609c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800723e:	68f9      	ldr	r1, [r7, #12]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff ff81 	bl	8007148 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007246:	e024      	b.n	8007292 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d008      	beq.n	8007260 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800724e:	4b13      	ldr	r3, [pc, #76]	@ (800729c <prvProcessTimerOrBlockTask+0x90>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <prvProcessTimerOrBlockTask+0x50>
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <prvProcessTimerOrBlockTask+0x52>
 800725c:	2300      	movs	r3, #0
 800725e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007260:	4b0f      	ldr	r3, [pc, #60]	@ (80072a0 <prvProcessTimerOrBlockTask+0x94>)
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	4619      	mov	r1, r3
 800726e:	f7fe fcc5 	bl	8005bfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007272:	f7fe ff13 	bl	800609c <xTaskResumeAll>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800727c:	4b09      	ldr	r3, [pc, #36]	@ (80072a4 <prvProcessTimerOrBlockTask+0x98>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	f3bf 8f6f 	isb	sy
}
 800728c:	e001      	b.n	8007292 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800728e:	f7fe ff05 	bl	800609c <xTaskResumeAll>
}
 8007292:	bf00      	nop
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000e80 	.word	0x20000e80
 80072a0:	20000e84 	.word	0x20000e84
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072b0:	4b0e      	ldr	r3, [pc, #56]	@ (80072ec <prvGetNextExpireTime+0x44>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <prvGetNextExpireTime+0x16>
 80072ba:	2201      	movs	r2, #1
 80072bc:	e000      	b.n	80072c0 <prvGetNextExpireTime+0x18>
 80072be:	2200      	movs	r2, #0
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d105      	bne.n	80072d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072cc:	4b07      	ldr	r3, [pc, #28]	@ (80072ec <prvGetNextExpireTime+0x44>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	e001      	b.n	80072dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072dc:	68fb      	ldr	r3, [r7, #12]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000e7c 	.word	0x20000e7c

080072f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072f8:	f7fe ff6e 	bl	80061d8 <xTaskGetTickCount>
 80072fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072fe:	4b0b      	ldr	r3, [pc, #44]	@ (800732c <prvSampleTimeNow+0x3c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	429a      	cmp	r2, r3
 8007306:	d205      	bcs.n	8007314 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007308:	f000 f93a 	bl	8007580 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	e002      	b.n	800731a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800731a:	4a04      	ldr	r2, [pc, #16]	@ (800732c <prvSampleTimeNow+0x3c>)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007320:	68fb      	ldr	r3, [r7, #12]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000e8c 	.word	0x20000e8c

08007330 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800733e:	2300      	movs	r3, #0
 8007340:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	429a      	cmp	r2, r3
 8007354:	d812      	bhi.n	800737c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	1ad2      	subs	r2, r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	429a      	cmp	r2, r3
 8007362:	d302      	bcc.n	800736a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007364:	2301      	movs	r3, #1
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	e01b      	b.n	80073a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800736a:	4b10      	ldr	r3, [pc, #64]	@ (80073ac <prvInsertTimerInActiveList+0x7c>)
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3304      	adds	r3, #4
 8007372:	4619      	mov	r1, r3
 8007374:	4610      	mov	r0, r2
 8007376:	f7fd fb2e 	bl	80049d6 <vListInsert>
 800737a:	e012      	b.n	80073a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d206      	bcs.n	8007392 <prvInsertTimerInActiveList+0x62>
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d302      	bcc.n	8007392 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800738c:	2301      	movs	r3, #1
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	e007      	b.n	80073a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007392:	4b07      	ldr	r3, [pc, #28]	@ (80073b0 <prvInsertTimerInActiveList+0x80>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3304      	adds	r3, #4
 800739a:	4619      	mov	r1, r3
 800739c:	4610      	mov	r0, r2
 800739e:	f7fd fb1a 	bl	80049d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073a2:	697b      	ldr	r3, [r7, #20]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20000e80 	.word	0x20000e80
 80073b0:	20000e7c 	.word	0x20000e7c

080073b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08e      	sub	sp, #56	@ 0x38
 80073b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073ba:	e0ce      	b.n	800755a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	da19      	bge.n	80073f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073c2:	1d3b      	adds	r3, r7, #4
 80073c4:	3304      	adds	r3, #4
 80073c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10b      	bne.n	80073e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	61fb      	str	r3, [r7, #28]
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	e7fd      	b.n	80073e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ec:	6850      	ldr	r0, [r2, #4]
 80073ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073f0:	6892      	ldr	r2, [r2, #8]
 80073f2:	4611      	mov	r1, r2
 80073f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f2c0 80ae 	blt.w	800755a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d004      	beq.n	8007414 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740c:	3304      	adds	r3, #4
 800740e:	4618      	mov	r0, r3
 8007410:	f7fd fb1a 	bl	8004a48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007414:	463b      	mov	r3, r7
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff ff6a 	bl	80072f0 <prvSampleTimeNow>
 800741c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b09      	cmp	r3, #9
 8007422:	f200 8097 	bhi.w	8007554 <prvProcessReceivedCommands+0x1a0>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <prvProcessReceivedCommands+0x78>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007455 	.word	0x08007455
 8007430:	08007455 	.word	0x08007455
 8007434:	08007455 	.word	0x08007455
 8007438:	080074cb 	.word	0x080074cb
 800743c:	080074df 	.word	0x080074df
 8007440:	0800752b 	.word	0x0800752b
 8007444:	08007455 	.word	0x08007455
 8007448:	08007455 	.word	0x08007455
 800744c:	080074cb 	.word	0x080074cb
 8007450:	080074df 	.word	0x080074df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007456:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	b2da      	uxtb	r2, r3
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	18d1      	adds	r1, r2, r3
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007474:	f7ff ff5c 	bl	8007330 <prvInsertTimerInActiveList>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d06c      	beq.n	8007558 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800747e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007484:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d061      	beq.n	8007558 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	441a      	add	r2, r3
 800749c:	2300      	movs	r3, #0
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	2300      	movs	r3, #0
 80074a2:	2100      	movs	r1, #0
 80074a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074a6:	f7ff fe01 	bl	80070ac <xTimerGenericCommand>
 80074aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d152      	bne.n	8007558 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	61bb      	str	r3, [r7, #24]
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	e7fd      	b.n	80074c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074d0:	f023 0301 	bic.w	r3, r3, #1
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074dc:	e03d      	b.n	800755a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074e4:	f043 0301 	orr.w	r3, r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	617b      	str	r3, [r7, #20]
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	e7fd      	b.n	8007512 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	18d1      	adds	r1, r2, r3
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007524:	f7ff ff04 	bl	8007330 <prvInsertTimerInActiveList>
					break;
 8007528:	e017      	b.n	800755a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d103      	bne.n	8007540 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800753a:	f000 fbe5 	bl	8007d08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800753e:	e00c      	b.n	800755a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007546:	f023 0301 	bic.w	r3, r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007552:	e002      	b.n	800755a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007554:	bf00      	nop
 8007556:	e000      	b.n	800755a <prvProcessReceivedCommands+0x1a6>
					break;
 8007558:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800755a:	4b08      	ldr	r3, [pc, #32]	@ (800757c <prvProcessReceivedCommands+0x1c8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	1d39      	adds	r1, r7, #4
 8007560:	2200      	movs	r2, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f7fd ff36 	bl	80053d4 <xQueueReceive>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	f47f af26 	bne.w	80073bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	3730      	adds	r7, #48	@ 0x30
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000e84 	.word	0x20000e84

08007580 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007586:	e049      	b.n	800761c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007588:	4b2e      	ldr	r3, [pc, #184]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007592:	4b2c      	ldr	r3, [pc, #176]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3304      	adds	r3, #4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fd fa51 	bl	8004a48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d02f      	beq.n	800761c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4413      	add	r3, r2
 80075c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d90e      	bls.n	80075ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075da:	4b1a      	ldr	r3, [pc, #104]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3304      	adds	r3, #4
 80075e2:	4619      	mov	r1, r3
 80075e4:	4610      	mov	r0, r2
 80075e6:	f7fd f9f6 	bl	80049d6 <vListInsert>
 80075ea:	e017      	b.n	800761c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ec:	2300      	movs	r3, #0
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	2300      	movs	r3, #0
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	2100      	movs	r1, #0
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fd58 	bl	80070ac <xTimerGenericCommand>
 80075fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10b      	bne.n	800761c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	603b      	str	r3, [r7, #0]
}
 8007616:	bf00      	nop
 8007618:	bf00      	nop
 800761a:	e7fd      	b.n	8007618 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800761c:	4b09      	ldr	r3, [pc, #36]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1b0      	bne.n	8007588 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007626:	4b07      	ldr	r3, [pc, #28]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800762c:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <prvSwitchTimerLists+0xc8>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a04      	ldr	r2, [pc, #16]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 8007632:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007634:	4a04      	ldr	r2, [pc, #16]	@ (8007648 <prvSwitchTimerLists+0xc8>)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	6013      	str	r3, [r2, #0]
}
 800763a:	bf00      	nop
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20000e7c 	.word	0x20000e7c
 8007648:	20000e80 	.word	0x20000e80

0800764c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007652:	f000 f969 	bl	8007928 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007656:	4b15      	ldr	r3, [pc, #84]	@ (80076ac <prvCheckForValidListAndQueue+0x60>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d120      	bne.n	80076a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800765e:	4814      	ldr	r0, [pc, #80]	@ (80076b0 <prvCheckForValidListAndQueue+0x64>)
 8007660:	f7fd f968 	bl	8004934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007664:	4813      	ldr	r0, [pc, #76]	@ (80076b4 <prvCheckForValidListAndQueue+0x68>)
 8007666:	f7fd f965 	bl	8004934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800766a:	4b13      	ldr	r3, [pc, #76]	@ (80076b8 <prvCheckForValidListAndQueue+0x6c>)
 800766c:	4a10      	ldr	r2, [pc, #64]	@ (80076b0 <prvCheckForValidListAndQueue+0x64>)
 800766e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007670:	4b12      	ldr	r3, [pc, #72]	@ (80076bc <prvCheckForValidListAndQueue+0x70>)
 8007672:	4a10      	ldr	r2, [pc, #64]	@ (80076b4 <prvCheckForValidListAndQueue+0x68>)
 8007674:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007676:	2300      	movs	r3, #0
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	4b11      	ldr	r3, [pc, #68]	@ (80076c0 <prvCheckForValidListAndQueue+0x74>)
 800767c:	4a11      	ldr	r2, [pc, #68]	@ (80076c4 <prvCheckForValidListAndQueue+0x78>)
 800767e:	2110      	movs	r1, #16
 8007680:	200a      	movs	r0, #10
 8007682:	f7fd fa75 	bl	8004b70 <xQueueGenericCreateStatic>
 8007686:	4603      	mov	r3, r0
 8007688:	4a08      	ldr	r2, [pc, #32]	@ (80076ac <prvCheckForValidListAndQueue+0x60>)
 800768a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800768c:	4b07      	ldr	r3, [pc, #28]	@ (80076ac <prvCheckForValidListAndQueue+0x60>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d005      	beq.n	80076a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007694:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <prvCheckForValidListAndQueue+0x60>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	490b      	ldr	r1, [pc, #44]	@ (80076c8 <prvCheckForValidListAndQueue+0x7c>)
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fa5a 	bl	8005b54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076a0:	f000 f974 	bl	800798c <vPortExitCritical>
}
 80076a4:	bf00      	nop
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000e84 	.word	0x20000e84
 80076b0:	20000e54 	.word	0x20000e54
 80076b4:	20000e68 	.word	0x20000e68
 80076b8:	20000e7c 	.word	0x20000e7c
 80076bc:	20000e80 	.word	0x20000e80
 80076c0:	20000f30 	.word	0x20000f30
 80076c4:	20000e90 	.word	0x20000e90
 80076c8:	08008334 	.word	0x08008334

080076cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3b04      	subs	r3, #4
 80076dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3b04      	subs	r3, #4
 80076ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f023 0201 	bic.w	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3b04      	subs	r3, #4
 80076fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007730 <pxPortInitialiseStack+0x64>)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3b14      	subs	r3, #20
 8007706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3b04      	subs	r3, #4
 8007712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f06f 0202 	mvn.w	r2, #2
 800771a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3b20      	subs	r3, #32
 8007720:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007722:	68fb      	ldr	r3, [r7, #12]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	08007735 	.word	0x08007735

08007734 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800773e:	4b13      	ldr	r3, [pc, #76]	@ (800778c <prvTaskExitError+0x58>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007746:	d00b      	beq.n	8007760 <prvTaskExitError+0x2c>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	60fb      	str	r3, [r7, #12]
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	e7fd      	b.n	800775c <prvTaskExitError+0x28>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60bb      	str	r3, [r7, #8]
}
 8007772:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007774:	bf00      	nop
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0fc      	beq.n	8007776 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	2000004c 	.word	0x2000004c

08007790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007790:	4b07      	ldr	r3, [pc, #28]	@ (80077b0 <pxCurrentTCBConst2>)
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	6808      	ldr	r0, [r1, #0]
 8007796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	f380 8809 	msr	PSP, r0
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8811 	msr	BASEPRI, r0
 80077aa:	4770      	bx	lr
 80077ac:	f3af 8000 	nop.w

080077b0 <pxCurrentTCBConst2>:
 80077b0:	20000954 	.word	0x20000954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop

080077b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077b8:	4808      	ldr	r0, [pc, #32]	@ (80077dc <prvPortStartFirstTask+0x24>)
 80077ba:	6800      	ldr	r0, [r0, #0]
 80077bc:	6800      	ldr	r0, [r0, #0]
 80077be:	f380 8808 	msr	MSP, r0
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8814 	msr	CONTROL, r0
 80077ca:	b662      	cpsie	i
 80077cc:	b661      	cpsie	f
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	df00      	svc	0
 80077d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077da:	bf00      	nop
 80077dc:	e000ed08 	.word	0xe000ed08

080077e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077e6:	4b47      	ldr	r3, [pc, #284]	@ (8007904 <xPortStartScheduler+0x124>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a47      	ldr	r2, [pc, #284]	@ (8007908 <xPortStartScheduler+0x128>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10b      	bne.n	8007808 <xPortStartScheduler+0x28>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	613b      	str	r3, [r7, #16]
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	e7fd      	b.n	8007804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007808:	4b3e      	ldr	r3, [pc, #248]	@ (8007904 <xPortStartScheduler+0x124>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a3f      	ldr	r2, [pc, #252]	@ (800790c <xPortStartScheduler+0x12c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d10b      	bne.n	800782a <xPortStartScheduler+0x4a>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	60fb      	str	r3, [r7, #12]
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	e7fd      	b.n	8007826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800782a:	4b39      	ldr	r3, [pc, #228]	@ (8007910 <xPortStartScheduler+0x130>)
 800782c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	22ff      	movs	r2, #255	@ 0xff
 800783a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800784c:	b2da      	uxtb	r2, r3
 800784e:	4b31      	ldr	r3, [pc, #196]	@ (8007914 <xPortStartScheduler+0x134>)
 8007850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007852:	4b31      	ldr	r3, [pc, #196]	@ (8007918 <xPortStartScheduler+0x138>)
 8007854:	2207      	movs	r2, #7
 8007856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007858:	e009      	b.n	800786e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800785a:	4b2f      	ldr	r3, [pc, #188]	@ (8007918 <xPortStartScheduler+0x138>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3b01      	subs	r3, #1
 8007860:	4a2d      	ldr	r2, [pc, #180]	@ (8007918 <xPortStartScheduler+0x138>)
 8007862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007876:	2b80      	cmp	r3, #128	@ 0x80
 8007878:	d0ef      	beq.n	800785a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800787a:	4b27      	ldr	r3, [pc, #156]	@ (8007918 <xPortStartScheduler+0x138>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f1c3 0307 	rsb	r3, r3, #7
 8007882:	2b04      	cmp	r3, #4
 8007884:	d00b      	beq.n	800789e <xPortStartScheduler+0xbe>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	60bb      	str	r3, [r7, #8]
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800789e:	4b1e      	ldr	r3, [pc, #120]	@ (8007918 <xPortStartScheduler+0x138>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007918 <xPortStartScheduler+0x138>)
 80078a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007918 <xPortStartScheduler+0x138>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078b0:	4a19      	ldr	r2, [pc, #100]	@ (8007918 <xPortStartScheduler+0x138>)
 80078b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078bc:	4b17      	ldr	r3, [pc, #92]	@ (800791c <xPortStartScheduler+0x13c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a16      	ldr	r2, [pc, #88]	@ (800791c <xPortStartScheduler+0x13c>)
 80078c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078c8:	4b14      	ldr	r3, [pc, #80]	@ (800791c <xPortStartScheduler+0x13c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a13      	ldr	r2, [pc, #76]	@ (800791c <xPortStartScheduler+0x13c>)
 80078ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078d4:	f000 f8da 	bl	8007a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078d8:	4b11      	ldr	r3, [pc, #68]	@ (8007920 <xPortStartScheduler+0x140>)
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078de:	f000 f8f9 	bl	8007ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078e2:	4b10      	ldr	r3, [pc, #64]	@ (8007924 <xPortStartScheduler+0x144>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007924 <xPortStartScheduler+0x144>)
 80078e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078ee:	f7ff ff63 	bl	80077b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078f2:	f7fe fd3b 	bl	800636c <vTaskSwitchContext>
	prvTaskExitError();
 80078f6:	f7ff ff1d 	bl	8007734 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	e000ed00 	.word	0xe000ed00
 8007908:	410fc271 	.word	0x410fc271
 800790c:	410fc270 	.word	0x410fc270
 8007910:	e000e400 	.word	0xe000e400
 8007914:	20000f80 	.word	0x20000f80
 8007918:	20000f84 	.word	0x20000f84
 800791c:	e000ed20 	.word	0xe000ed20
 8007920:	2000004c 	.word	0x2000004c
 8007924:	e000ef34 	.word	0xe000ef34

08007928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	607b      	str	r3, [r7, #4]
}
 8007940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007942:	4b10      	ldr	r3, [pc, #64]	@ (8007984 <vPortEnterCritical+0x5c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3301      	adds	r3, #1
 8007948:	4a0e      	ldr	r2, [pc, #56]	@ (8007984 <vPortEnterCritical+0x5c>)
 800794a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800794c:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <vPortEnterCritical+0x5c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d110      	bne.n	8007976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007954:	4b0c      	ldr	r3, [pc, #48]	@ (8007988 <vPortEnterCritical+0x60>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <vPortEnterCritical+0x4e>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	603b      	str	r3, [r7, #0]
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	e7fd      	b.n	8007972 <vPortEnterCritical+0x4a>
	}
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000004c 	.word	0x2000004c
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007992:	4b12      	ldr	r3, [pc, #72]	@ (80079dc <vPortExitCritical+0x50>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <vPortExitCritical+0x26>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	607b      	str	r3, [r7, #4]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079b2:	4b0a      	ldr	r3, [pc, #40]	@ (80079dc <vPortExitCritical+0x50>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	4a08      	ldr	r2, [pc, #32]	@ (80079dc <vPortExitCritical+0x50>)
 80079ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079bc:	4b07      	ldr	r3, [pc, #28]	@ (80079dc <vPortExitCritical+0x50>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <vPortExitCritical+0x44>
 80079c4:	2300      	movs	r3, #0
 80079c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f383 8811 	msr	BASEPRI, r3
}
 80079ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	2000004c 	.word	0x2000004c

080079e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079e0:	f3ef 8009 	mrs	r0, PSP
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4b15      	ldr	r3, [pc, #84]	@ (8007a40 <pxCurrentTCBConst>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	f01e 0f10 	tst.w	lr, #16
 80079f0:	bf08      	it	eq
 80079f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fa:	6010      	str	r0, [r2, #0]
 80079fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a04:	f380 8811 	msr	BASEPRI, r0
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f7fe fcac 	bl	800636c <vTaskSwitchContext>
 8007a14:	f04f 0000 	mov.w	r0, #0
 8007a18:	f380 8811 	msr	BASEPRI, r0
 8007a1c:	bc09      	pop	{r0, r3}
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	6808      	ldr	r0, [r1, #0]
 8007a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a26:	f01e 0f10 	tst.w	lr, #16
 8007a2a:	bf08      	it	eq
 8007a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a30:	f380 8809 	msr	PSP, r0
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	f3af 8000 	nop.w

08007a40 <pxCurrentTCBConst>:
 8007a40:	20000954 	.word	0x20000954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop

08007a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	607b      	str	r3, [r7, #4]
}
 8007a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a62:	f7fe fbc9 	bl	80061f8 <xTaskIncrementTick>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a6c:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <xPortSysTickHandler+0x40>)
 8007a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	2300      	movs	r3, #0
 8007a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	f383 8811 	msr	BASEPRI, r3
}
 8007a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a90:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac0 <vPortSetupTimerInterrupt+0x34>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a96:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac4 <vPortSetupTimerInterrupt+0x38>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <vPortSetupTimerInterrupt+0x3c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8007acc <vPortSetupTimerInterrupt+0x40>)
 8007aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa6:	099b      	lsrs	r3, r3, #6
 8007aa8:	4a09      	ldr	r2, [pc, #36]	@ (8007ad0 <vPortSetupTimerInterrupt+0x44>)
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007aae:	4b04      	ldr	r3, [pc, #16]	@ (8007ac0 <vPortSetupTimerInterrupt+0x34>)
 8007ab0:	2207      	movs	r2, #7
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	e000e010 	.word	0xe000e010
 8007ac4:	e000e018 	.word	0xe000e018
 8007ac8:	20000040 	.word	0x20000040
 8007acc:	10624dd3 	.word	0x10624dd3
 8007ad0:	e000e014 	.word	0xe000e014

08007ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ae4 <vPortEnableVFP+0x10>
 8007ad8:	6801      	ldr	r1, [r0, #0]
 8007ada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ade:	6001      	str	r1, [r0, #0]
 8007ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ae2:	bf00      	nop
 8007ae4:	e000ed88 	.word	0xe000ed88

08007ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007aee:	f3ef 8305 	mrs	r3, IPSR
 8007af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b0f      	cmp	r3, #15
 8007af8:	d915      	bls.n	8007b26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007afa:	4a18      	ldr	r2, [pc, #96]	@ (8007b5c <vPortValidateInterruptPriority+0x74>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b04:	4b16      	ldr	r3, [pc, #88]	@ (8007b60 <vPortValidateInterruptPriority+0x78>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	7afa      	ldrb	r2, [r7, #11]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d20b      	bcs.n	8007b26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	607b      	str	r3, [r7, #4]
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	e7fd      	b.n	8007b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b26:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <vPortValidateInterruptPriority+0x7c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b68 <vPortValidateInterruptPriority+0x80>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d90b      	bls.n	8007b4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	603b      	str	r3, [r7, #0]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <vPortValidateInterruptPriority+0x62>
	}
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	e000e3f0 	.word	0xe000e3f0
 8007b60:	20000f80 	.word	0x20000f80
 8007b64:	e000ed0c 	.word	0xe000ed0c
 8007b68:	20000f84 	.word	0x20000f84

08007b6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08a      	sub	sp, #40	@ 0x28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b78:	f7fe fa82 	bl	8006080 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8007cf0 <pvPortMalloc+0x184>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b84:	f000 f924 	bl	8007dd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b88:	4b5a      	ldr	r3, [pc, #360]	@ (8007cf4 <pvPortMalloc+0x188>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 8095 	bne.w	8007cc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01e      	beq.n	8007bda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d015      	beq.n	8007bda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f023 0307 	bic.w	r3, r3, #7
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00b      	beq.n	8007bda <pvPortMalloc+0x6e>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	617b      	str	r3, [r7, #20]
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	e7fd      	b.n	8007bd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d06f      	beq.n	8007cc0 <pvPortMalloc+0x154>
 8007be0:	4b45      	ldr	r3, [pc, #276]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d86a      	bhi.n	8007cc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bea:	4b44      	ldr	r3, [pc, #272]	@ (8007cfc <pvPortMalloc+0x190>)
 8007bec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bee:	4b43      	ldr	r3, [pc, #268]	@ (8007cfc <pvPortMalloc+0x190>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bf4:	e004      	b.n	8007c00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d903      	bls.n	8007c12 <pvPortMalloc+0xa6>
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f1      	bne.n	8007bf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c12:	4b37      	ldr	r3, [pc, #220]	@ (8007cf0 <pvPortMalloc+0x184>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d051      	beq.n	8007cc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2208      	movs	r2, #8
 8007c22:	4413      	add	r3, r2
 8007c24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	1ad2      	subs	r2, r2, r3
 8007c36:	2308      	movs	r3, #8
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d920      	bls.n	8007c80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <pvPortMalloc+0xfc>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	613b      	str	r3, [r7, #16]
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	e7fd      	b.n	8007c64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c7a:	69b8      	ldr	r0, [r7, #24]
 8007c7c:	f000 f90a 	bl	8007e94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c80:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b1b      	ldr	r3, [pc, #108]	@ (8007d00 <pvPortMalloc+0x194>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d203      	bcs.n	8007ca2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c9a:	4b17      	ldr	r3, [pc, #92]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <pvPortMalloc+0x194>)
 8007ca0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	4b13      	ldr	r3, [pc, #76]	@ (8007cf4 <pvPortMalloc+0x188>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	431a      	orrs	r2, r3
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cb6:	4b13      	ldr	r3, [pc, #76]	@ (8007d04 <pvPortMalloc+0x198>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	4a11      	ldr	r2, [pc, #68]	@ (8007d04 <pvPortMalloc+0x198>)
 8007cbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cc0:	f7fe f9ec 	bl	800609c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <pvPortMalloc+0x17a>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	60fb      	str	r3, [r7, #12]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3728      	adds	r7, #40	@ 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20004b90 	.word	0x20004b90
 8007cf4:	20004ba4 	.word	0x20004ba4
 8007cf8:	20004b94 	.word	0x20004b94
 8007cfc:	20004b88 	.word	0x20004b88
 8007d00:	20004b98 	.word	0x20004b98
 8007d04:	20004b9c 	.word	0x20004b9c

08007d08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d04f      	beq.n	8007dba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	425b      	negs	r3, r3
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4413      	add	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	4b25      	ldr	r3, [pc, #148]	@ (8007dc4 <vPortFree+0xbc>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4013      	ands	r3, r2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <vPortFree+0x46>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	60fb      	str	r3, [r7, #12]
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	e7fd      	b.n	8007d4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00b      	beq.n	8007d6e <vPortFree+0x66>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60bb      	str	r3, [r7, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	4b14      	ldr	r3, [pc, #80]	@ (8007dc4 <vPortFree+0xbc>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4013      	ands	r3, r2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01e      	beq.n	8007dba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11a      	bne.n	8007dba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc4 <vPortFree+0xbc>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	401a      	ands	r2, r3
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d94:	f7fe f974 	bl	8006080 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc8 <vPortFree+0xc0>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4413      	add	r3, r2
 8007da2:	4a09      	ldr	r2, [pc, #36]	@ (8007dc8 <vPortFree+0xc0>)
 8007da4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007da6:	6938      	ldr	r0, [r7, #16]
 8007da8:	f000 f874 	bl	8007e94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dac:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <vPortFree+0xc4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	4a06      	ldr	r2, [pc, #24]	@ (8007dcc <vPortFree+0xc4>)
 8007db4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007db6:	f7fe f971 	bl	800609c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dba:	bf00      	nop
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20004ba4 	.word	0x20004ba4
 8007dc8:	20004b94 	.word	0x20004b94
 8007dcc:	20004ba0 	.word	0x20004ba0

08007dd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007dda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ddc:	4b27      	ldr	r3, [pc, #156]	@ (8007e7c <prvHeapInit+0xac>)
 8007dde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00c      	beq.n	8007e04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3307      	adds	r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0307 	bic.w	r3, r3, #7
 8007df6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007e7c <prvHeapInit+0xac>)
 8007e00:	4413      	add	r3, r2
 8007e02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e08:	4a1d      	ldr	r2, [pc, #116]	@ (8007e80 <prvHeapInit+0xb0>)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8007e80 <prvHeapInit+0xb0>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4413      	add	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1a9b      	subs	r3, r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0307 	bic.w	r3, r3, #7
 8007e2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4a15      	ldr	r2, [pc, #84]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e32:	4b14      	ldr	r3, [pc, #80]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e3a:	4b12      	ldr	r3, [pc, #72]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e50:	4b0c      	ldr	r3, [pc, #48]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e88 <prvHeapInit+0xb8>)
 8007e5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	4a09      	ldr	r2, [pc, #36]	@ (8007e8c <prvHeapInit+0xbc>)
 8007e66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e68:	4b09      	ldr	r3, [pc, #36]	@ (8007e90 <prvHeapInit+0xc0>)
 8007e6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e6e:	601a      	str	r2, [r3, #0]
}
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	20000f88 	.word	0x20000f88
 8007e80:	20004b88 	.word	0x20004b88
 8007e84:	20004b90 	.word	0x20004b90
 8007e88:	20004b98 	.word	0x20004b98
 8007e8c:	20004b94 	.word	0x20004b94
 8007e90:	20004ba4 	.word	0x20004ba4

08007e94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e9c:	4b28      	ldr	r3, [pc, #160]	@ (8007f40 <prvInsertBlockIntoFreeList+0xac>)
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e002      	b.n	8007ea8 <prvInsertBlockIntoFreeList+0x14>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d8f7      	bhi.n	8007ea2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d108      	bne.n	8007ed6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	441a      	add	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d118      	bne.n	8007f1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	4b15      	ldr	r3, [pc, #84]	@ (8007f44 <prvInsertBlockIntoFreeList+0xb0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d00d      	beq.n	8007f12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	441a      	add	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	e008      	b.n	8007f24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f12:	4b0c      	ldr	r3, [pc, #48]	@ (8007f44 <prvInsertBlockIntoFreeList+0xb0>)
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	e003      	b.n	8007f24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d002      	beq.n	8007f32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f32:	bf00      	nop
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20004b88 	.word	0x20004b88
 8007f44:	20004b90 	.word	0x20004b90

08007f48 <__NVIC_SetPriority>:
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	db0a      	blt.n	8007f72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	490c      	ldr	r1, [pc, #48]	@ (8007f94 <__NVIC_SetPriority+0x4c>)
 8007f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f66:	0112      	lsls	r2, r2, #4
 8007f68:	b2d2      	uxtb	r2, r2
 8007f6a:	440b      	add	r3, r1
 8007f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007f70:	e00a      	b.n	8007f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	4908      	ldr	r1, [pc, #32]	@ (8007f98 <__NVIC_SetPriority+0x50>)
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	3b04      	subs	r3, #4
 8007f80:	0112      	lsls	r2, r2, #4
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	440b      	add	r3, r1
 8007f86:	761a      	strb	r2, [r3, #24]
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	e000e100 	.word	0xe000e100
 8007f98:	e000ed00 	.word	0xe000ed00

08007f9c <Timer_Init>:


//使用TIM12當作中斷來源
//中斷頻率5ms
void Timer_Init(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= 1 << 6;  //設定TIM12外設時鐘
 8007fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800800c <Timer_Init+0x70>)
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa4:	4a19      	ldr	r2, [pc, #100]	@ (800800c <Timer_Init+0x70>)
 8007fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007faa:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM12->SMCR   |= 000 << 0;//設定為內部時鐘
 8007fac:	4b18      	ldr	r3, [pc, #96]	@ (8008010 <Timer_Init+0x74>)
 8007fae:	4a18      	ldr	r2, [pc, #96]	@ (8008010 <Timer_Init+0x74>)
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	6093      	str	r3, [r2, #8]

	TIM12->ARR     = 450-1; //設定產生中斷目標值
 8007fb4:	4b16      	ldr	r3, [pc, #88]	@ (8008010 <Timer_Init+0x74>)
 8007fb6:	f240 12c1 	movw	r2, #449	@ 0x1c1
 8007fba:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM12->PSC     = 1000-1;  //設定預分頻器
 8007fbc:	4b14      	ldr	r3, [pc, #80]	@ (8008010 <Timer_Init+0x74>)
 8007fbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007fc2:	629a      	str	r2, [r3, #40]	@ 0x28
	
	TIM12->CR1     = 1 << 7;  //設定ARPE，允許自動裝載
 8007fc4:	4b12      	ldr	r3, [pc, #72]	@ (8008010 <Timer_Init+0x74>)
 8007fc6:	2280      	movs	r2, #128	@ 0x80
 8007fc8:	601a      	str	r2, [r3, #0]
	TIM12->CR1    |= 0 << 4;  //設定DIR，上數模式
 8007fca:	4b11      	ldr	r3, [pc, #68]	@ (8008010 <Timer_Init+0x74>)
 8007fcc:	4a10      	ldr	r2, [pc, #64]	@ (8008010 <Timer_Init+0x74>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6013      	str	r3, [r2, #0]
	TIM12->CR1    |= 1 << 0;  //設定CEN，始能計數器
 8007fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8008010 <Timer_Init+0x74>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8008010 <Timer_Init+0x74>)
 8007fd8:	f043 0301 	orr.w	r3, r3, #1
 8007fdc:	6013      	str	r3, [r2, #0]
	TIM12->EGR     = 1 << 0;  //設定UG，初始化計數器，並立刻產生中斷
 8007fde:	4b0c      	ldr	r3, [pc, #48]	@ (8008010 <Timer_Init+0x74>)
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	615a      	str	r2, [r3, #20]
	TIM12->SR      = 0 << 0;  //設定UIF，清除中斷
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8008010 <Timer_Init+0x74>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	611a      	str	r2, [r3, #16]
	
	TIM12->DIER   |= 1 << 0 ; //設定UIE，允許更新中斷
 8007fea:	4b09      	ldr	r3, [pc, #36]	@ (8008010 <Timer_Init+0x74>)
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	4a08      	ldr	r2, [pc, #32]	@ (8008010 <Timer_Init+0x74>)
 8007ff0:	f043 0301 	orr.w	r3, r3, #1
 8007ff4:	60d3      	str	r3, [r2, #12]
	
	NVIC->ISER[1] = 1 << 11; //TIM12的中斷位置在43
 8007ff6:	4b07      	ldr	r3, [pc, #28]	@ (8008014 <Timer_Init+0x78>)
 8007ff8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ffc:	605a      	str	r2, [r3, #4]

	NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 6); // OK
 8007ffe:	2106      	movs	r1, #6
 8008000:	202b      	movs	r0, #43	@ 0x2b
 8008002:	f7ff ffa1 	bl	8007f48 <__NVIC_SetPriority>

}
 8008006:	bf00      	nop
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	40023800 	.word	0x40023800
 8008010:	40001800 	.word	0x40001800
 8008014:	e000e100 	.word	0xe000e100

08008018 <PID_Update>:



// PID 宏（改寫成浮點數邏輯）
float PID_Update(PIDController *v)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
    v->data.up = v->param.Kr * (v->term.Ref - v->term.Fbk);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	edd3 6a08 	vldr	s13, [r3, #32]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008032:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	edc3 7a00 	vstr	s15, [r3]
                                                                                      
    v->data.ui = v->param.Ki * (v->data.w1 * v->data.up) + v->data.i1;                    
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	edd3 6a07 	vldr	s13, [r3, #28]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	edd3 7a00 	vldr	s15, [r3]
 8008052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	edc3 7a01 	vstr	s15, [r3, #4]
    v->data.i1 = v->data.ui;                                                            
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	619a      	str	r2, [r3, #24]
                                                                                      
    v->data.d2 = v->param.Kd * (v->data.up - v->data.d1);                                
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	edd3 6a00 	vldr	s13, [r3]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	edd3 7a04 	vldr	s15, [r3, #16]
 8008084:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	edc3 7a05 	vstr	s15, [r3, #20]
    v->data.ud = v->term.c2 * v->data.ud + v->term.c1 * v->data.d2;                        
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	edd3 7a02 	vldr	s15, [r3, #8]
 800809e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80080ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80080b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	edc3 7a02 	vstr	s15, [r3, #8]
    v->data.d1 = v->data.up;                                                            
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	611a      	str	r2, [r3, #16]
                                                                                      
    v->data.v1 = v->param.Kp * (v->data.up + v->data.ui + v->data.ud);                     
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	edd3 6a00 	vldr	s13, [r3]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80080d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80080e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	edc3 7a03 	vstr	s15, [r3, #12]
    v->term.Out = fminf(fmaxf(v->data.v1, v->param.Umin), v->param.Umax);                 
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80080fa:	eef0 0a47 	vmov.f32	s1, s14
 80080fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008102:	f000 f865 	bl	80081d0 <fmaxf>
 8008106:	eeb0 7a40 	vmov.f32	s14, s0
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008110:	eef0 0a67 	vmov.f32	s1, s15
 8008114:	eeb0 0a47 	vmov.f32	s0, s14
 8008118:	f000 f877 	bl	800820a <fminf>
 800811c:	eef0 7a40 	vmov.f32	s15, s0
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    v->data.w1 = (v->term.Out == v->data.v1) ? 1 : 0;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008132:	eeb4 7a67 	vcmp.f32	s14, s15
 8008136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800813a:	d102      	bne.n	8008142 <PID_Update+0x12a>
 800813c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008140:	e001      	b.n	8008146 <PID_Update+0x12e>
 8008142:	f04f 0200 	mov.w	r2, #0
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	61da      	str	r2, [r3, #28]
	
	return v->term.Out;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814e:	ee07 3a90 	vmov	s15, r3
}
 8008152:	eeb0 0a67 	vmov.f32	s0, s15
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <memset>:
 800815c:	4402      	add	r2, r0
 800815e:	4603      	mov	r3, r0
 8008160:	4293      	cmp	r3, r2
 8008162:	d100      	bne.n	8008166 <memset+0xa>
 8008164:	4770      	bx	lr
 8008166:	f803 1b01 	strb.w	r1, [r3], #1
 800816a:	e7f9      	b.n	8008160 <memset+0x4>

0800816c <__libc_init_array>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4d0d      	ldr	r5, [pc, #52]	@ (80081a4 <__libc_init_array+0x38>)
 8008170:	4c0d      	ldr	r4, [pc, #52]	@ (80081a8 <__libc_init_array+0x3c>)
 8008172:	1b64      	subs	r4, r4, r5
 8008174:	10a4      	asrs	r4, r4, #2
 8008176:	2600      	movs	r6, #0
 8008178:	42a6      	cmp	r6, r4
 800817a:	d109      	bne.n	8008190 <__libc_init_array+0x24>
 800817c:	4d0b      	ldr	r5, [pc, #44]	@ (80081ac <__libc_init_array+0x40>)
 800817e:	4c0c      	ldr	r4, [pc, #48]	@ (80081b0 <__libc_init_array+0x44>)
 8008180:	f000 f87c 	bl	800827c <_init>
 8008184:	1b64      	subs	r4, r4, r5
 8008186:	10a4      	asrs	r4, r4, #2
 8008188:	2600      	movs	r6, #0
 800818a:	42a6      	cmp	r6, r4
 800818c:	d105      	bne.n	800819a <__libc_init_array+0x2e>
 800818e:	bd70      	pop	{r4, r5, r6, pc}
 8008190:	f855 3b04 	ldr.w	r3, [r5], #4
 8008194:	4798      	blx	r3
 8008196:	3601      	adds	r6, #1
 8008198:	e7ee      	b.n	8008178 <__libc_init_array+0xc>
 800819a:	f855 3b04 	ldr.w	r3, [r5], #4
 800819e:	4798      	blx	r3
 80081a0:	3601      	adds	r6, #1
 80081a2:	e7f2      	b.n	800818a <__libc_init_array+0x1e>
 80081a4:	08008a18 	.word	0x08008a18
 80081a8:	08008a18 	.word	0x08008a18
 80081ac:	08008a18 	.word	0x08008a18
 80081b0:	08008a1c 	.word	0x08008a1c

080081b4 <memcpy>:
 80081b4:	440a      	add	r2, r1
 80081b6:	4291      	cmp	r1, r2
 80081b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081bc:	d100      	bne.n	80081c0 <memcpy+0xc>
 80081be:	4770      	bx	lr
 80081c0:	b510      	push	{r4, lr}
 80081c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ca:	4291      	cmp	r1, r2
 80081cc:	d1f9      	bne.n	80081c2 <memcpy+0xe>
 80081ce:	bd10      	pop	{r4, pc}

080081d0 <fmaxf>:
 80081d0:	b508      	push	{r3, lr}
 80081d2:	ed2d 8b02 	vpush	{d8}
 80081d6:	eeb0 8a40 	vmov.f32	s16, s0
 80081da:	eef0 8a60 	vmov.f32	s17, s1
 80081de:	f000 f831 	bl	8008244 <__fpclassifyf>
 80081e2:	b930      	cbnz	r0, 80081f2 <fmaxf+0x22>
 80081e4:	eeb0 8a68 	vmov.f32	s16, s17
 80081e8:	eeb0 0a48 	vmov.f32	s0, s16
 80081ec:	ecbd 8b02 	vpop	{d8}
 80081f0:	bd08      	pop	{r3, pc}
 80081f2:	eeb0 0a68 	vmov.f32	s0, s17
 80081f6:	f000 f825 	bl	8008244 <__fpclassifyf>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d0f4      	beq.n	80081e8 <fmaxf+0x18>
 80081fe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008206:	dded      	ble.n	80081e4 <fmaxf+0x14>
 8008208:	e7ee      	b.n	80081e8 <fmaxf+0x18>

0800820a <fminf>:
 800820a:	b508      	push	{r3, lr}
 800820c:	ed2d 8b02 	vpush	{d8}
 8008210:	eeb0 8a40 	vmov.f32	s16, s0
 8008214:	eef0 8a60 	vmov.f32	s17, s1
 8008218:	f000 f814 	bl	8008244 <__fpclassifyf>
 800821c:	b930      	cbnz	r0, 800822c <fminf+0x22>
 800821e:	eeb0 8a68 	vmov.f32	s16, s17
 8008222:	eeb0 0a48 	vmov.f32	s0, s16
 8008226:	ecbd 8b02 	vpop	{d8}
 800822a:	bd08      	pop	{r3, pc}
 800822c:	eeb0 0a68 	vmov.f32	s0, s17
 8008230:	f000 f808 	bl	8008244 <__fpclassifyf>
 8008234:	2800      	cmp	r0, #0
 8008236:	d0f4      	beq.n	8008222 <fminf+0x18>
 8008238:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800823c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008240:	d5ed      	bpl.n	800821e <fminf+0x14>
 8008242:	e7ee      	b.n	8008222 <fminf+0x18>

08008244 <__fpclassifyf>:
 8008244:	ee10 3a10 	vmov	r3, s0
 8008248:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800824c:	d00d      	beq.n	800826a <__fpclassifyf+0x26>
 800824e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8008252:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8008256:	d30a      	bcc.n	800826e <__fpclassifyf+0x2a>
 8008258:	4b07      	ldr	r3, [pc, #28]	@ (8008278 <__fpclassifyf+0x34>)
 800825a:	1e42      	subs	r2, r0, #1
 800825c:	429a      	cmp	r2, r3
 800825e:	d908      	bls.n	8008272 <__fpclassifyf+0x2e>
 8008260:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8008264:	4258      	negs	r0, r3
 8008266:	4158      	adcs	r0, r3
 8008268:	4770      	bx	lr
 800826a:	2002      	movs	r0, #2
 800826c:	4770      	bx	lr
 800826e:	2004      	movs	r0, #4
 8008270:	4770      	bx	lr
 8008272:	2003      	movs	r0, #3
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	007ffffe 	.word	0x007ffffe

0800827c <_init>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	bf00      	nop
 8008280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008282:	bc08      	pop	{r3}
 8008284:	469e      	mov	lr, r3
 8008286:	4770      	bx	lr

08008288 <_fini>:
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828a:	bf00      	nop
 800828c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828e:	bc08      	pop	{r3}
 8008290:	469e      	mov	lr, r3
 8008292:	4770      	bx	lr
