
car_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  08007fc4  08007fc4  00008fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087b8  080087b8  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  080087b8  080087b8  000097b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087c0  080087c0  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087c0  080087c0  000097c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087c4  080087c4  000097c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080087c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b78  20000070  08008838  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004be8  08008838  0000abe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013941  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ee  00000000  00000000  0001d9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00020ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6f  00000000  00000000  00021e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004280  00000000  00000000  0002298f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013949  00000000  00000000  00026c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3a0d  00000000  00000000  0003a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010df65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d88  00000000  00000000  0010dfa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00111d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fac 	.word	0x08007fac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007fac 	.word	0x08007fac

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2iz>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009b4:	d215      	bcs.n	80009e2 <__aeabi_d2iz+0x36>
 80009b6:	d511      	bpl.n	80009dc <__aeabi_d2iz+0x30>
 80009b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d912      	bls.n	80009e8 <__aeabi_d2iz+0x3c>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009d2:	fa23 f002 	lsr.w	r0, r3, r2
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d105      	bne.n	80009f4 <__aeabi_d2iz+0x48>
 80009e8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009ec:	bf08      	it	eq
 80009ee:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b96a 	b.w	8000d88 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	460c      	mov	r4, r1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d14e      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ad8:	4694      	mov	ip, r2
 8000ada:	458c      	cmp	ip, r1
 8000adc:	4686      	mov	lr, r0
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	d962      	bls.n	8000baa <__udivmoddi4+0xde>
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	4091      	lsls	r1, r2
 8000aec:	fa20 f303 	lsr.w	r3, r0, r3
 8000af0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af4:	4319      	orrs	r1, r3
 8000af6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afe:	fa1f f68c 	uxth.w	r6, ip
 8000b02:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb04 f106 	mul.w	r1, r4, r6
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b22:	f080 8112 	bcs.w	8000d4a <__udivmoddi4+0x27e>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 810f 	bls.w	8000d4a <__udivmoddi4+0x27e>
 8000b2c:	3c02      	subs	r4, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	fa1f f38e 	uxth.w	r3, lr
 8000b36:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b3a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb00 f606 	mul.w	r6, r0, r6
 8000b46:	429e      	cmp	r6, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x94>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b52:	f080 80fc 	bcs.w	8000d4e <__udivmoddi4+0x282>
 8000b56:	429e      	cmp	r6, r3
 8000b58:	f240 80f9 	bls.w	8000d4e <__udivmoddi4+0x282>
 8000b5c:	4463      	add	r3, ip
 8000b5e:	3802      	subs	r0, #2
 8000b60:	1b9b      	subs	r3, r3, r6
 8000b62:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b66:	2100      	movs	r1, #0
 8000b68:	b11d      	cbz	r5, 8000b72 <__udivmoddi4+0xa6>
 8000b6a:	40d3      	lsrs	r3, r2
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d905      	bls.n	8000b86 <__udivmoddi4+0xba>
 8000b7a:	b10d      	cbz	r5, 8000b80 <__udivmoddi4+0xb4>
 8000b7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b80:	2100      	movs	r1, #0
 8000b82:	4608      	mov	r0, r1
 8000b84:	e7f5      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000b86:	fab3 f183 	clz	r1, r3
 8000b8a:	2900      	cmp	r1, #0
 8000b8c:	d146      	bne.n	8000c1c <__udivmoddi4+0x150>
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xcc>
 8000b92:	4290      	cmp	r0, r2
 8000b94:	f0c0 80f0 	bcc.w	8000d78 <__udivmoddi4+0x2ac>
 8000b98:	1a86      	subs	r6, r0, r2
 8000b9a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	d0e6      	beq.n	8000b72 <__udivmoddi4+0xa6>
 8000ba4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba8:	e7e3      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	f040 8090 	bne.w	8000cd0 <__udivmoddi4+0x204>
 8000bb0:	eba1 040c 	sub.w	r4, r1, ip
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	fa1f f78c 	uxth.w	r7, ip
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bce:	fb07 f006 	mul.w	r0, r7, r6
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x11c>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x11a>
 8000be0:	4298      	cmp	r0, r3
 8000be2:	f200 80cd 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000be6:	4626      	mov	r6, r4
 8000be8:	1a1c      	subs	r4, r3, r0
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bf2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfa:	fb00 f707 	mul.w	r7, r0, r7
 8000bfe:	429f      	cmp	r7, r3
 8000c00:	d908      	bls.n	8000c14 <__udivmoddi4+0x148>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0a:	d202      	bcs.n	8000c12 <__udivmoddi4+0x146>
 8000c0c:	429f      	cmp	r7, r3
 8000c0e:	f200 80b0 	bhi.w	8000d72 <__udivmoddi4+0x2a6>
 8000c12:	4620      	mov	r0, r4
 8000c14:	1bdb      	subs	r3, r3, r7
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	e7a5      	b.n	8000b68 <__udivmoddi4+0x9c>
 8000c1c:	f1c1 0620 	rsb	r6, r1, #32
 8000c20:	408b      	lsls	r3, r1
 8000c22:	fa22 f706 	lsr.w	r7, r2, r6
 8000c26:	431f      	orrs	r7, r3
 8000c28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c30:	ea43 030c 	orr.w	r3, r3, ip
 8000c34:	40f4      	lsrs	r4, r6
 8000c36:	fa00 f801 	lsl.w	r8, r0, r1
 8000c3a:	0c38      	lsrs	r0, r7, #16
 8000c3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c40:	fbb4 fef0 	udiv	lr, r4, r0
 8000c44:	fa1f fc87 	uxth.w	ip, r7
 8000c48:	fb00 441e 	mls	r4, r0, lr, r4
 8000c4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c50:	fb0e f90c 	mul.w	r9, lr, ip
 8000c54:	45a1      	cmp	r9, r4
 8000c56:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5a:	d90a      	bls.n	8000c72 <__udivmoddi4+0x1a6>
 8000c5c:	193c      	adds	r4, r7, r4
 8000c5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c62:	f080 8084 	bcs.w	8000d6e <__udivmoddi4+0x2a2>
 8000c66:	45a1      	cmp	r9, r4
 8000c68:	f240 8081 	bls.w	8000d6e <__udivmoddi4+0x2a2>
 8000c6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c70:	443c      	add	r4, r7
 8000c72:	eba4 0409 	sub.w	r4, r4, r9
 8000c76:	fa1f f983 	uxth.w	r9, r3
 8000c7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x1d2>
 8000c8e:	193c      	adds	r4, r7, r4
 8000c90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c94:	d267      	bcs.n	8000d66 <__udivmoddi4+0x29a>
 8000c96:	45a4      	cmp	ip, r4
 8000c98:	d965      	bls.n	8000d66 <__udivmoddi4+0x29a>
 8000c9a:	3b02      	subs	r3, #2
 8000c9c:	443c      	add	r4, r7
 8000c9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ca2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca6:	eba4 040c 	sub.w	r4, r4, ip
 8000caa:	429c      	cmp	r4, r3
 8000cac:	46ce      	mov	lr, r9
 8000cae:	469c      	mov	ip, r3
 8000cb0:	d351      	bcc.n	8000d56 <__udivmoddi4+0x28a>
 8000cb2:	d04e      	beq.n	8000d52 <__udivmoddi4+0x286>
 8000cb4:	b155      	cbz	r5, 8000ccc <__udivmoddi4+0x200>
 8000cb6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cba:	eb64 040c 	sbc.w	r4, r4, ip
 8000cbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000cc2:	40cb      	lsrs	r3, r1
 8000cc4:	431e      	orrs	r6, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e750      	b.n	8000b72 <__udivmoddi4+0xa6>
 8000cd0:	f1c2 0320 	rsb	r3, r2, #32
 8000cd4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cdc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce0:	4094      	lsls	r4, r2
 8000ce2:	430c      	orrs	r4, r1
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cec:	fa1f f78c 	uxth.w	r7, ip
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf8:	0c23      	lsrs	r3, r4, #16
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f107 	mul.w	r1, r0, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x24c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d0e:	d22c      	bcs.n	8000d6a <__udivmoddi4+0x29e>
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d92a      	bls.n	8000d6a <__udivmoddi4+0x29e>
 8000d14:	3802      	subs	r0, #2
 8000d16:	4463      	add	r3, ip
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d20:	fb08 3311 	mls	r3, r8, r1, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb01 f307 	mul.w	r3, r1, r7
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x276>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d38:	d213      	bcs.n	8000d62 <__udivmoddi4+0x296>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d911      	bls.n	8000d62 <__udivmoddi4+0x296>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	4464      	add	r4, ip
 8000d42:	1ae4      	subs	r4, r4, r3
 8000d44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d48:	e739      	b.n	8000bbe <__udivmoddi4+0xf2>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	e6f0      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e706      	b.n	8000b60 <__udivmoddi4+0x94>
 8000d52:	45c8      	cmp	r8, r9
 8000d54:	d2ae      	bcs.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5e:	3801      	subs	r0, #1
 8000d60:	e7a8      	b.n	8000cb4 <__udivmoddi4+0x1e8>
 8000d62:	4631      	mov	r1, r6
 8000d64:	e7ed      	b.n	8000d42 <__udivmoddi4+0x276>
 8000d66:	4603      	mov	r3, r0
 8000d68:	e799      	b.n	8000c9e <__udivmoddi4+0x1d2>
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	e7d4      	b.n	8000d18 <__udivmoddi4+0x24c>
 8000d6e:	46d6      	mov	lr, sl
 8000d70:	e77f      	b.n	8000c72 <__udivmoddi4+0x1a6>
 8000d72:	4463      	add	r3, ip
 8000d74:	3802      	subs	r0, #2
 8000d76:	e74d      	b.n	8000c14 <__udivmoddi4+0x148>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e70f      	b.n	8000ba0 <__udivmoddi4+0xd4>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	4463      	add	r3, ip
 8000d84:	e730      	b.n	8000be8 <__udivmoddi4+0x11c>
 8000d86:	bf00      	nop

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	0000      	movs	r0, r0
	...

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 ffc2 	bl	8001d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f9e0 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f000 fa4c 	bl	8001238 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();		//OLED初始化
 8000da0:	f002 fbf9 	bl	8003596 <OLED_Init>
//  	Timer_Init();
  Motor_Init();
 8000da4:	f002 f8c0 	bl	8002f28 <Motor_Init>

  Serial_Init();		//串口初始化
 8000da8:	f002 fef6 	bl	8003b98 <Serial_Init>
  JoinStick_Init();
 8000dac:	f003 f8b2 	bl	8003f14 <JoinStick_Init>
  	//	AD_Init();
  	//	Encoder_Init();


  OLED_ShowString(1, 1, "TIM1:");
 8000db0:	4aaf      	ldr	r2, [pc, #700]	@ (8001070 <main+0x2e0>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	2001      	movs	r0, #1
 8000db6:	f002 fbc9 	bl	800354c <OLED_ShowString>
  OLED_ShowString(2, 1, "TIM2:");
 8000dba:	4aae      	ldr	r2, [pc, #696]	@ (8001074 <main+0x2e4>)
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	2002      	movs	r0, #2
 8000dc0:	f002 fbc4 	bl	800354c <OLED_ShowString>
  OLED_ShowString(3, 1, "TIM3:");
 8000dc4:	4aac      	ldr	r2, [pc, #688]	@ (8001078 <main+0x2e8>)
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f002 fbbf 	bl	800354c <OLED_ShowString>
  OLED_ShowString(4, 1, "TIM4:");
 8000dce:	4aab      	ldr	r2, [pc, #684]	@ (800107c <main+0x2ec>)
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f002 fbba 	bl	800354c <OLED_ShowString>


  // 30RPM下 Kp = 2 Ki = 0.1 Kd = 0.02 good
  //wheel1
  wheel1.param.Kp = 1.5;
 8000dd8:	4ba9      	ldr	r3, [pc, #676]	@ (8001080 <main+0x2f0>)
 8000dda:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000dde:	635a      	str	r2, [r3, #52]	@ 0x34
  wheel1.param.Ki = 0.15 / wheel1.param.Kp  ;
 8000de0:	4ba7      	ldr	r3, [pc, #668]	@ (8001080 <main+0x2f0>)
 8000de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fb77 	bl	80004d8 <__aeabi_f2d>
 8000dea:	4602      	mov	r2, r0
 8000dec:	460b      	mov	r3, r1
 8000dee:	a19c      	add	r1, pc, #624	@ (adr r1, 8001060 <main+0x2d0>)
 8000df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000df4:	f7ff fcf2 	bl	80007dc <__aeabi_ddiv>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f7ff fdfc 	bl	80009fc <__aeabi_d2f>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4a9e      	ldr	r2, [pc, #632]	@ (8001080 <main+0x2f0>)
 8000e08:	6393      	str	r3, [r2, #56]	@ 0x38
  wheel1.param.Kd = 0.03 / wheel1.param.Kp ;
 8000e0a:	4b9d      	ldr	r3, [pc, #628]	@ (8001080 <main+0x2f0>)
 8000e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fb62 	bl	80004d8 <__aeabi_f2d>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	a193      	add	r1, pc, #588	@ (adr r1, 8001068 <main+0x2d8>)
 8000e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e1e:	f7ff fcdd 	bl	80007dc <__aeabi_ddiv>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f7ff fde7 	bl	80009fc <__aeabi_d2f>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a93      	ldr	r2, [pc, #588]	@ (8001080 <main+0x2f0>)
 8000e32:	63d3      	str	r3, [r2, #60]	@ 0x3c
  wheel1.param.Kr = 1.0f;
 8000e34:	4b92      	ldr	r3, [pc, #584]	@ (8001080 <main+0x2f0>)
 8000e36:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000e3a:	641a      	str	r2, [r3, #64]	@ 0x40
  wheel1.param.Umax = 200.0f;
 8000e3c:	4b90      	ldr	r3, [pc, #576]	@ (8001080 <main+0x2f0>)
 8000e3e:	4a91      	ldr	r2, [pc, #580]	@ (8001084 <main+0x2f4>)
 8000e40:	645a      	str	r2, [r3, #68]	@ 0x44
  wheel1.param.Umin = -200.0f;
 8000e42:	4b8f      	ldr	r3, [pc, #572]	@ (8001080 <main+0x2f0>)
 8000e44:	4a90      	ldr	r2, [pc, #576]	@ (8001088 <main+0x2f8>)
 8000e46:	649a      	str	r2, [r3, #72]	@ 0x48
  wheel1.term.c1 = 0.1f;  // D 濾波器
 8000e48:	4b8d      	ldr	r3, [pc, #564]	@ (8001080 <main+0x2f0>)
 8000e4a:	4a90      	ldr	r2, [pc, #576]	@ (800108c <main+0x2fc>)
 8000e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  wheel1.term.c2 = 0.9f;
 8000e4e:	4b8c      	ldr	r3, [pc, #560]	@ (8001080 <main+0x2f0>)
 8000e50:	4a8f      	ldr	r2, [pc, #572]	@ (8001090 <main+0x300>)
 8000e52:	631a      	str	r2, [r3, #48]	@ 0x30

  //wheel2
  wheel2.param.Kp = 1.5;
 8000e54:	4b8f      	ldr	r3, [pc, #572]	@ (8001094 <main+0x304>)
 8000e56:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000e5a:	635a      	str	r2, [r3, #52]	@ 0x34
  wheel2.param.Ki = 0.15 / wheel2.param.Kp  ;
 8000e5c:	4b8d      	ldr	r3, [pc, #564]	@ (8001094 <main+0x304>)
 8000e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fb39 	bl	80004d8 <__aeabi_f2d>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	a17d      	add	r1, pc, #500	@ (adr r1, 8001060 <main+0x2d0>)
 8000e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e70:	f7ff fcb4 	bl	80007dc <__aeabi_ddiv>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f7ff fdbe 	bl	80009fc <__aeabi_d2f>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a84      	ldr	r2, [pc, #528]	@ (8001094 <main+0x304>)
 8000e84:	6393      	str	r3, [r2, #56]	@ 0x38
  wheel2.param.Kd = 0.03 / wheel2.param.Kp ;
 8000e86:	4b83      	ldr	r3, [pc, #524]	@ (8001094 <main+0x304>)
 8000e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb24 	bl	80004d8 <__aeabi_f2d>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	a174      	add	r1, pc, #464	@ (adr r1, 8001068 <main+0x2d8>)
 8000e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e9a:	f7ff fc9f 	bl	80007dc <__aeabi_ddiv>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f7ff fda9 	bl	80009fc <__aeabi_d2f>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a79      	ldr	r2, [pc, #484]	@ (8001094 <main+0x304>)
 8000eae:	63d3      	str	r3, [r2, #60]	@ 0x3c
  wheel2.param.Kr = 1.0f;
 8000eb0:	4b78      	ldr	r3, [pc, #480]	@ (8001094 <main+0x304>)
 8000eb2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000eb6:	641a      	str	r2, [r3, #64]	@ 0x40
  wheel2.param.Umax = 200.0f;
 8000eb8:	4b76      	ldr	r3, [pc, #472]	@ (8001094 <main+0x304>)
 8000eba:	4a72      	ldr	r2, [pc, #456]	@ (8001084 <main+0x2f4>)
 8000ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  wheel2.param.Umin = -200.0f;
 8000ebe:	4b75      	ldr	r3, [pc, #468]	@ (8001094 <main+0x304>)
 8000ec0:	4a71      	ldr	r2, [pc, #452]	@ (8001088 <main+0x2f8>)
 8000ec2:	649a      	str	r2, [r3, #72]	@ 0x48
  wheel2.term.c1 = 0.1f;  // D 濾波器
 8000ec4:	4b73      	ldr	r3, [pc, #460]	@ (8001094 <main+0x304>)
 8000ec6:	4a71      	ldr	r2, [pc, #452]	@ (800108c <main+0x2fc>)
 8000ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
  wheel2.term.c2 = 0.9f;
 8000eca:	4b72      	ldr	r3, [pc, #456]	@ (8001094 <main+0x304>)
 8000ecc:	4a70      	ldr	r2, [pc, #448]	@ (8001090 <main+0x300>)
 8000ece:	631a      	str	r2, [r3, #48]	@ 0x30

  //wheel3
  wheel3.param.Kp = 1.5;
 8000ed0:	4b71      	ldr	r3, [pc, #452]	@ (8001098 <main+0x308>)
 8000ed2:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000ed6:	635a      	str	r2, [r3, #52]	@ 0x34
  wheel3.param.Ki = 0.15 / wheel3.param.Kp  ;
 8000ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8001098 <main+0x308>)
 8000eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fafb 	bl	80004d8 <__aeabi_f2d>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	a15e      	add	r1, pc, #376	@ (adr r1, 8001060 <main+0x2d0>)
 8000ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000eec:	f7ff fc76 	bl	80007dc <__aeabi_ddiv>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fd80 	bl	80009fc <__aeabi_d2f>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4a66      	ldr	r2, [pc, #408]	@ (8001098 <main+0x308>)
 8000f00:	6393      	str	r3, [r2, #56]	@ 0x38
  wheel3.param.Kd = 0.03 / wheel3.param.Kp ;
 8000f02:	4b65      	ldr	r3, [pc, #404]	@ (8001098 <main+0x308>)
 8000f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fae6 	bl	80004d8 <__aeabi_f2d>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	a155      	add	r1, pc, #340	@ (adr r1, 8001068 <main+0x2d8>)
 8000f12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f16:	f7ff fc61 	bl	80007dc <__aeabi_ddiv>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fd6b 	bl	80009fc <__aeabi_d2f>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a5b      	ldr	r2, [pc, #364]	@ (8001098 <main+0x308>)
 8000f2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  wheel3.param.Kr = 1.0f;
 8000f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001098 <main+0x308>)
 8000f2e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000f32:	641a      	str	r2, [r3, #64]	@ 0x40
  wheel3.param.Umax = 200.0f;
 8000f34:	4b58      	ldr	r3, [pc, #352]	@ (8001098 <main+0x308>)
 8000f36:	4a53      	ldr	r2, [pc, #332]	@ (8001084 <main+0x2f4>)
 8000f38:	645a      	str	r2, [r3, #68]	@ 0x44
  wheel3.param.Umin = -200.0f;
 8000f3a:	4b57      	ldr	r3, [pc, #348]	@ (8001098 <main+0x308>)
 8000f3c:	4a52      	ldr	r2, [pc, #328]	@ (8001088 <main+0x2f8>)
 8000f3e:	649a      	str	r2, [r3, #72]	@ 0x48
  wheel3.term.c1 = 0.1f;  // D 濾波器
 8000f40:	4b55      	ldr	r3, [pc, #340]	@ (8001098 <main+0x308>)
 8000f42:	4a52      	ldr	r2, [pc, #328]	@ (800108c <main+0x2fc>)
 8000f44:	62da      	str	r2, [r3, #44]	@ 0x2c
  wheel3.term.c2 = 0.9f;
 8000f46:	4b54      	ldr	r3, [pc, #336]	@ (8001098 <main+0x308>)
 8000f48:	4a51      	ldr	r2, [pc, #324]	@ (8001090 <main+0x300>)
 8000f4a:	631a      	str	r2, [r3, #48]	@ 0x30

  //wheel4
  wheel4.param.Kp = 1.5;
 8000f4c:	4b53      	ldr	r3, [pc, #332]	@ (800109c <main+0x30c>)
 8000f4e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000f52:	635a      	str	r2, [r3, #52]	@ 0x34
  wheel4.param.Ki = 0.15 / wheel4.param.Kp  ;
 8000f54:	4b51      	ldr	r3, [pc, #324]	@ (800109c <main+0x30c>)
 8000f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fabd 	bl	80004d8 <__aeabi_f2d>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	a13f      	add	r1, pc, #252	@ (adr r1, 8001060 <main+0x2d0>)
 8000f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f68:	f7ff fc38 	bl	80007dc <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fd42 	bl	80009fc <__aeabi_d2f>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a48      	ldr	r2, [pc, #288]	@ (800109c <main+0x30c>)
 8000f7c:	6393      	str	r3, [r2, #56]	@ 0x38
  wheel4.param.Kd = 0.03 / wheel4.param.Kp ;
 8000f7e:	4b47      	ldr	r3, [pc, #284]	@ (800109c <main+0x30c>)
 8000f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff faa8 	bl	80004d8 <__aeabi_f2d>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	a136      	add	r1, pc, #216	@ (adr r1, 8001068 <main+0x2d8>)
 8000f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f92:	f7ff fc23 	bl	80007dc <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fd2d 	bl	80009fc <__aeabi_d2f>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a3d      	ldr	r2, [pc, #244]	@ (800109c <main+0x30c>)
 8000fa6:	63d3      	str	r3, [r2, #60]	@ 0x3c
  wheel4.param.Kr = 1.0f;
 8000fa8:	4b3c      	ldr	r3, [pc, #240]	@ (800109c <main+0x30c>)
 8000faa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000fae:	641a      	str	r2, [r3, #64]	@ 0x40
  wheel4.param.Umax = 200.0f;
 8000fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800109c <main+0x30c>)
 8000fb2:	4a34      	ldr	r2, [pc, #208]	@ (8001084 <main+0x2f4>)
 8000fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  wheel4.param.Umin = -200.0f;
 8000fb6:	4b39      	ldr	r3, [pc, #228]	@ (800109c <main+0x30c>)
 8000fb8:	4a33      	ldr	r2, [pc, #204]	@ (8001088 <main+0x2f8>)
 8000fba:	649a      	str	r2, [r3, #72]	@ 0x48
  wheel4.term.c1 = 0.1f;  // D 濾波器
 8000fbc:	4b37      	ldr	r3, [pc, #220]	@ (800109c <main+0x30c>)
 8000fbe:	4a33      	ldr	r2, [pc, #204]	@ (800108c <main+0x2fc>)
 8000fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  wheel4.term.c2 = 0.9f;
 8000fc2:	4b36      	ldr	r3, [pc, #216]	@ (800109c <main+0x30c>)
 8000fc4:	4a32      	ldr	r2, [pc, #200]	@ (8001090 <main+0x300>)
 8000fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fc8:	f003 f944 	bl	8004254 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  EncoderMutex1 = osMutexNew(&EncoderMutex1_attr);                   // 初始化 Mutex
 8000fcc:	4834      	ldr	r0, [pc, #208]	@ (80010a0 <main+0x310>)
 8000fce:	f003 fa7a 	bl	80044c6 <osMutexNew>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a33      	ldr	r2, [pc, #204]	@ (80010a4 <main+0x314>)
 8000fd6:	6013      	str	r3, [r2, #0]
  EncoderMutex2 = osMutexNew(&EncoderMutex2_attr);                   // 初始化 Mutex
 8000fd8:	4833      	ldr	r0, [pc, #204]	@ (80010a8 <main+0x318>)
 8000fda:	f003 fa74 	bl	80044c6 <osMutexNew>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a32      	ldr	r2, [pc, #200]	@ (80010ac <main+0x31c>)
 8000fe2:	6013      	str	r3, [r2, #0]
  EncoderMutex3 = osMutexNew(&EncoderMutex3_attr);                   // 初始化 Mutex
 8000fe4:	4832      	ldr	r0, [pc, #200]	@ (80010b0 <main+0x320>)
 8000fe6:	f003 fa6e 	bl	80044c6 <osMutexNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a31      	ldr	r2, [pc, #196]	@ (80010b4 <main+0x324>)
 8000fee:	6013      	str	r3, [r2, #0]
  EncoderMutex4 = osMutexNew(&EncoderMutex4_attr);                   // 初始化 Mutex
 8000ff0:	4831      	ldr	r0, [pc, #196]	@ (80010b8 <main+0x328>)
 8000ff2:	f003 fa68 	bl	80044c6 <osMutexNew>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a30      	ldr	r2, [pc, #192]	@ (80010bc <main+0x32c>)
 8000ffa:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  semWheelHandle = osSemaphoreNew(4, 0, &semWheel_attr);  	  // 初始值 0，等待同步
 8000ffc:	4a30      	ldr	r2, [pc, #192]	@ (80010c0 <main+0x330>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	2004      	movs	r0, #4
 8001002:	f003 fb6e 	bl	80046e2 <osSemaphoreNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a2e      	ldr	r2, [pc, #184]	@ (80010c4 <main+0x334>)
 800100a:	6013      	str	r3, [r2, #0]

  EncoderIRQHandle = osSemaphoreNew(1, 0, &EncoderIRQ_attr);  // binary semaphore，初始值 0
 800100c:	4a2e      	ldr	r2, [pc, #184]	@ (80010c8 <main+0x338>)
 800100e:	2100      	movs	r1, #0
 8001010:	2001      	movs	r0, #1
 8001012:	f003 fb66 	bl	80046e2 <osSemaphoreNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a2c      	ldr	r2, [pc, #176]	@ (80010cc <main+0x33c>)
 800101a:	6013      	str	r3, [r2, #0]
  HC05IRQHandle    = osSemaphoreNew(1, 0, &HC05_attr);
 800101c:	4a2c      	ldr	r2, [pc, #176]	@ (80010d0 <main+0x340>)
 800101e:	2100      	movs	r1, #0
 8001020:	2001      	movs	r0, #1
 8001022:	f003 fb5e 	bl	80046e2 <osSemaphoreNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a2a      	ldr	r2, [pc, #168]	@ (80010d4 <main+0x344>)
 800102a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskWheel1 */
  TaskWheel1Handle  = osThreadNew(TaskWheel1, NULL, &TaskWheel1_attributes);
 800102c:	4a2a      	ldr	r2, [pc, #168]	@ (80010d8 <main+0x348>)
 800102e:	2100      	movs	r1, #0
 8001030:	482a      	ldr	r0, [pc, #168]	@ (80010dc <main+0x34c>)
 8001032:	f003 f96e 	bl	8004312 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a29      	ldr	r2, [pc, #164]	@ (80010e0 <main+0x350>)
 800103a:	6013      	str	r3, [r2, #0]
  TaskWheel2Handle  = osThreadNew(TaskWheel2, NULL, &TaskWheel2_attributes);
 800103c:	4a29      	ldr	r2, [pc, #164]	@ (80010e4 <main+0x354>)
 800103e:	2100      	movs	r1, #0
 8001040:	4829      	ldr	r0, [pc, #164]	@ (80010e8 <main+0x358>)
 8001042:	f003 f966 	bl	8004312 <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a28      	ldr	r2, [pc, #160]	@ (80010ec <main+0x35c>)
 800104a:	6013      	str	r3, [r2, #0]
  TaskWheel3Handle  = osThreadNew(TaskWheel3, NULL, &TaskWheel3_attributes);
 800104c:	4a28      	ldr	r2, [pc, #160]	@ (80010f0 <main+0x360>)
 800104e:	2100      	movs	r1, #0
 8001050:	4828      	ldr	r0, [pc, #160]	@ (80010f4 <main+0x364>)
 8001052:	f003 f95e 	bl	8004312 <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	e04e      	b.n	80010f8 <main+0x368>
 800105a:	bf00      	nop
 800105c:	f3af 8000 	nop.w
 8001060:	33333333 	.word	0x33333333
 8001064:	3fc33333 	.word	0x3fc33333
 8001068:	eb851eb8 	.word	0xeb851eb8
 800106c:	3f9eb851 	.word	0x3f9eb851
 8001070:	08008078 	.word	0x08008078
 8001074:	08008080 	.word	0x08008080
 8001078:	08008088 	.word	0x08008088
 800107c:	08008090 	.word	0x08008090
 8001080:	200000c0 	.word	0x200000c0
 8001084:	43480000 	.word	0x43480000
 8001088:	c3480000 	.word	0xc3480000
 800108c:	3dcccccd 	.word	0x3dcccccd
 8001090:	3f666666 	.word	0x3f666666
 8001094:	2000010c 	.word	0x2000010c
 8001098:	20000158 	.word	0x20000158
 800109c:	200001a4 	.word	0x200001a4
 80010a0:	20000000 	.word	0x20000000
 80010a4:	200000b0 	.word	0x200000b0
 80010a8:	20000010 	.word	0x20000010
 80010ac:	200000b4 	.word	0x200000b4
 80010b0:	20000020 	.word	0x20000020
 80010b4:	200000b8 	.word	0x200000b8
 80010b8:	20000030 	.word	0x20000030
 80010bc:	200000bc 	.word	0x200000bc
 80010c0:	08008188 	.word	0x08008188
 80010c4:	200000a4 	.word	0x200000a4
 80010c8:	08008198 	.word	0x08008198
 80010cc:	200000a8 	.word	0x200000a8
 80010d0:	080081a8 	.word	0x080081a8
 80010d4:	200000ac 	.word	0x200000ac
 80010d8:	080080b0 	.word	0x080080b0
 80010dc:	08001315 	.word	0x08001315
 80010e0:	2000008c 	.word	0x2000008c
 80010e4:	080080d4 	.word	0x080080d4
 80010e8:	080013f5 	.word	0x080013f5
 80010ec:	20000090 	.word	0x20000090
 80010f0:	080080f8 	.word	0x080080f8
 80010f4:	080014d5 	.word	0x080014d5
 80010f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001134 <main+0x3a4>)
 80010fa:	6013      	str	r3, [r2, #0]
  TaskWheel4Handle  = osThreadNew(TaskWheel4, NULL, &TaskWheel4_attributes);
 80010fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001138 <main+0x3a8>)
 80010fe:	2100      	movs	r1, #0
 8001100:	480e      	ldr	r0, [pc, #56]	@ (800113c <main+0x3ac>)
 8001102:	f003 f906 	bl	8004312 <osThreadNew>
 8001106:	4603      	mov	r3, r0
 8001108:	4a0d      	ldr	r2, [pc, #52]	@ (8001140 <main+0x3b0>)
 800110a:	6013      	str	r3, [r2, #0]
  DataAcquireHandle = osThreadNew(DataAcquire, NULL, &DataAcquire_attributes);
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <main+0x3b4>)
 800110e:	2100      	movs	r1, #0
 8001110:	480d      	ldr	r0, [pc, #52]	@ (8001148 <main+0x3b8>)
 8001112:	f003 f8fe 	bl	8004312 <osThreadNew>
 8001116:	4603      	mov	r3, r0
 8001118:	4a0c      	ldr	r2, [pc, #48]	@ (800114c <main+0x3bc>)
 800111a:	6013      	str	r3, [r2, #0]

  AcquireEncoderHandle = osThreadNew(AcquireEncoder, NULL, &AcquireEncoder_attributes);
 800111c:	4a0c      	ldr	r2, [pc, #48]	@ (8001150 <main+0x3c0>)
 800111e:	2100      	movs	r1, #0
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <main+0x3c4>)
 8001122:	f003 f8f6 	bl	8004312 <osThreadNew>
 8001126:	4603      	mov	r3, r0
 8001128:	4a0b      	ldr	r2, [pc, #44]	@ (8001158 <main+0x3c8>)
 800112a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800112c:	f003 f8b6 	bl	800429c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <main+0x3a0>
 8001134:	20000094 	.word	0x20000094
 8001138:	0800811c 	.word	0x0800811c
 800113c:	080015b5 	.word	0x080015b5
 8001140:	20000098 	.word	0x20000098
 8001144:	08008140 	.word	0x08008140
 8001148:	08001695 	.word	0x08001695
 800114c:	2000009c 	.word	0x2000009c
 8001150:	08008164 	.word	0x08008164
 8001154:	08001915 	.word	0x08001915
 8001158:	200000a0 	.word	0x200000a0

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b094      	sub	sp, #80	@ 0x50
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2234      	movs	r2, #52	@ 0x34
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f006 fe8e 	bl	8007e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b2a      	ldr	r3, [pc, #168]	@ (8001230 <SystemClock_Config+0xd4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	4a29      	ldr	r2, [pc, #164]	@ (8001230 <SystemClock_Config+0xd4>)
 800118a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800118e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001190:	4b27      	ldr	r3, [pc, #156]	@ (8001230 <SystemClock_Config+0xd4>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	4b24      	ldr	r3, [pc, #144]	@ (8001234 <SystemClock_Config+0xd8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011a8:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <SystemClock_Config+0xd8>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <SystemClock_Config+0xd8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011bc:	2302      	movs	r3, #2
 80011be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2310      	movs	r3, #16
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011d0:	2310      	movs	r3, #16
 80011d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011da:	2304      	movs	r3, #4
 80011dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011de:	2302      	movs	r3, #2
 80011e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fbb2 	bl	8002954 <HAL_RCC_OscConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011f6:	f000 fcfb 	bl	8001bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fa:	230f      	movs	r3, #15
 80011fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fe:	2302      	movs	r3, #2
 8001200:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2102      	movs	r1, #2
 8001216:	4618      	mov	r0, r3
 8001218:	f001 f886 	bl	8002328 <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001222:	f000 fce5 	bl	8001bf0 <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3750      	adds	r7, #80	@ 0x50
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a2c      	ldr	r2, [pc, #176]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b2a      	ldr	r3, [pc, #168]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a25      	ldr	r2, [pc, #148]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <MX_GPIO_Init+0xd0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_GPIO_Init+0xd0>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a1e      	ldr	r2, [pc, #120]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_GPIO_Init+0xd0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_GPIO_Init+0xd0>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <MX_GPIO_Init+0xd0>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_GPIO_Init+0xd0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2120      	movs	r1, #32
 80012c2:	4812      	ldr	r0, [pc, #72]	@ (800130c <MX_GPIO_Init+0xd4>)
 80012c4:	f001 f816 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	480c      	ldr	r0, [pc, #48]	@ (8001310 <MX_GPIO_Init+0xd8>)
 80012e0:	f000 fe74 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012e4:	2320      	movs	r3, #32
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_GPIO_Init+0xd4>)
 80012fc:	f000 fe66 	bl	8001fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020800 	.word	0x40020800

08001314 <TaskWheel1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void TaskWheel1(void *argument)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(semWheelHandle, osWaitForever);
 800131c:	4b2d      	ldr	r3, [pc, #180]	@ (80013d4 <TaskWheel1+0xc0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	4618      	mov	r0, r3
 8001326:	f003 fa65 	bl	80047f4 <osSemaphoreAcquire>

//	uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
	wheel1_speed = -wheel1_speed;
 800132a:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <TaskWheel1+0xc4>)
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	eef1 7a67 	vneg.f32	s15, s15
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <TaskWheel1+0xc4>)
 8001336:	edc3 7a00 	vstr	s15, [r3]
	wheel1.term.Ref = wheel1_speed;
 800133a:	4b27      	ldr	r3, [pc, #156]	@ (80013d8 <TaskWheel1+0xc4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a27      	ldr	r2, [pc, #156]	@ (80013dc <TaskWheel1+0xc8>)
 8001340:	6213      	str	r3, [r2, #32]

	osMutexAcquire(EncoderMutex1,osWaitForever);
 8001342:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <TaskWheel1+0xcc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f04f 31ff 	mov.w	r1, #4294967295
 800134a:	4618      	mov	r0, r3
 800134c:	f003 f941 	bl	80045d2 <osMutexAcquire>
	wheel1.term.Fbk = WheelSpeed.speed1;
 8001350:	4b24      	ldr	r3, [pc, #144]	@ (80013e4 <TaskWheel1+0xd0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a21      	ldr	r2, [pc, #132]	@ (80013dc <TaskWheel1+0xc8>)
 8001356:	6253      	str	r3, [r2, #36]	@ 0x24
	osMutexRelease(EncoderMutex1);
 8001358:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <TaskWheel1+0xcc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f003 f983 	bl	8004668 <osMutexRelease>

	float wheel1_output = PID_Update(&wheel1);
 8001362:	481e      	ldr	r0, [pc, #120]	@ (80013dc <TaskWheel1+0xc8>)
 8001364:	f006 fcf0 	bl	8007d48 <PID_Update>
 8001368:	ed87 0a02 	vstr	s0, [r7, #8]
	wheel1_out = wheel1_output;
 800136c:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <TaskWheel1+0xd4>)
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	6013      	str	r3, [r2, #0]
	int wheel1_pwm = (int)(fabs(wheel1_out) / 400.0f * PWM_MAX);
 8001372:	4b1d      	ldr	r3, [pc, #116]	@ (80013e8 <TaskWheel1+0xd4>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	eef0 7ae7 	vabs.f32	s15, s15
 800137c:	ee17 0a90 	vmov	r0, s15
 8001380:	f7ff f8aa 	bl	80004d8 <__aeabi_f2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <TaskWheel1+0xd8>)
 800138a:	f7ff fa27 	bl	80007dc <__aeabi_ddiv>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <TaskWheel1+0xdc>)
 800139c:	f7ff f8f4 	bl	8000588 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fb00 	bl	80009ac <__aeabi_d2iz>
 80013ac:	4603      	mov	r3, r0
 80013ae:	60fb      	str	r3, [r7, #12]
	if (wheel1_pwm > PWM_MAX) wheel1_pwm = PWM_MAX;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013b6:	dd02      	ble.n	80013be <TaskWheel1+0xaa>
 80013b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013bc:	60fb      	str	r3, [r7, #12]
	Motor_SetSpeed(1,wheel1_pwm,wheel1_output);  // 設定 PWM duty
 80013be:	ed97 0a02 	vldr	s0, [r7, #8]
 80013c2:	68f9      	ldr	r1, [r7, #12]
 80013c4:	2001      	movs	r0, #1
 80013c6:	f001 fe95 	bl	80030f4 <Motor_SetSpeed>

	osDelay(1);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f003 f833 	bl	8004436 <osDelay>
  {
 80013d0:	e7a4      	b.n	800131c <TaskWheel1+0x8>
 80013d2:	bf00      	nop
 80013d4:	200000a4 	.word	0x200000a4
 80013d8:	20000040 	.word	0x20000040
 80013dc:	200000c0 	.word	0x200000c0
 80013e0:	200000b0 	.word	0x200000b0
 80013e4:	200001f0 	.word	0x200001f0
 80013e8:	20000210 	.word	0x20000210
 80013ec:	40790000 	.word	0x40790000
 80013f0:	408f4000 	.word	0x408f4000

080013f4 <TaskWheel2>:
  }
  /* USER CODE END 5 */
}

void TaskWheel2(void *argument)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(semWheelHandle, osWaitForever);
 80013fc:	4b2d      	ldr	r3, [pc, #180]	@ (80014b4 <TaskWheel2+0xc0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	4618      	mov	r0, r3
 8001406:	f003 f9f5 	bl	80047f4 <osSemaphoreAcquire>

//    uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
	wheel2_speed = -wheel2_speed;
 800140a:	4b2b      	ldr	r3, [pc, #172]	@ (80014b8 <TaskWheel2+0xc4>)
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	eef1 7a67 	vneg.f32	s15, s15
 8001414:	4b28      	ldr	r3, [pc, #160]	@ (80014b8 <TaskWheel2+0xc4>)
 8001416:	edc3 7a00 	vstr	s15, [r3]
	wheel2.term.Ref = wheel2_speed;
 800141a:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <TaskWheel2+0xc4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a27      	ldr	r2, [pc, #156]	@ (80014bc <TaskWheel2+0xc8>)
 8001420:	6213      	str	r3, [r2, #32]


	osMutexAcquire(EncoderMutex2,osWaitForever);
 8001422:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <TaskWheel2+0xcc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f04f 31ff 	mov.w	r1, #4294967295
 800142a:	4618      	mov	r0, r3
 800142c:	f003 f8d1 	bl	80045d2 <osMutexAcquire>
	wheel2.term.Fbk = WheelSpeed.speed2;
 8001430:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <TaskWheel2+0xd0>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a21      	ldr	r2, [pc, #132]	@ (80014bc <TaskWheel2+0xc8>)
 8001436:	6253      	str	r3, [r2, #36]	@ 0x24
	osMutexRelease(EncoderMutex2);
 8001438:	4b21      	ldr	r3, [pc, #132]	@ (80014c0 <TaskWheel2+0xcc>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f003 f913 	bl	8004668 <osMutexRelease>

	float wheel2_output = PID_Update(&wheel2);
 8001442:	481e      	ldr	r0, [pc, #120]	@ (80014bc <TaskWheel2+0xc8>)
 8001444:	f006 fc80 	bl	8007d48 <PID_Update>
 8001448:	ed87 0a02 	vstr	s0, [r7, #8]
	wheel2_out = wheel2_output;
 800144c:	4a1e      	ldr	r2, [pc, #120]	@ (80014c8 <TaskWheel2+0xd4>)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	6013      	str	r3, [r2, #0]
	int wheel2_pwm = (int)(fabs(wheel2_out) / 400.0f * PWM_MAX);
 8001452:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <TaskWheel2+0xd4>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eef0 7ae7 	vabs.f32	s15, s15
 800145c:	ee17 0a90 	vmov	r0, s15
 8001460:	f7ff f83a 	bl	80004d8 <__aeabi_f2d>
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <TaskWheel2+0xd8>)
 800146a:	f7ff f9b7 	bl	80007dc <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <TaskWheel2+0xdc>)
 800147c:	f7ff f884 	bl	8000588 <__aeabi_dmul>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fa90 	bl	80009ac <__aeabi_d2iz>
 800148c:	4603      	mov	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]
	if (wheel2_pwm > PWM_MAX) wheel2_pwm = PWM_MAX;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001496:	dd02      	ble.n	800149e <TaskWheel2+0xaa>
 8001498:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800149c:	60fb      	str	r3, [r7, #12]
	Motor_SetSpeed(2,wheel2_pwm,wheel2_output);  // 設定 PWM duty
 800149e:	ed97 0a02 	vldr	s0, [r7, #8]
 80014a2:	68f9      	ldr	r1, [r7, #12]
 80014a4:	2002      	movs	r0, #2
 80014a6:	f001 fe25 	bl	80030f4 <Motor_SetSpeed>

	osDelay(1);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f002 ffc3 	bl	8004436 <osDelay>
  {
 80014b0:	e7a4      	b.n	80013fc <TaskWheel2+0x8>
 80014b2:	bf00      	nop
 80014b4:	200000a4 	.word	0x200000a4
 80014b8:	20000044 	.word	0x20000044
 80014bc:	2000010c 	.word	0x2000010c
 80014c0:	200000b4 	.word	0x200000b4
 80014c4:	200001f0 	.word	0x200001f0
 80014c8:	20000224 	.word	0x20000224
 80014cc:	40790000 	.word	0x40790000
 80014d0:	408f4000 	.word	0x408f4000

080014d4 <TaskWheel3>:
  }
  /* USER CODE END 5 */
}

void TaskWheel3(void *argument)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(semWheelHandle, osWaitForever);
 80014dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001594 <TaskWheel3+0xc0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 f985 	bl	80047f4 <osSemaphoreAcquire>
//	uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
	wheel3_speed = -wheel3_speed;
 80014ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <TaskWheel3+0xc4>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	eef1 7a67 	vneg.f32	s15, s15
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <TaskWheel3+0xc4>)
 80014f6:	edc3 7a00 	vstr	s15, [r3]
	wheel3.term.Ref = wheel3_speed;
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <TaskWheel3+0xc4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a27      	ldr	r2, [pc, #156]	@ (800159c <TaskWheel3+0xc8>)
 8001500:	6213      	str	r3, [r2, #32]


	osMutexAcquire(EncoderMutex3,osWaitForever);
 8001502:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <TaskWheel3+0xcc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f04f 31ff 	mov.w	r1, #4294967295
 800150a:	4618      	mov	r0, r3
 800150c:	f003 f861 	bl	80045d2 <osMutexAcquire>
	wheel3.term.Fbk = WheelSpeed.speed3;
 8001510:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <TaskWheel3+0xd0>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4a21      	ldr	r2, [pc, #132]	@ (800159c <TaskWheel3+0xc8>)
 8001516:	6253      	str	r3, [r2, #36]	@ 0x24
	osMutexRelease(EncoderMutex3);
 8001518:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <TaskWheel3+0xcc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f003 f8a3 	bl	8004668 <osMutexRelease>


	float wheel3_output = PID_Update(&wheel3);
 8001522:	481e      	ldr	r0, [pc, #120]	@ (800159c <TaskWheel3+0xc8>)
 8001524:	f006 fc10 	bl	8007d48 <PID_Update>
 8001528:	ed87 0a02 	vstr	s0, [r7, #8]
	wheel3_out = wheel3_output;
 800152c:	4a1e      	ldr	r2, [pc, #120]	@ (80015a8 <TaskWheel3+0xd4>)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	6013      	str	r3, [r2, #0]
	int wheel3_pwm = (int)(fabs(wheel3_out) / 400.0f * PWM_MAX);
 8001532:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <TaskWheel3+0xd4>)
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	eef0 7ae7 	vabs.f32	s15, s15
 800153c:	ee17 0a90 	vmov	r0, s15
 8001540:	f7fe ffca 	bl	80004d8 <__aeabi_f2d>
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b18      	ldr	r3, [pc, #96]	@ (80015ac <TaskWheel3+0xd8>)
 800154a:	f7ff f947 	bl	80007dc <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <TaskWheel3+0xdc>)
 800155c:	f7ff f814 	bl	8000588 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fa20 	bl	80009ac <__aeabi_d2iz>
 800156c:	4603      	mov	r3, r0
 800156e:	60fb      	str	r3, [r7, #12]
	if (wheel3_pwm > PWM_MAX) wheel3_pwm = PWM_MAX;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001576:	dd02      	ble.n	800157e <TaskWheel3+0xaa>
 8001578:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800157c:	60fb      	str	r3, [r7, #12]
	Motor_SetSpeed(3,wheel3_pwm,wheel3_output);  // 設定 PWM duty
 800157e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001582:	68f9      	ldr	r1, [r7, #12]
 8001584:	2003      	movs	r0, #3
 8001586:	f001 fdb5 	bl	80030f4 <Motor_SetSpeed>

	osDelay(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f002 ff53 	bl	8004436 <osDelay>
  {
 8001590:	e7a4      	b.n	80014dc <TaskWheel3+0x8>
 8001592:	bf00      	nop
 8001594:	200000a4 	.word	0x200000a4
 8001598:	20000048 	.word	0x20000048
 800159c:	20000158 	.word	0x20000158
 80015a0:	200000b8 	.word	0x200000b8
 80015a4:	200001f0 	.word	0x200001f0
 80015a8:	20000238 	.word	0x20000238
 80015ac:	40790000 	.word	0x40790000
 80015b0:	408f4000 	.word	0x408f4000

080015b4 <TaskWheel4>:
  }
  /* USER CODE END 5 */
}

void TaskWheel4(void *argument)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(semWheelHandle, osWaitForever);
 80015bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <TaskWheel4+0xc0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 f915 	bl	80047f4 <osSemaphoreAcquire>
//	uint8_t flag = osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
	wheel4_speed = -wheel4_speed;
 80015ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <TaskWheel4+0xc4>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	eef1 7a67 	vneg.f32	s15, s15
 80015d4:	4b28      	ldr	r3, [pc, #160]	@ (8001678 <TaskWheel4+0xc4>)
 80015d6:	edc3 7a00 	vstr	s15, [r3]
	wheel4.term.Ref = wheel4_speed;
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <TaskWheel4+0xc4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a27      	ldr	r2, [pc, #156]	@ (800167c <TaskWheel4+0xc8>)
 80015e0:	6213      	str	r3, [r2, #32]


	osMutexAcquire(EncoderMutex4,osWaitForever);
 80015e2:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <TaskWheel4+0xcc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 fff1 	bl	80045d2 <osMutexAcquire>
	wheel4.term.Fbk = WheelSpeed.speed4;
 80015f0:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <TaskWheel4+0xd0>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4a21      	ldr	r2, [pc, #132]	@ (800167c <TaskWheel4+0xc8>)
 80015f6:	6253      	str	r3, [r2, #36]	@ 0x24
	osMutexRelease(EncoderMutex4);
 80015f8:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <TaskWheel4+0xcc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f003 f833 	bl	8004668 <osMutexRelease>

	float wheel4_output = PID_Update(&wheel4);
 8001602:	481e      	ldr	r0, [pc, #120]	@ (800167c <TaskWheel4+0xc8>)
 8001604:	f006 fba0 	bl	8007d48 <PID_Update>
 8001608:	ed87 0a02 	vstr	s0, [r7, #8]
	wheel4_out = wheel4_output;
 800160c:	4a1e      	ldr	r2, [pc, #120]	@ (8001688 <TaskWheel4+0xd4>)
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	6013      	str	r3, [r2, #0]
	int wheel4_pwm = (int)(fabs(wheel4_out) / 400.0f * PWM_MAX);
 8001612:	4b1d      	ldr	r3, [pc, #116]	@ (8001688 <TaskWheel4+0xd4>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	eef0 7ae7 	vabs.f32	s15, s15
 800161c:	ee17 0a90 	vmov	r0, s15
 8001620:	f7fe ff5a 	bl	80004d8 <__aeabi_f2d>
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b18      	ldr	r3, [pc, #96]	@ (800168c <TaskWheel4+0xd8>)
 800162a:	f7ff f8d7 	bl	80007dc <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <TaskWheel4+0xdc>)
 800163c:	f7fe ffa4 	bl	8000588 <__aeabi_dmul>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff f9b0 	bl	80009ac <__aeabi_d2iz>
 800164c:	4603      	mov	r3, r0
 800164e:	60fb      	str	r3, [r7, #12]
	if (wheel4_pwm > PWM_MAX) wheel4_pwm = PWM_MAX;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001656:	dd02      	ble.n	800165e <TaskWheel4+0xaa>
 8001658:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800165c:	60fb      	str	r3, [r7, #12]
	Motor_SetSpeed(4,wheel4_pwm,wheel4_output);  // 設定 PWM duty
 800165e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001662:	68f9      	ldr	r1, [r7, #12]
 8001664:	2004      	movs	r0, #4
 8001666:	f001 fd45 	bl	80030f4 <Motor_SetSpeed>

	osDelay(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f002 fee3 	bl	8004436 <osDelay>
  {
 8001670:	e7a4      	b.n	80015bc <TaskWheel4+0x8>
 8001672:	bf00      	nop
 8001674:	200000a4 	.word	0x200000a4
 8001678:	2000004c 	.word	0x2000004c
 800167c:	200001a4 	.word	0x200001a4
 8001680:	200000bc 	.word	0x200000bc
 8001684:	200001f0 	.word	0x200001f0
 8001688:	2000024c 	.word	0x2000024c
 800168c:	40790000 	.word	0x40790000
 8001690:	408f4000 	.word	0x408f4000

08001694 <DataAcquire>:

  }
  /* USER CODE END 5 */
}
void DataAcquire(void *argument)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint32_t tick;

  tick = osKernelGetTickCount();        // retrieve the number of system ticks
 800169c:	f002 fe24 	bl	80042e8 <osKernelGetTickCount>
 80016a0:	60f8      	str	r0, [r7, #12]
  for(;;)
  {
	tick += 10U;                      // delay 1000 ticks periodically
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	330a      	adds	r3, #10
 80016a6:	60fb      	str	r3, [r7, #12]
	osDelayUntil(tick);
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f002 fedf 	bl	800446c <osDelayUntil>


	if(JoinStickFlag == 1 && FirstJoint == 1)
 80016ae:	4b85      	ldr	r3, [pc, #532]	@ (80018c4 <DataAcquire+0x230>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d11a      	bne.n	80016ec <DataAcquire+0x58>
 80016b6:	4b84      	ldr	r3, [pc, #528]	@ (80018c8 <DataAcquire+0x234>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d116      	bne.n	80016ec <DataAcquire+0x58>
	{

		osSemaphoreAcquire(HC05IRQHandle, osWaitForever);
 80016be:	4b83      	ldr	r3, [pc, #524]	@ (80018cc <DataAcquire+0x238>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f04f 31ff 	mov.w	r1, #4294967295
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 f894 	bl	80047f4 <osSemaphoreAcquire>

//		Vx_central = JoinStick[0];
//		Vy_central = JoinStick[1];
//		Wz_central = JoinStick[2];

		Vx_central = User_Buffer[0];
 80016cc:	4b80      	ldr	r3, [pc, #512]	@ (80018d0 <DataAcquire+0x23c>)
 80016ce:	881a      	ldrh	r2, [r3, #0]
 80016d0:	4b80      	ldr	r3, [pc, #512]	@ (80018d4 <DataAcquire+0x240>)
 80016d2:	801a      	strh	r2, [r3, #0]
		Vy_central = User_Buffer[1];
 80016d4:	4b7e      	ldr	r3, [pc, #504]	@ (80018d0 <DataAcquire+0x23c>)
 80016d6:	885a      	ldrh	r2, [r3, #2]
 80016d8:	4b7f      	ldr	r3, [pc, #508]	@ (80018d8 <DataAcquire+0x244>)
 80016da:	801a      	strh	r2, [r3, #0]
		Wz_central = User_Buffer[2];
 80016dc:	4b7c      	ldr	r3, [pc, #496]	@ (80018d0 <DataAcquire+0x23c>)
 80016de:	889a      	ldrh	r2, [r3, #4]
 80016e0:	4b7e      	ldr	r3, [pc, #504]	@ (80018dc <DataAcquire+0x248>)
 80016e2:	801a      	strh	r2, [r3, #0]


		FirstJoint = 0;
 80016e4:	4b78      	ldr	r3, [pc, #480]	@ (80018c8 <DataAcquire+0x234>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	e0e9      	b.n	80018c0 <DataAcquire+0x22c>

	}
	else if(FirstJoint == 0)
 80016ec:	4b76      	ldr	r3, [pc, #472]	@ (80018c8 <DataAcquire+0x234>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1d6      	bne.n	80016a2 <DataAcquire+0xe>
	{
		Serial_SendByte(0x01);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f002 faed 	bl	8003cd4 <Serial_SendByte>

		x ++;
 80016fa:	4b79      	ldr	r3, [pc, #484]	@ (80018e0 <DataAcquire+0x24c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a77      	ldr	r2, [pc, #476]	@ (80018e0 <DataAcquire+0x24c>)
 8001702:	6013      	str	r3, [r2, #0]

		osSemaphoreAcquire(HC05IRQHandle, osWaitForever);
 8001704:	4b71      	ldr	r3, [pc, #452]	@ (80018cc <DataAcquire+0x238>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	4618      	mov	r0, r3
 800170e:	f003 f871 	bl	80047f4 <osSemaphoreAcquire>

		Vx = -((float)(User_Buffer[0] - Vx_central) / (float)Vx_central) * max_Lspeed;
 8001712:	4b6f      	ldr	r3, [pc, #444]	@ (80018d0 <DataAcquire+0x23c>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	4b6e      	ldr	r3, [pc, #440]	@ (80018d4 <DataAcquire+0x240>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001726:	4b6b      	ldr	r3, [pc, #428]	@ (80018d4 <DataAcquire+0x240>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001736:	eeb1 7a67 	vneg.f32	s14, s15
 800173a:	4b6a      	ldr	r3, [pc, #424]	@ (80018e4 <DataAcquire+0x250>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001744:	4b68      	ldr	r3, [pc, #416]	@ (80018e8 <DataAcquire+0x254>)
 8001746:	edc3 7a00 	vstr	s15, [r3]
		Vy =  ((float)(User_Buffer[1] - Vy_central) / (float)Vy_central) * max_Lspeed;
 800174a:	4b61      	ldr	r3, [pc, #388]	@ (80018d0 <DataAcquire+0x23c>)
 800174c:	885b      	ldrh	r3, [r3, #2]
 800174e:	461a      	mov	r2, r3
 8001750:	4b61      	ldr	r3, [pc, #388]	@ (80018d8 <DataAcquire+0x244>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800175e:	4b5e      	ldr	r3, [pc, #376]	@ (80018d8 <DataAcquire+0x244>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800176e:	4b5d      	ldr	r3, [pc, #372]	@ (80018e4 <DataAcquire+0x250>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001778:	4b5c      	ldr	r3, [pc, #368]	@ (80018ec <DataAcquire+0x258>)
 800177a:	edc3 7a00 	vstr	s15, [r3]

		if( (JoinStick[2] - Wz_central) > -1000 && (JoinStick[2] - Wz_central) < 1000 )
 800177e:	4b5c      	ldr	r3, [pc, #368]	@ (80018f0 <DataAcquire+0x25c>)
 8001780:	889b      	ldrh	r3, [r3, #4]
 8001782:	461a      	mov	r2, r3
 8001784:	4b55      	ldr	r3, [pc, #340]	@ (80018dc <DataAcquire+0x248>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800178e:	dd0d      	ble.n	80017ac <DataAcquire+0x118>
 8001790:	4b57      	ldr	r3, [pc, #348]	@ (80018f0 <DataAcquire+0x25c>)
 8001792:	889b      	ldrh	r3, [r3, #4]
 8001794:	461a      	mov	r2, r3
 8001796:	4b51      	ldr	r3, [pc, #324]	@ (80018dc <DataAcquire+0x248>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017a0:	da04      	bge.n	80017ac <DataAcquire+0x118>
			Wz = 0;
 80017a2:	4b54      	ldr	r3, [pc, #336]	@ (80018f4 <DataAcquire+0x260>)
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e019      	b.n	80017e0 <DataAcquire+0x14c>
		else
			Wz =  ((float)(User_Buffer[2] - Wz_central) / (float)Wz_central) * max_Rspeed;
 80017ac:	4b48      	ldr	r3, [pc, #288]	@ (80018d0 <DataAcquire+0x23c>)
 80017ae:	889b      	ldrh	r3, [r3, #4]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b4a      	ldr	r3, [pc, #296]	@ (80018dc <DataAcquire+0x248>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017c0:	4b46      	ldr	r3, [pc, #280]	@ (80018dc <DataAcquire+0x248>)
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d0:	4b49      	ldr	r3, [pc, #292]	@ (80018f8 <DataAcquire+0x264>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017da:	4b46      	ldr	r3, [pc, #280]	@ (80018f4 <DataAcquire+0x260>)
 80017dc:	edc3 7a00 	vstr	s15, [r3]

		Wz = -Wz;
 80017e0:	4b44      	ldr	r3, [pc, #272]	@ (80018f4 <DataAcquire+0x260>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	eef1 7a67 	vneg.f32	s15, s15
 80017ea:	4b42      	ldr	r3, [pc, #264]	@ (80018f4 <DataAcquire+0x260>)
 80017ec:	edc3 7a00 	vstr	s15, [r3]

		wheel1_speed = Vx + Vy + alpha * Wz; //front right
 80017f0:	4b3d      	ldr	r3, [pc, #244]	@ (80018e8 <DataAcquire+0x254>)
 80017f2:	ed93 7a00 	vldr	s14, [r3]
 80017f6:	4b3d      	ldr	r3, [pc, #244]	@ (80018ec <DataAcquire+0x258>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001800:	4b3e      	ldr	r3, [pc, #248]	@ (80018fc <DataAcquire+0x268>)
 8001802:	edd3 6a00 	vldr	s13, [r3]
 8001806:	4b3b      	ldr	r3, [pc, #236]	@ (80018f4 <DataAcquire+0x260>)
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001814:	4b3a      	ldr	r3, [pc, #232]	@ (8001900 <DataAcquire+0x26c>)
 8001816:	edc3 7a00 	vstr	s15, [r3]
		wheel2_speed = Vx - Vy - alpha * Wz; //front left
 800181a:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <DataAcquire+0x254>)
 800181c:	ed93 7a00 	vldr	s14, [r3]
 8001820:	4b32      	ldr	r3, [pc, #200]	@ (80018ec <DataAcquire+0x258>)
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ee37 7a67 	vsub.f32	s14, s14, s15
 800182a:	4b34      	ldr	r3, [pc, #208]	@ (80018fc <DataAcquire+0x268>)
 800182c:	edd3 6a00 	vldr	s13, [r3]
 8001830:	4b30      	ldr	r3, [pc, #192]	@ (80018f4 <DataAcquire+0x260>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183e:	4b31      	ldr	r3, [pc, #196]	@ (8001904 <DataAcquire+0x270>)
 8001840:	edc3 7a00 	vstr	s15, [r3]
		wheel3_speed = Vx + Vy - alpha * Wz; //rear  left
 8001844:	4b28      	ldr	r3, [pc, #160]	@ (80018e8 <DataAcquire+0x254>)
 8001846:	ed93 7a00 	vldr	s14, [r3]
 800184a:	4b28      	ldr	r3, [pc, #160]	@ (80018ec <DataAcquire+0x258>)
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001854:	4b29      	ldr	r3, [pc, #164]	@ (80018fc <DataAcquire+0x268>)
 8001856:	edd3 6a00 	vldr	s13, [r3]
 800185a:	4b26      	ldr	r3, [pc, #152]	@ (80018f4 <DataAcquire+0x260>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001868:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <DataAcquire+0x274>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
		wheel4_speed = Vx - Vy + alpha * Wz; //rear  right
 800186e:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <DataAcquire+0x254>)
 8001870:	ed93 7a00 	vldr	s14, [r3]
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <DataAcquire+0x258>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800187e:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <DataAcquire+0x268>)
 8001880:	edd3 6a00 	vldr	s13, [r3]
 8001884:	4b1b      	ldr	r3, [pc, #108]	@ (80018f4 <DataAcquire+0x260>)
 8001886:	edd3 7a00 	vldr	s15, [r3]
 800188a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <DataAcquire+0x278>)
 8001894:	edc3 7a00 	vstr	s15, [r3]

		osSemaphoreRelease(semWheelHandle);
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <DataAcquire+0x27c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fffb 	bl	8004898 <osSemaphoreRelease>
		osSemaphoreRelease(semWheelHandle);
 80018a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <DataAcquire+0x27c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 fff6 	bl	8004898 <osSemaphoreRelease>
		osSemaphoreRelease(semWheelHandle);
 80018ac:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <DataAcquire+0x27c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 fff1 	bl	8004898 <osSemaphoreRelease>
		osSemaphoreRelease(semWheelHandle);
 80018b6:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <DataAcquire+0x27c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 ffec 	bl	8004898 <osSemaphoreRelease>
	tick += 10U;                      // delay 1000 ticks periodically
 80018c0:	e6ef      	b.n	80016a2 <DataAcquire+0xe>
 80018c2:	bf00      	nop
 80018c4:	2000028a 	.word	0x2000028a
 80018c8:	20000054 	.word	0x20000054
 80018cc:	200000ac 	.word	0x200000ac
 80018d0:	2000028c 	.word	0x2000028c
 80018d4:	20000260 	.word	0x20000260
 80018d8:	20000262 	.word	0x20000262
 80018dc:	20000264 	.word	0x20000264
 80018e0:	20000250 	.word	0x20000250
 80018e4:	20000058 	.word	0x20000058
 80018e8:	20000254 	.word	0x20000254
 80018ec:	20000258 	.word	0x20000258
 80018f0:	20000284 	.word	0x20000284
 80018f4:	2000025c 	.word	0x2000025c
 80018f8:	2000005c 	.word	0x2000005c
 80018fc:	20000050 	.word	0x20000050
 8001900:	20000040 	.word	0x20000040
 8001904:	20000044 	.word	0x20000044
 8001908:	20000048 	.word	0x20000048
 800190c:	2000004c 	.word	0x2000004c
 8001910:	200000a4 	.word	0x200000a4

08001914 <AcquireEncoder>:
  /* USER CODE END 5 */
}


void AcquireEncoder(void *argument)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osSemaphoreAcquire(EncoderIRQHandle, osWaitForever);
 800191c:	4b92      	ldr	r3, [pc, #584]	@ (8001b68 <AcquireEncoder+0x254>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	4618      	mov	r0, r3
 8001926:	f002 ff65 	bl	80047f4 <osSemaphoreAcquire>

		//wheel1
//		wheel1_count = Serial_RxPacket[0];
		wheel1_count = Encoder_Buffer[0];
 800192a:	4b90      	ldr	r3, [pc, #576]	@ (8001b6c <AcquireEncoder+0x258>)
 800192c:	881a      	ldrh	r2, [r3, #0]
 800192e:	4b90      	ldr	r3, [pc, #576]	@ (8001b70 <AcquireEncoder+0x25c>)
 8001930:	801a      	strh	r2, [r3, #0]
		wheel1_current = (int16_t)wheel1_count;
 8001932:	4b8f      	ldr	r3, [pc, #572]	@ (8001b70 <AcquireEncoder+0x25c>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	b21a      	sxth	r2, r3
 8001938:	4b8e      	ldr	r3, [pc, #568]	@ (8001b74 <AcquireEncoder+0x260>)
 800193a:	801a      	strh	r2, [r3, #0]
		wheel1_delta = (int16_t)((uint16_t)wheel1_current - (uint16_t)wheel1_last_count);
 800193c:	4b8d      	ldr	r3, [pc, #564]	@ (8001b74 <AcquireEncoder+0x260>)
 800193e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001942:	b29a      	uxth	r2, r3
 8001944:	4b8c      	ldr	r3, [pc, #560]	@ (8001b78 <AcquireEncoder+0x264>)
 8001946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194a:	b29b      	uxth	r3, r3
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21a      	sxth	r2, r3
 8001952:	4b8a      	ldr	r3, [pc, #552]	@ (8001b7c <AcquireEncoder+0x268>)
 8001954:	801a      	strh	r2, [r3, #0]
		wheel1_last_count = wheel1_current;
 8001956:	4b87      	ldr	r3, [pc, #540]	@ (8001b74 <AcquireEncoder+0x260>)
 8001958:	f9b3 2000 	ldrsh.w	r2, [r3]
 800195c:	4b86      	ldr	r3, [pc, #536]	@ (8001b78 <AcquireEncoder+0x264>)
 800195e:	801a      	strh	r2, [r3, #0]

		wheel1_motor_rps = (wheel1_delta / TICKS_PER_REV) / Sample_time ;
 8001960:	4b86      	ldr	r3, [pc, #536]	@ (8001b7c <AcquireEncoder+0x268>)
 8001962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196e:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8001b80 <AcquireEncoder+0x26c>
 8001972:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001976:	eddf 6a83 	vldr	s13, [pc, #524]	@ 8001b84 <AcquireEncoder+0x270>
 800197a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197e:	4b82      	ldr	r3, [pc, #520]	@ (8001b88 <AcquireEncoder+0x274>)
 8001980:	edc3 7a00 	vstr	s15, [r3]
		wheel1_motor_rpm = wheel1_motor_rps * 60;
 8001984:	4b80      	ldr	r3, [pc, #512]	@ (8001b88 <AcquireEncoder+0x274>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8001b8c <AcquireEncoder+0x278>
 800198e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001992:	4b7f      	ldr	r3, [pc, #508]	@ (8001b90 <AcquireEncoder+0x27c>)
 8001994:	edc3 7a00 	vstr	s15, [r3]

		//wheel2
//		wheel2_count = Serial_RxPacket[1];
		wheel2_count = Encoder_Buffer[1];
 8001998:	4b74      	ldr	r3, [pc, #464]	@ (8001b6c <AcquireEncoder+0x258>)
 800199a:	885a      	ldrh	r2, [r3, #2]
 800199c:	4b7d      	ldr	r3, [pc, #500]	@ (8001b94 <AcquireEncoder+0x280>)
 800199e:	801a      	strh	r2, [r3, #0]
		wheel2_current = (int16_t)wheel2_count;
 80019a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001b94 <AcquireEncoder+0x280>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001b98 <AcquireEncoder+0x284>)
 80019a8:	801a      	strh	r2, [r3, #0]
		wheel2_delta = (int16_t)((uint16_t)wheel2_current - (uint16_t)wheel2_last_count);
 80019aa:	4b7b      	ldr	r3, [pc, #492]	@ (8001b98 <AcquireEncoder+0x284>)
 80019ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	4b7a      	ldr	r3, [pc, #488]	@ (8001b9c <AcquireEncoder+0x288>)
 80019b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b21a      	sxth	r2, r3
 80019c0:	4b77      	ldr	r3, [pc, #476]	@ (8001ba0 <AcquireEncoder+0x28c>)
 80019c2:	801a      	strh	r2, [r3, #0]
		wheel2_last_count = wheel2_current;
 80019c4:	4b74      	ldr	r3, [pc, #464]	@ (8001b98 <AcquireEncoder+0x284>)
 80019c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019ca:	4b74      	ldr	r3, [pc, #464]	@ (8001b9c <AcquireEncoder+0x288>)
 80019cc:	801a      	strh	r2, [r3, #0]

		wheel2_motor_rps = (wheel2_delta / TICKS_PER_REV) / Sample_time ;
 80019ce:	4b74      	ldr	r3, [pc, #464]	@ (8001ba0 <AcquireEncoder+0x28c>)
 80019d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019dc:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8001b80 <AcquireEncoder+0x26c>
 80019e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019e4:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8001b84 <AcquireEncoder+0x270>
 80019e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ec:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba4 <AcquireEncoder+0x290>)
 80019ee:	edc3 7a00 	vstr	s15, [r3]
		wheel2_motor_rpm = wheel2_motor_rps * 60;
 80019f2:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba4 <AcquireEncoder+0x290>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001b8c <AcquireEncoder+0x278>
 80019fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a00:	4b69      	ldr	r3, [pc, #420]	@ (8001ba8 <AcquireEncoder+0x294>)
 8001a02:	edc3 7a00 	vstr	s15, [r3]

		//wheel3
//		wheel3_count = Serial_RxPacket[2];
		wheel3_count = Encoder_Buffer[2];
 8001a06:	4b59      	ldr	r3, [pc, #356]	@ (8001b6c <AcquireEncoder+0x258>)
 8001a08:	889a      	ldrh	r2, [r3, #4]
 8001a0a:	4b68      	ldr	r3, [pc, #416]	@ (8001bac <AcquireEncoder+0x298>)
 8001a0c:	801a      	strh	r2, [r3, #0]
		wheel3_current = (int16_t)wheel3_count;
 8001a0e:	4b67      	ldr	r3, [pc, #412]	@ (8001bac <AcquireEncoder+0x298>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	4b66      	ldr	r3, [pc, #408]	@ (8001bb0 <AcquireEncoder+0x29c>)
 8001a16:	801a      	strh	r2, [r3, #0]
		wheel3_delta = (int16_t)((uint16_t)wheel3_current - (uint16_t)wheel3_last_count);
 8001a18:	4b65      	ldr	r3, [pc, #404]	@ (8001bb0 <AcquireEncoder+0x29c>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b64      	ldr	r3, [pc, #400]	@ (8001bb4 <AcquireEncoder+0x2a0>)
 8001a22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	b21a      	sxth	r2, r3
 8001a2e:	4b62      	ldr	r3, [pc, #392]	@ (8001bb8 <AcquireEncoder+0x2a4>)
 8001a30:	801a      	strh	r2, [r3, #0]
		wheel3_last_count = wheel3_current;
 8001a32:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb0 <AcquireEncoder+0x29c>)
 8001a34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a38:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb4 <AcquireEncoder+0x2a0>)
 8001a3a:	801a      	strh	r2, [r3, #0]

		wheel3_motor_rps = (wheel3_delta / TICKS_PER_REV) / Sample_time ;
 8001a3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb8 <AcquireEncoder+0x2a4>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4a:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001b80 <AcquireEncoder+0x26c>
 8001a4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a52:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8001b84 <AcquireEncoder+0x270>
 8001a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5a:	4b58      	ldr	r3, [pc, #352]	@ (8001bbc <AcquireEncoder+0x2a8>)
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
		wheel3_motor_rpm = wheel3_motor_rps * 60;
 8001a60:	4b56      	ldr	r3, [pc, #344]	@ (8001bbc <AcquireEncoder+0x2a8>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001b8c <AcquireEncoder+0x278>
 8001a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a6e:	4b54      	ldr	r3, [pc, #336]	@ (8001bc0 <AcquireEncoder+0x2ac>)
 8001a70:	edc3 7a00 	vstr	s15, [r3]

		//wheel4
//		wheel4_count = Serial_RxPacket[3];
		wheel4_count = Encoder_Buffer[3];
 8001a74:	4b3d      	ldr	r3, [pc, #244]	@ (8001b6c <AcquireEncoder+0x258>)
 8001a76:	88da      	ldrh	r2, [r3, #6]
 8001a78:	4b52      	ldr	r3, [pc, #328]	@ (8001bc4 <AcquireEncoder+0x2b0>)
 8001a7a:	801a      	strh	r2, [r3, #0]
		wheel4_current = (int16_t)wheel4_count;
 8001a7c:	4b51      	ldr	r3, [pc, #324]	@ (8001bc4 <AcquireEncoder+0x2b0>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	4b51      	ldr	r3, [pc, #324]	@ (8001bc8 <AcquireEncoder+0x2b4>)
 8001a84:	801a      	strh	r2, [r3, #0]
		wheel4_delta = (int16_t)((uint16_t)wheel4_current - (uint16_t)wheel4_last_count);
 8001a86:	4b50      	ldr	r3, [pc, #320]	@ (8001bc8 <AcquireEncoder+0x2b4>)
 8001a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b4f      	ldr	r3, [pc, #316]	@ (8001bcc <AcquireEncoder+0x2b8>)
 8001a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8001bd0 <AcquireEncoder+0x2bc>)
 8001a9e:	801a      	strh	r2, [r3, #0]
		wheel4_last_count = wheel4_current;
 8001aa0:	4b49      	ldr	r3, [pc, #292]	@ (8001bc8 <AcquireEncoder+0x2b4>)
 8001aa2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001aa6:	4b49      	ldr	r3, [pc, #292]	@ (8001bcc <AcquireEncoder+0x2b8>)
 8001aa8:	801a      	strh	r2, [r3, #0]

		wheel4_motor_rps = (wheel4_delta / TICKS_PER_REV) / Sample_time ;
 8001aaa:	4b49      	ldr	r3, [pc, #292]	@ (8001bd0 <AcquireEncoder+0x2bc>)
 8001aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab8:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001b80 <AcquireEncoder+0x26c>
 8001abc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ac0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001b84 <AcquireEncoder+0x270>
 8001ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac8:	4b42      	ldr	r3, [pc, #264]	@ (8001bd4 <AcquireEncoder+0x2c0>)
 8001aca:	edc3 7a00 	vstr	s15, [r3]
		wheel4_motor_rpm = wheel4_motor_rps * 60;
 8001ace:	4b41      	ldr	r3, [pc, #260]	@ (8001bd4 <AcquireEncoder+0x2c0>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001b8c <AcquireEncoder+0x278>
 8001ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001adc:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd8 <AcquireEncoder+0x2c4>)
 8001ade:	edc3 7a00 	vstr	s15, [r3]

		osMutexAcquire(EncoderMutex1,osWaitForever);
 8001ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bdc <AcquireEncoder+0x2c8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 fd71 	bl	80045d2 <osMutexAcquire>
		WheelSpeed.speed1 = wheel1_motor_rpm;
 8001af0:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <AcquireEncoder+0x27c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a3a      	ldr	r2, [pc, #232]	@ (8001be0 <AcquireEncoder+0x2cc>)
 8001af6:	6013      	str	r3, [r2, #0]
		osMutexRelease(EncoderMutex1);
 8001af8:	4b38      	ldr	r3, [pc, #224]	@ (8001bdc <AcquireEncoder+0x2c8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fdb3 	bl	8004668 <osMutexRelease>
		osMutexAcquire(EncoderMutex2,osWaitForever);
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <AcquireEncoder+0x2d0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 fd61 	bl	80045d2 <osMutexAcquire>
		WheelSpeed.speed2 = wheel2_motor_rpm;
 8001b10:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <AcquireEncoder+0x294>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a32      	ldr	r2, [pc, #200]	@ (8001be0 <AcquireEncoder+0x2cc>)
 8001b16:	6053      	str	r3, [r2, #4]
		osMutexRelease(EncoderMutex2);
 8001b18:	4b32      	ldr	r3, [pc, #200]	@ (8001be4 <AcquireEncoder+0x2d0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 fda3 	bl	8004668 <osMutexRelease>
		osMutexAcquire(EncoderMutex3,osWaitForever);
 8001b22:	4b31      	ldr	r3, [pc, #196]	@ (8001be8 <AcquireEncoder+0x2d4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fd51 	bl	80045d2 <osMutexAcquire>
		WheelSpeed.speed3 = wheel3_motor_rpm;
 8001b30:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <AcquireEncoder+0x2ac>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2a      	ldr	r2, [pc, #168]	@ (8001be0 <AcquireEncoder+0x2cc>)
 8001b36:	6093      	str	r3, [r2, #8]
		osMutexRelease(EncoderMutex3);
 8001b38:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <AcquireEncoder+0x2d4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f002 fd93 	bl	8004668 <osMutexRelease>
		osMutexAcquire(EncoderMutex4,osWaitForever);
 8001b42:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <AcquireEncoder+0x2d8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 fd41 	bl	80045d2 <osMutexAcquire>
		WheelSpeed.speed4 = wheel4_motor_rpm;
 8001b50:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <AcquireEncoder+0x2c4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a22      	ldr	r2, [pc, #136]	@ (8001be0 <AcquireEncoder+0x2cc>)
 8001b56:	60d3      	str	r3, [r2, #12]
		osMutexRelease(EncoderMutex4);
 8001b58:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <AcquireEncoder+0x2d8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 fd83 	bl	8004668 <osMutexRelease>
		osSemaphoreAcquire(EncoderIRQHandle, osWaitForever);
 8001b62:	bf00      	nop
 8001b64:	e6da      	b.n	800191c <AcquireEncoder+0x8>
 8001b66:	bf00      	nop
 8001b68:	200000a8 	.word	0x200000a8
 8001b6c:	20000278 	.word	0x20000278
 8001b70:	2000020a 	.word	0x2000020a
 8001b74:	20000206 	.word	0x20000206
 8001b78:	20000204 	.word	0x20000204
 8001b7c:	20000208 	.word	0x20000208
 8001b80:	45924000 	.word	0x45924000
 8001b84:	3c23d70a 	.word	0x3c23d70a
 8001b88:	2000020c 	.word	0x2000020c
 8001b8c:	42700000 	.word	0x42700000
 8001b90:	20000200 	.word	0x20000200
 8001b94:	2000021e 	.word	0x2000021e
 8001b98:	2000021a 	.word	0x2000021a
 8001b9c:	20000218 	.word	0x20000218
 8001ba0:	2000021c 	.word	0x2000021c
 8001ba4:	20000220 	.word	0x20000220
 8001ba8:	20000214 	.word	0x20000214
 8001bac:	20000232 	.word	0x20000232
 8001bb0:	2000022e 	.word	0x2000022e
 8001bb4:	2000022c 	.word	0x2000022c
 8001bb8:	20000230 	.word	0x20000230
 8001bbc:	20000234 	.word	0x20000234
 8001bc0:	20000228 	.word	0x20000228
 8001bc4:	20000246 	.word	0x20000246
 8001bc8:	20000242 	.word	0x20000242
 8001bcc:	20000240 	.word	0x20000240
 8001bd0:	20000244 	.word	0x20000244
 8001bd4:	20000248 	.word	0x20000248
 8001bd8:	2000023c 	.word	0x2000023c
 8001bdc:	200000b0 	.word	0x200000b0
 8001be0:	200001f0 	.word	0x200001f0
 8001be4:	200000b4 	.word	0x200000b4
 8001be8:	200000b8 	.word	0x200000b8
 8001bec:	200000bc 	.word	0x200000bc

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <Error_Handler+0x8>

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	4a11      	ldr	r2, [pc, #68]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c12:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2e:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <HAL_MspInit+0x54>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	210f      	movs	r1, #15
 8001c3e:	f06f 0001 	mvn.w	r0, #1
 8001c42:	f000 f99a 	bl	8001f7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <NMI_Handler+0x4>

08001c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <HardFault_Handler+0x4>

08001c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <MemManage_Handler+0x4>

08001c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8e:	f000 f897 	bl	8001dc0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c92:	f004 fedd 	bl	8006a50 <xTaskGetSchedulerState>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d001      	beq.n	8001ca0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c9c:	f005 fdd4 	bl	8007848 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <SystemInit+0x20>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cae:	4a05      	ldr	r2, [pc, #20]	@ (8001cc4 <SystemInit+0x20>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ccc:	f7ff ffea 	bl	8001ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd0:	480c      	ldr	r0, [pc, #48]	@ (8001d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd2:	490d      	ldr	r1, [pc, #52]	@ (8001d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd8:	e002      	b.n	8001ce0 <LoopCopyDataInit>

08001cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cde:	3304      	adds	r3, #4

08001ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce4:	d3f9      	bcc.n	8001cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cec:	e001      	b.n	8001cf2 <LoopFillZerobss>

08001cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf0:	3204      	adds	r2, #4

08001cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf4:	d3fb      	bcc.n	8001cee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f006 f8d1 	bl	8007e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfa:	f7ff f849 	bl	8000d90 <main>
  bx  lr    
 8001cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d0c:	080087c8 	.word	0x080087c8
  ldr r2, =_sbss
 8001d10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d14:	20004be8 	.word	0x20004be8

08001d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC_IRQHandler>
	...

08001d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d20:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <HAL_Init+0x40>)
 8001d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <HAL_Init+0x40>)
 8001d32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <HAL_Init+0x40>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	@ (8001d5c <HAL_Init+0x40>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 f90d 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4a:	200f      	movs	r0, #15
 8001d4c:	f000 f808 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d50:	f7ff ff54 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d68:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_InitTick+0x54>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_InitTick+0x58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f917 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00e      	b.n	8001dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d80a      	bhi.n	8001daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f000 f8ed 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da0:	4a06      	ldr	r2, [pc, #24]	@ (8001dbc <HAL_InitTick+0x5c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000060 	.word	0x20000060
 8001db8:	20000068 	.word	0x20000068
 8001dbc:	20000064 	.word	0x20000064

08001dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_IncTick+0x20>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <HAL_IncTick+0x24>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <HAL_IncTick+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000068 	.word	0x20000068
 8001de4:	20000268 	.word	0x20000268

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000268 	.word	0x20000268

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	@ (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	@ (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	@ (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	@ 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	@ 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff8e 	bl	8001e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff47 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff5c 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff8e 	bl	8001eb8 <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffb0 	bl	8001f20 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	@ 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e165      	b.n	80022b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	f040 8154 	bne.w	80022ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d005      	beq.n	800201e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	2b02      	cmp	r3, #2
 800201c:	d130      	bne.n	8002080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 0201 	and.w	r2, r3, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b03      	cmp	r3, #3
 800208a:	d017      	beq.n	80020bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d123      	bne.n	8002110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	220f      	movs	r2, #15
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	69b9      	ldr	r1, [r7, #24]
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80ae 	beq.w	80022ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b5d      	ldr	r3, [pc, #372]	@ (80022cc <HAL_GPIO_Init+0x300>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	4a5c      	ldr	r2, [pc, #368]	@ (80022cc <HAL_GPIO_Init+0x300>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002160:	6453      	str	r3, [r2, #68]	@ 0x44
 8002162:	4b5a      	ldr	r3, [pc, #360]	@ (80022cc <HAL_GPIO_Init+0x300>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216e:	4a58      	ldr	r2, [pc, #352]	@ (80022d0 <HAL_GPIO_Init+0x304>)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4f      	ldr	r2, [pc, #316]	@ (80022d4 <HAL_GPIO_Init+0x308>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d025      	beq.n	80021e6 <HAL_GPIO_Init+0x21a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4e      	ldr	r2, [pc, #312]	@ (80022d8 <HAL_GPIO_Init+0x30c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d01f      	beq.n	80021e2 <HAL_GPIO_Init+0x216>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4d      	ldr	r2, [pc, #308]	@ (80022dc <HAL_GPIO_Init+0x310>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d019      	beq.n	80021de <HAL_GPIO_Init+0x212>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4c      	ldr	r2, [pc, #304]	@ (80022e0 <HAL_GPIO_Init+0x314>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_GPIO_Init+0x20e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4b      	ldr	r2, [pc, #300]	@ (80022e4 <HAL_GPIO_Init+0x318>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00d      	beq.n	80021d6 <HAL_GPIO_Init+0x20a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4a      	ldr	r2, [pc, #296]	@ (80022e8 <HAL_GPIO_Init+0x31c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <HAL_GPIO_Init+0x206>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a49      	ldr	r2, [pc, #292]	@ (80022ec <HAL_GPIO_Init+0x320>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_GPIO_Init+0x202>
 80021ca:	2306      	movs	r3, #6
 80021cc:	e00c      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021ce:	2307      	movs	r3, #7
 80021d0:	e00a      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021d2:	2305      	movs	r3, #5
 80021d4:	e008      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021d6:	2304      	movs	r3, #4
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021da:	2303      	movs	r3, #3
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x21c>
 80021e6:	2300      	movs	r3, #0
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	f002 0203 	and.w	r2, r2, #3
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	4093      	lsls	r3, r2
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f8:	4935      	ldr	r1, [pc, #212]	@ (80022d0 <HAL_GPIO_Init+0x304>)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3302      	adds	r3, #2
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002206:	4b3a      	ldr	r3, [pc, #232]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800222a:	4a31      	ldr	r2, [pc, #196]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002230:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002254:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800225a:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002284:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a8:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <HAL_GPIO_Init+0x324>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3301      	adds	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	f67f ae96 	bls.w	8001fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3724      	adds	r7, #36	@ 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40013800 	.word	0x40013800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40020800 	.word	0x40020800
 80022e0:	40020c00 	.word	0x40020c00
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40021400 	.word	0x40021400
 80022ec:	40021800 	.word	0x40021800
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0cc      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800233c:	4b68      	ldr	r3, [pc, #416]	@ (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d90c      	bls.n	8002364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b65      	ldr	r3, [pc, #404]	@ (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b63      	ldr	r3, [pc, #396]	@ (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0b8      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d020      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800237c:	4b59      	ldr	r3, [pc, #356]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a58      	ldr	r2, [pc, #352]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002386:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002394:	4b53      	ldr	r3, [pc, #332]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a52      	ldr	r2, [pc, #328]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800239e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a0:	4b50      	ldr	r3, [pc, #320]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	494d      	ldr	r1, [pc, #308]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d044      	beq.n	8002448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b47      	ldr	r3, [pc, #284]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d119      	bne.n	8002406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e07f      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d003      	beq.n	80023e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e6:	4b3f      	ldr	r3, [pc, #252]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e06f      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f6:	4b3b      	ldr	r3, [pc, #236]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e067      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002406:	4b37      	ldr	r3, [pc, #220]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f023 0203 	bic.w	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4934      	ldr	r1, [pc, #208]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	4313      	orrs	r3, r2
 8002416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002418:	f7ff fce6 	bl	8001de8 <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	e00a      	b.n	8002436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002420:	f7ff fce2 	bl	8001de8 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e04f      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	4b2b      	ldr	r3, [pc, #172]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 020c 	and.w	r2, r3, #12
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	429a      	cmp	r2, r3
 8002446:	d1eb      	bne.n	8002420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b25      	ldr	r3, [pc, #148]	@ (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d20c      	bcs.n	8002470 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e032      	b.n	80024d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800247c:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4916      	ldr	r1, [pc, #88]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800249a:	4b12      	ldr	r3, [pc, #72]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	490e      	ldr	r1, [pc, #56]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ae:	f000 f821 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 80024b2:	4602      	mov	r2, r0
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	490a      	ldr	r1, [pc, #40]	@ (80024e8 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	5ccb      	ldrb	r3, [r1, r3]
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	4a09      	ldr	r2, [pc, #36]	@ (80024ec <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fc46 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023c00 	.word	0x40023c00
 80024e4:	40023800 	.word	0x40023800
 80024e8:	080081b8 	.word	0x080081b8
 80024ec:	20000060 	.word	0x20000060
 80024f0:	20000064 	.word	0x20000064

080024f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f8:	b0ae      	sub	sp, #184	@ 0xb8
 80024fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800251a:	4bcb      	ldr	r3, [pc, #812]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x354>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b0c      	cmp	r3, #12
 8002524:	f200 8206 	bhi.w	8002934 <HAL_RCC_GetSysClockFreq+0x440>
 8002528:	a201      	add	r2, pc, #4	@ (adr r2, 8002530 <HAL_RCC_GetSysClockFreq+0x3c>)
 800252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252e:	bf00      	nop
 8002530:	08002565 	.word	0x08002565
 8002534:	08002935 	.word	0x08002935
 8002538:	08002935 	.word	0x08002935
 800253c:	08002935 	.word	0x08002935
 8002540:	0800256d 	.word	0x0800256d
 8002544:	08002935 	.word	0x08002935
 8002548:	08002935 	.word	0x08002935
 800254c:	08002935 	.word	0x08002935
 8002550:	08002575 	.word	0x08002575
 8002554:	08002935 	.word	0x08002935
 8002558:	08002935 	.word	0x08002935
 800255c:	08002935 	.word	0x08002935
 8002560:	08002765 	.word	0x08002765
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4bb9      	ldr	r3, [pc, #740]	@ (800284c <HAL_RCC_GetSysClockFreq+0x358>)
 8002566:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800256a:	e1e7      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256c:	4bb8      	ldr	r3, [pc, #736]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x35c>)
 800256e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002572:	e1e3      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002574:	4bb4      	ldr	r3, [pc, #720]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x354>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800257c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002580:	4bb1      	ldr	r3, [pc, #708]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x354>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d071      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800258c:	4bae      	ldr	r3, [pc, #696]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x354>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	099b      	lsrs	r3, r3, #6
 8002592:	2200      	movs	r2, #0
 8002594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002598:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800259c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80025ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025b2:	4622      	mov	r2, r4
 80025b4:	462b      	mov	r3, r5
 80025b6:	f04f 0000 	mov.w	r0, #0
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	0159      	lsls	r1, r3, #5
 80025c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c4:	0150      	lsls	r0, r2, #5
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4621      	mov	r1, r4
 80025cc:	1a51      	subs	r1, r2, r1
 80025ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80025d0:	4629      	mov	r1, r5
 80025d2:	eb63 0301 	sbc.w	r3, r3, r1
 80025d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80025e4:	4649      	mov	r1, r9
 80025e6:	018b      	lsls	r3, r1, #6
 80025e8:	4641      	mov	r1, r8
 80025ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ee:	4641      	mov	r1, r8
 80025f0:	018a      	lsls	r2, r1, #6
 80025f2:	4641      	mov	r1, r8
 80025f4:	1a51      	subs	r1, r2, r1
 80025f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025f8:	4649      	mov	r1, r9
 80025fa:	eb63 0301 	sbc.w	r3, r3, r1
 80025fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800260c:	4649      	mov	r1, r9
 800260e:	00cb      	lsls	r3, r1, #3
 8002610:	4641      	mov	r1, r8
 8002612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002616:	4641      	mov	r1, r8
 8002618:	00ca      	lsls	r2, r1, #3
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	4603      	mov	r3, r0
 8002620:	4622      	mov	r2, r4
 8002622:	189b      	adds	r3, r3, r2
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30
 8002626:	462b      	mov	r3, r5
 8002628:	460a      	mov	r2, r1
 800262a:	eb42 0303 	adc.w	r3, r2, r3
 800262e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800263c:	4629      	mov	r1, r5
 800263e:	024b      	lsls	r3, r1, #9
 8002640:	4621      	mov	r1, r4
 8002642:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002646:	4621      	mov	r1, r4
 8002648:	024a      	lsls	r2, r1, #9
 800264a:	4610      	mov	r0, r2
 800264c:	4619      	mov	r1, r3
 800264e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002652:	2200      	movs	r2, #0
 8002654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002658:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800265c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002660:	f7fe fa1c 	bl	8000a9c <__aeabi_uldivmod>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4613      	mov	r3, r2
 800266a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800266e:	e067      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002670:	4b75      	ldr	r3, [pc, #468]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x354>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	099b      	lsrs	r3, r3, #6
 8002676:	2200      	movs	r2, #0
 8002678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800267c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002680:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002688:	67bb      	str	r3, [r7, #120]	@ 0x78
 800268a:	2300      	movs	r3, #0
 800268c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800268e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	f04f 0000 	mov.w	r0, #0
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	0159      	lsls	r1, r3, #5
 80026a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a4:	0150      	lsls	r0, r2, #5
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4621      	mov	r1, r4
 80026ac:	1a51      	subs	r1, r2, r1
 80026ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80026b0:	4629      	mov	r1, r5
 80026b2:	eb63 0301 	sbc.w	r3, r3, r1
 80026b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80026c4:	4649      	mov	r1, r9
 80026c6:	018b      	lsls	r3, r1, #6
 80026c8:	4641      	mov	r1, r8
 80026ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ce:	4641      	mov	r1, r8
 80026d0:	018a      	lsls	r2, r1, #6
 80026d2:	4641      	mov	r1, r8
 80026d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80026d8:	4649      	mov	r1, r9
 80026da:	eb63 0b01 	sbc.w	fp, r3, r1
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026f2:	4692      	mov	sl, r2
 80026f4:	469b      	mov	fp, r3
 80026f6:	4623      	mov	r3, r4
 80026f8:	eb1a 0303 	adds.w	r3, sl, r3
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	462b      	mov	r3, r5
 8002700:	eb4b 0303 	adc.w	r3, fp, r3
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002712:	4629      	mov	r1, r5
 8002714:	028b      	lsls	r3, r1, #10
 8002716:	4621      	mov	r1, r4
 8002718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800271c:	4621      	mov	r1, r4
 800271e:	028a      	lsls	r2, r1, #10
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002728:	2200      	movs	r2, #0
 800272a:	673b      	str	r3, [r7, #112]	@ 0x70
 800272c:	677a      	str	r2, [r7, #116]	@ 0x74
 800272e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002732:	f7fe f9b3 	bl	8000a9c <__aeabi_uldivmod>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4613      	mov	r3, r2
 800273c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002740:	4b41      	ldr	r3, [pc, #260]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x354>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	3301      	adds	r3, #1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002762:	e0eb      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002764:	4b38      	ldr	r3, [pc, #224]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x354>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800276c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002770:	4b35      	ldr	r3, [pc, #212]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x354>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d06b      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277c:	4b32      	ldr	r3, [pc, #200]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x354>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	2200      	movs	r2, #0
 8002784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002786:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800278a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002790:	2300      	movs	r3, #0
 8002792:	667b      	str	r3, [r7, #100]	@ 0x64
 8002794:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002798:	4622      	mov	r2, r4
 800279a:	462b      	mov	r3, r5
 800279c:	f04f 0000 	mov.w	r0, #0
 80027a0:	f04f 0100 	mov.w	r1, #0
 80027a4:	0159      	lsls	r1, r3, #5
 80027a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027aa:	0150      	lsls	r0, r2, #5
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4621      	mov	r1, r4
 80027b2:	1a51      	subs	r1, r2, r1
 80027b4:	61b9      	str	r1, [r7, #24]
 80027b6:	4629      	mov	r1, r5
 80027b8:	eb63 0301 	sbc.w	r3, r3, r1
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027ca:	4659      	mov	r1, fp
 80027cc:	018b      	lsls	r3, r1, #6
 80027ce:	4651      	mov	r1, sl
 80027d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d4:	4651      	mov	r1, sl
 80027d6:	018a      	lsls	r2, r1, #6
 80027d8:	4651      	mov	r1, sl
 80027da:	ebb2 0801 	subs.w	r8, r2, r1
 80027de:	4659      	mov	r1, fp
 80027e0:	eb63 0901 	sbc.w	r9, r3, r1
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027f8:	4690      	mov	r8, r2
 80027fa:	4699      	mov	r9, r3
 80027fc:	4623      	mov	r3, r4
 80027fe:	eb18 0303 	adds.w	r3, r8, r3
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	462b      	mov	r3, r5
 8002806:	eb49 0303 	adc.w	r3, r9, r3
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002818:	4629      	mov	r1, r5
 800281a:	024b      	lsls	r3, r1, #9
 800281c:	4621      	mov	r1, r4
 800281e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002822:	4621      	mov	r1, r4
 8002824:	024a      	lsls	r2, r1, #9
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800282e:	2200      	movs	r2, #0
 8002830:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002832:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002834:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002838:	f7fe f930 	bl	8000a9c <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002846:	e065      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x420>
 8002848:	40023800 	.word	0x40023800
 800284c:	00f42400 	.word	0x00f42400
 8002850:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002854:	4b3d      	ldr	r3, [pc, #244]	@ (800294c <HAL_RCC_GetSysClockFreq+0x458>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	099b      	lsrs	r3, r3, #6
 800285a:	2200      	movs	r2, #0
 800285c:	4618      	mov	r0, r3
 800285e:	4611      	mov	r1, r2
 8002860:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002864:	653b      	str	r3, [r7, #80]	@ 0x50
 8002866:	2300      	movs	r3, #0
 8002868:	657b      	str	r3, [r7, #84]	@ 0x54
 800286a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800286e:	4642      	mov	r2, r8
 8002870:	464b      	mov	r3, r9
 8002872:	f04f 0000 	mov.w	r0, #0
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	0159      	lsls	r1, r3, #5
 800287c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002880:	0150      	lsls	r0, r2, #5
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4641      	mov	r1, r8
 8002888:	1a51      	subs	r1, r2, r1
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	4649      	mov	r1, r9
 800288e:	eb63 0301 	sbc.w	r3, r3, r1
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028a0:	4659      	mov	r1, fp
 80028a2:	018b      	lsls	r3, r1, #6
 80028a4:	4651      	mov	r1, sl
 80028a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028aa:	4651      	mov	r1, sl
 80028ac:	018a      	lsls	r2, r1, #6
 80028ae:	4651      	mov	r1, sl
 80028b0:	1a54      	subs	r4, r2, r1
 80028b2:	4659      	mov	r1, fp
 80028b4:	eb63 0501 	sbc.w	r5, r3, r1
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	00eb      	lsls	r3, r5, #3
 80028c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c6:	00e2      	lsls	r2, r4, #3
 80028c8:	4614      	mov	r4, r2
 80028ca:	461d      	mov	r5, r3
 80028cc:	4643      	mov	r3, r8
 80028ce:	18e3      	adds	r3, r4, r3
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	464b      	mov	r3, r9
 80028d4:	eb45 0303 	adc.w	r3, r5, r3
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028e6:	4629      	mov	r1, r5
 80028e8:	028b      	lsls	r3, r1, #10
 80028ea:	4621      	mov	r1, r4
 80028ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f0:	4621      	mov	r1, r4
 80028f2:	028a      	lsls	r2, r1, #10
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028fc:	2200      	movs	r2, #0
 80028fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002900:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002902:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002906:	f7fe f8c9 	bl	8000a9c <__aeabi_uldivmod>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4613      	mov	r3, r2
 8002910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002914:	4b0d      	ldr	r3, [pc, #52]	@ (800294c <HAL_RCC_GetSysClockFreq+0x458>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	0f1b      	lsrs	r3, r3, #28
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002922:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002926:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002932:	e003      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800293a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800293c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002940:	4618      	mov	r0, r3
 8002942:	37b8      	adds	r7, #184	@ 0xb8
 8002944:	46bd      	mov	sp, r7
 8002946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	00f42400 	.word	0x00f42400

08002954 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e28d      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8083 	beq.w	8002a7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002974:	4b94      	ldr	r3, [pc, #592]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b04      	cmp	r3, #4
 800297e:	d019      	beq.n	80029b4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002980:	4b91      	ldr	r3, [pc, #580]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
        || \
 8002988:	2b08      	cmp	r3, #8
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800298c:	4b8e      	ldr	r3, [pc, #568]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002994:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002998:	d00c      	beq.n	80029b4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299a:	4b8b      	ldr	r3, [pc, #556]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d112      	bne.n	80029cc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a6:	4b88      	ldr	r3, [pc, #544]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029b2:	d10b      	bne.n	80029cc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	4b84      	ldr	r3, [pc, #528]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d05b      	beq.n	8002a78 <HAL_RCC_OscConfig+0x124>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d157      	bne.n	8002a78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e25a      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d4:	d106      	bne.n	80029e4 <HAL_RCC_OscConfig+0x90>
 80029d6:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7b      	ldr	r2, [pc, #492]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e01d      	b.n	8002a20 <HAL_RCC_OscConfig+0xcc>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0xb4>
 80029ee:	4b76      	ldr	r3, [pc, #472]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a75      	ldr	r2, [pc, #468]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 80029f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b73      	ldr	r3, [pc, #460]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a72      	ldr	r2, [pc, #456]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_OscConfig+0xcc>
 8002a08:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6b      	ldr	r2, [pc, #428]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d013      	beq.n	8002a50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7ff f9de 	bl	8001de8 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a30:	f7ff f9da 	bl	8001de8 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	@ 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e21f      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b61      	ldr	r3, [pc, #388]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0xdc>
 8002a4e:	e014      	b.n	8002a7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7ff f9ca 	bl	8001de8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a58:	f7ff f9c6 	bl	8001de8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	@ 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e20b      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	4b57      	ldr	r3, [pc, #348]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x104>
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d06f      	beq.n	8002b66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a86:	4b50      	ldr	r3, [pc, #320]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d017      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a92:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d105      	bne.n	8002aaa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aaa:	4b47      	ldr	r3, [pc, #284]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d11c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab6:	4b44      	ldr	r3, [pc, #272]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d116      	bne.n	8002af0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac2:	4b41      	ldr	r3, [pc, #260]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_RCC_OscConfig+0x186>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d001      	beq.n	8002ada <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e1d3      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ada:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4937      	ldr	r1, [pc, #220]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	e03a      	b.n	8002b66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af8:	4b34      	ldr	r3, [pc, #208]	@ (8002bcc <HAL_RCC_OscConfig+0x278>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7ff f973 	bl	8001de8 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b06:	f7ff f96f 	bl	8001de8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e1b4      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b18:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f0      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b24:	4b28      	ldr	r3, [pc, #160]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4925      	ldr	r1, [pc, #148]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]
 8002b38:	e015      	b.n	8002b66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3a:	4b24      	ldr	r3, [pc, #144]	@ (8002bcc <HAL_RCC_OscConfig+0x278>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7ff f952 	bl	8001de8 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b48:	f7ff f94e 	bl	8001de8 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e193      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d036      	beq.n	8002be0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7a:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7ff f932 	bl	8001de8 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b88:	f7ff f92e 	bl	8001de8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e173      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x234>
 8002ba6:	e01b      	b.n	8002be0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba8:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7ff f91b 	bl	8001de8 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	e00e      	b.n	8002bd4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb6:	f7ff f917 	bl	8001de8 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d907      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e15c      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	42470000 	.word	0x42470000
 8002bd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	4b8a      	ldr	r3, [pc, #552]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1ea      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8097 	beq.w	8002d1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	4b83      	ldr	r3, [pc, #524]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b7f      	ldr	r3, [pc, #508]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	4a7e      	ldr	r2, [pc, #504]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b79      	ldr	r3, [pc, #484]	@ (8002e04 <HAL_RCC_OscConfig+0x4b0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d118      	bne.n	8002c5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2a:	4b76      	ldr	r3, [pc, #472]	@ (8002e04 <HAL_RCC_OscConfig+0x4b0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a75      	ldr	r2, [pc, #468]	@ (8002e04 <HAL_RCC_OscConfig+0x4b0>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7ff f8d7 	bl	8001de8 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7ff f8d3 	bl	8001de8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e118      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	4b6c      	ldr	r3, [pc, #432]	@ (8002e04 <HAL_RCC_OscConfig+0x4b0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x31e>
 8002c64:	4b66      	ldr	r3, [pc, #408]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c68:	4a65      	ldr	r2, [pc, #404]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c70:	e01c      	b.n	8002cac <HAL_RCC_OscConfig+0x358>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x340>
 8002c7a:	4b61      	ldr	r3, [pc, #388]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7e:	4a60      	ldr	r2, [pc, #384]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c86:	4b5e      	ldr	r3, [pc, #376]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8a:	4a5d      	ldr	r2, [pc, #372]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c92:	e00b      	b.n	8002cac <HAL_RCC_OscConfig+0x358>
 8002c94:	4b5a      	ldr	r3, [pc, #360]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c98:	4a59      	ldr	r2, [pc, #356]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca0:	4b57      	ldr	r3, [pc, #348]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca4:	4a56      	ldr	r2, [pc, #344]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002ca6:	f023 0304 	bic.w	r3, r3, #4
 8002caa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d015      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7ff f898 	bl	8001de8 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7ff f894 	bl	8001de8 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e0d7      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ee      	beq.n	8002cbc <HAL_RCC_OscConfig+0x368>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7ff f882 	bl	8001de8 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7ff f87e 	bl	8001de8 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e0c1      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfe:	4b40      	ldr	r3, [pc, #256]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1ee      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d10:	4b3b      	ldr	r3, [pc, #236]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	4a3a      	ldr	r2, [pc, #232]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80ad 	beq.w	8002e80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d26:	4b36      	ldr	r3, [pc, #216]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d060      	beq.n	8002df4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d145      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b33      	ldr	r3, [pc, #204]	@ (8002e08 <HAL_RCC_OscConfig+0x4b4>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7ff f852 	bl	8001de8 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7ff f84e 	bl	8001de8 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e093      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5a:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	019b      	lsls	r3, r3, #6
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7c:	085b      	lsrs	r3, r3, #1
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d90:	071b      	lsls	r3, r3, #28
 8002d92:	491b      	ldr	r1, [pc, #108]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <HAL_RCC_OscConfig+0x4b4>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7ff f823 	bl	8001de8 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da6:	f7ff f81f 	bl	8001de8 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e064      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db8:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x452>
 8002dc4:	e05c      	b.n	8002e80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <HAL_RCC_OscConfig+0x4b4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7ff f80c 	bl	8001de8 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7ff f808 	bl	8001de8 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e04d      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x480>
 8002df2:	e045      	b.n	8002e80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e040      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40007000 	.word	0x40007000
 8002e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e8c <HAL_RCC_OscConfig+0x538>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d030      	beq.n	8002e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d129      	bne.n	8002e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d122      	bne.n	8002e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d119      	bne.n	8002e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	3b01      	subs	r3, #1
 8002e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d10f      	bne.n	8002e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800

08002e90 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x00000001)
 8002e94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed0 <EXTI0_IRQHandler+0x40>)
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d011      	beq.n	8002ec4 <EXTI0_IRQHandler+0x34>
	{
		if( (GPIOB->IDR & 0x00000002) == 0)
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed4 <EXTI0_IRQHandler+0x44>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d108      	bne.n	8002ebe <EXTI0_IRQHandler+0x2e>
		{
			Encoder_Count--;
 8002eac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <EXTI0_IRQHandler+0x48>)
 8002eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	b21a      	sxth	r2, r3
 8002eba:	4b07      	ldr	r3, [pc, #28]	@ (8002ed8 <EXTI0_IRQHandler+0x48>)
 8002ebc:	801a      	strh	r2, [r3, #0]
		}
		EXTI->PR = 0x00000001;
 8002ebe:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <EXTI0_IRQHandler+0x40>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	615a      	str	r2, [r3, #20]
	}
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40013c00 	.word	0x40013c00
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	2000026c 	.word	0x2000026c

08002edc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x00000002)
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <EXTI1_IRQHandler+0x40>)
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d011      	beq.n	8002f10 <EXTI1_IRQHandler+0x34>
	{
		if((GPIOB->IDR & 0x00000001) == 0)
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <EXTI1_IRQHandler+0x44>)
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d108      	bne.n	8002f0a <EXTI1_IRQHandler+0x2e>
		{
			Encoder_Count++;
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <EXTI1_IRQHandler+0x48>)
 8002efa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3301      	adds	r3, #1
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	b21a      	sxth	r2, r3
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <EXTI1_IRQHandler+0x48>)
 8002f08:	801a      	strh	r2, [r3, #0]
		}
		EXTI->PR = 0x00000002;
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <EXTI1_IRQHandler+0x40>)
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	615a      	str	r2, [r3, #20]
	}
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40013c00 	.word	0x40013c00
 8002f20:	40020400 	.word	0x40020400
 8002f24:	2000026c 	.word	0x2000026c

08002f28 <Motor_Init>:
#include <stm32f446xx.h>



void Motor_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
	//PWM初始化
	Pwm1_Init();
 8002f2c:	f000 fb98 	bl	8003660 <Pwm1_Init>
	Pwm2_Init();
 8002f30:	f000 fc30 	bl	8003794 <Pwm2_Init>
	Pwm3_Init();
 8002f34:	f000 fcde 	bl	80038f4 <Pwm3_Init>
	Pwm4_Init();
 8002f38:	f000 fd70 	bl	8003a1c <Pwm4_Init>

	//GPIOB 時鐘開啟，GPIOC 時鐘開啟
	RCC->AHB1ENR |= 1 << 1;
 8002f3c:	4b69      	ldr	r3, [pc, #420]	@ (80030e4 <Motor_Init+0x1bc>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	4a68      	ldr	r2, [pc, #416]	@ (80030e4 <Motor_Init+0x1bc>)
 8002f42:	f043 0302 	orr.w	r3, r3, #2
 8002f46:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= 1 << 2;
 8002f48:	4b66      	ldr	r3, [pc, #408]	@ (80030e4 <Motor_Init+0x1bc>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4c:	4a65      	ldr	r2, [pc, #404]	@ (80030e4 <Motor_Init+0x1bc>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= 1 << 0;
 8002f54:	4b63      	ldr	r3, [pc, #396]	@ (80030e4 <Motor_Init+0x1bc>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f58:	4a62      	ldr	r2, [pc, #392]	@ (80030e4 <Motor_Init+0x1bc>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6313      	str	r3, [r2, #48]	@ 0x30

	//使用PC8 PC6當正反轉接角
	GPIOC->MODER &= ~(3 << 16);
 8002f60:	4b61      	ldr	r3, [pc, #388]	@ (80030e8 <Motor_Init+0x1c0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a60      	ldr	r2, [pc, #384]	@ (80030e8 <Motor_Init+0x1c0>)
 8002f66:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002f6a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=   1 << 16;
 8002f6c:	4b5e      	ldr	r3, [pc, #376]	@ (80030e8 <Motor_Init+0x1c0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5d      	ldr	r2, [pc, #372]	@ (80030e8 <Motor_Init+0x1c0>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER&= ~(1 << 8);
 8002f78:	4b5b      	ldr	r3, [pc, #364]	@ (80030e8 <Motor_Init+0x1c0>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a5a      	ldr	r2, [pc, #360]	@ (80030e8 <Motor_Init+0x1c0>)
 8002f7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f82:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= 3 << 16;
 8002f84:	4b58      	ldr	r3, [pc, #352]	@ (80030e8 <Motor_Init+0x1c0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a57      	ldr	r2, [pc, #348]	@ (80030e8 <Motor_Init+0x1c0>)
 8002f8a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8002f8e:	6093      	str	r3, [r2, #8]

	GPIOC->MODER &= ~(3 << 12);
 8002f90:	4b55      	ldr	r3, [pc, #340]	@ (80030e8 <Motor_Init+0x1c0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a54      	ldr	r2, [pc, #336]	@ (80030e8 <Motor_Init+0x1c0>)
 8002f96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f9a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=   1 << 12;
 8002f9c:	4b52      	ldr	r3, [pc, #328]	@ (80030e8 <Motor_Init+0x1c0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a51      	ldr	r2, [pc, #324]	@ (80030e8 <Motor_Init+0x1c0>)
 8002fa2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fa6:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER&= ~(1 << 6);
 8002fa8:	4b4f      	ldr	r3, [pc, #316]	@ (80030e8 <Motor_Init+0x1c0>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a4e      	ldr	r2, [pc, #312]	@ (80030e8 <Motor_Init+0x1c0>)
 8002fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fb2:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= 3 << 12;
 8002fb4:	4b4c      	ldr	r3, [pc, #304]	@ (80030e8 <Motor_Init+0x1c0>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80030e8 <Motor_Init+0x1c0>)
 8002fba:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8002fbe:	6093      	str	r3, [r2, #8]

	//使用PB12 PB13當正反轉接角
	GPIOB->MODER &= ~(3 << 24);
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80030ec <Motor_Init+0x1c4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a49      	ldr	r2, [pc, #292]	@ (80030ec <Motor_Init+0x1c4>)
 8002fc6:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002fca:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 24;
 8002fcc:	4b47      	ldr	r3, [pc, #284]	@ (80030ec <Motor_Init+0x1c4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a46      	ldr	r2, [pc, #280]	@ (80030ec <Motor_Init+0x1c4>)
 8002fd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 12);
 8002fd8:	4b44      	ldr	r3, [pc, #272]	@ (80030ec <Motor_Init+0x1c4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a43      	ldr	r2, [pc, #268]	@ (80030ec <Motor_Init+0x1c4>)
 8002fde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fe2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 24;
 8002fe4:	4b41      	ldr	r3, [pc, #260]	@ (80030ec <Motor_Init+0x1c4>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a40      	ldr	r2, [pc, #256]	@ (80030ec <Motor_Init+0x1c4>)
 8002fea:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8002fee:	6093      	str	r3, [r2, #8]

	GPIOB->MODER &= ~(3 << 26);
 8002ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80030ec <Motor_Init+0x1c4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3d      	ldr	r2, [pc, #244]	@ (80030ec <Motor_Init+0x1c4>)
 8002ff6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002ffa:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 26;
 8002ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80030ec <Motor_Init+0x1c4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a3a      	ldr	r2, [pc, #232]	@ (80030ec <Motor_Init+0x1c4>)
 8003002:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003006:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 13);
 8003008:	4b38      	ldr	r3, [pc, #224]	@ (80030ec <Motor_Init+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4a37      	ldr	r2, [pc, #220]	@ (80030ec <Motor_Init+0x1c4>)
 800300e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003012:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 26;
 8003014:	4b35      	ldr	r3, [pc, #212]	@ (80030ec <Motor_Init+0x1c4>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4a34      	ldr	r2, [pc, #208]	@ (80030ec <Motor_Init+0x1c4>)
 800301a:	f043 6340 	orr.w	r3, r3, #201326592	@ 0xc000000
 800301e:	6093      	str	r3, [r2, #8]
	
	//使用PA11、PA12當正反轉接角
	GPIOA->MODER &= ~(3 << 22);
 8003020:	4b33      	ldr	r3, [pc, #204]	@ (80030f0 <Motor_Init+0x1c8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a32      	ldr	r2, [pc, #200]	@ (80030f0 <Motor_Init+0x1c8>)
 8003026:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800302a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=   1 << 22;
 800302c:	4b30      	ldr	r3, [pc, #192]	@ (80030f0 <Motor_Init+0x1c8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2f      	ldr	r2, [pc, #188]	@ (80030f0 <Motor_Init+0x1c8>)
 8003032:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003036:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER&= ~(1 << 11);
 8003038:	4b2d      	ldr	r3, [pc, #180]	@ (80030f0 <Motor_Init+0x1c8>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a2c      	ldr	r2, [pc, #176]	@ (80030f0 <Motor_Init+0x1c8>)
 800303e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003042:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= 3 << 22;
 8003044:	4b2a      	ldr	r3, [pc, #168]	@ (80030f0 <Motor_Init+0x1c8>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a29      	ldr	r2, [pc, #164]	@ (80030f0 <Motor_Init+0x1c8>)
 800304a:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800304e:	6093      	str	r3, [r2, #8]

	GPIOA->MODER &= ~(3 << 24);
 8003050:	4b27      	ldr	r3, [pc, #156]	@ (80030f0 <Motor_Init+0x1c8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a26      	ldr	r2, [pc, #152]	@ (80030f0 <Motor_Init+0x1c8>)
 8003056:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800305a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=   1 << 24;
 800305c:	4b24      	ldr	r3, [pc, #144]	@ (80030f0 <Motor_Init+0x1c8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a23      	ldr	r2, [pc, #140]	@ (80030f0 <Motor_Init+0x1c8>)
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003066:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER&= ~(1 << 12);
 8003068:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <Motor_Init+0x1c8>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4a20      	ldr	r2, [pc, #128]	@ (80030f0 <Motor_Init+0x1c8>)
 800306e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003072:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= 3 << 24;
 8003074:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <Motor_Init+0x1c8>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <Motor_Init+0x1c8>)
 800307a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 800307e:	6093      	str	r3, [r2, #8]

	//使用PB14 PB15當正反轉接角
	GPIOB->MODER &= ~(3 << 28);
 8003080:	4b1a      	ldr	r3, [pc, #104]	@ (80030ec <Motor_Init+0x1c4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a19      	ldr	r2, [pc, #100]	@ (80030ec <Motor_Init+0x1c4>)
 8003086:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800308a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 28;
 800308c:	4b17      	ldr	r3, [pc, #92]	@ (80030ec <Motor_Init+0x1c4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a16      	ldr	r2, [pc, #88]	@ (80030ec <Motor_Init+0x1c4>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003096:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 14);
 8003098:	4b14      	ldr	r3, [pc, #80]	@ (80030ec <Motor_Init+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <Motor_Init+0x1c4>)
 800309e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030a2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 28;
 80030a4:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <Motor_Init+0x1c4>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4a10      	ldr	r2, [pc, #64]	@ (80030ec <Motor_Init+0x1c4>)
 80030aa:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 80030ae:	6093      	str	r3, [r2, #8]

	GPIOB->MODER &= ~(3 << 30);
 80030b0:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <Motor_Init+0x1c4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0d      	ldr	r2, [pc, #52]	@ (80030ec <Motor_Init+0x1c4>)
 80030b6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80030ba:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   1 << 30;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <Motor_Init+0x1c4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0a      	ldr	r2, [pc, #40]	@ (80030ec <Motor_Init+0x1c4>)
 80030c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030c6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER&= ~(1 << 15);
 80030c8:	4b08      	ldr	r3, [pc, #32]	@ (80030ec <Motor_Init+0x1c4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a07      	ldr	r2, [pc, #28]	@ (80030ec <Motor_Init+0x1c4>)
 80030ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80030d2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= 3 << 30;
 80030d4:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <Motor_Init+0x1c4>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a04      	ldr	r2, [pc, #16]	@ (80030ec <Motor_Init+0x1c4>)
 80030da:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80030de:	6093      	str	r3, [r2, #8]
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020800 	.word	0x40020800
 80030ec:	40020400 	.word	0x40020400
 80030f0:	40020000 	.word	0x40020000

080030f4 <Motor_SetSpeed>:


void Motor_SetSpeed(uint8_t name,int speed,float output)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8003102:	73fb      	strb	r3, [r7, #15]
	if(name == 1)//PC8、PC6
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d121      	bne.n	800314e <Motor_SetSpeed+0x5a>
	{
		if(output >= 0)//正轉
 800310a:	edd7 7a01 	vldr	s15, [r7, #4]
 800310e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003116:	db0d      	blt.n	8003134 <Motor_SetSpeed+0x40>
		{
			GPIOC->BSRR  = 1 << 8;
 8003118:	4b47      	ldr	r3, [pc, #284]	@ (8003238 <Motor_SetSpeed+0x144>)
 800311a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800311e:	619a      	str	r2, [r3, #24]
			GPIOC->BSRR  = 1 << (6+16);
 8003120:	4b45      	ldr	r3, [pc, #276]	@ (8003238 <Motor_SetSpeed+0x144>)
 8003122:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003126:	619a      	str	r2, [r3, #24]
			PWM1_SetCompare1(speed);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	b29b      	uxth	r3, r3
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fb21 	bl	8003774 <PWM1_SetCompare1>
			GPIOB->BSRR  = 1 << (15+16);
			PWM4_SetCompare1(speed);
		}
	}

}
 8003132:	e07d      	b.n	8003230 <Motor_SetSpeed+0x13c>
			GPIOC->BSRR  = 1 << (8+16);
 8003134:	4b40      	ldr	r3, [pc, #256]	@ (8003238 <Motor_SetSpeed+0x144>)
 8003136:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800313a:	619a      	str	r2, [r3, #24]
			GPIOC->BSRR  = 1 << 6;
 800313c:	4b3e      	ldr	r3, [pc, #248]	@ (8003238 <Motor_SetSpeed+0x144>)
 800313e:	2240      	movs	r2, #64	@ 0x40
 8003140:	619a      	str	r2, [r3, #24]
			PWM1_SetCompare1(speed);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	b29b      	uxth	r3, r3
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fb14 	bl	8003774 <PWM1_SetCompare1>
}
 800314c:	e070      	b.n	8003230 <Motor_SetSpeed+0x13c>
	else if(name == 2) // PA11、PA12
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d122      	bne.n	800319a <Motor_SetSpeed+0xa6>
		if(output >= 0)//正轉
 8003154:	edd7 7a01 	vldr	s15, [r7, #4]
 8003158:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003160:	db0d      	blt.n	800317e <Motor_SetSpeed+0x8a>
			GPIOA->BSRR  = 1 << (11+16);
 8003162:	4b36      	ldr	r3, [pc, #216]	@ (800323c <Motor_SetSpeed+0x148>)
 8003164:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003168:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR  = 1 << 12;
 800316a:	4b34      	ldr	r3, [pc, #208]	@ (800323c <Motor_SetSpeed+0x148>)
 800316c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003170:	619a      	str	r2, [r3, #24]
			PWM2_SetCompare1(speed);
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	b29b      	uxth	r3, r3
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fbac 	bl	80038d4 <PWM2_SetCompare1>
}
 800317c:	e058      	b.n	8003230 <Motor_SetSpeed+0x13c>
			GPIOA->BSRR  = 1 << 11;
 800317e:	4b2f      	ldr	r3, [pc, #188]	@ (800323c <Motor_SetSpeed+0x148>)
 8003180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003184:	619a      	str	r2, [r3, #24]
			GPIOA->BSRR  = 1 << (12+16);
 8003186:	4b2d      	ldr	r3, [pc, #180]	@ (800323c <Motor_SetSpeed+0x148>)
 8003188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800318c:	619a      	str	r2, [r3, #24]
			PWM2_SetCompare1(speed);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	b29b      	uxth	r3, r3
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fb9e 	bl	80038d4 <PWM2_SetCompare1>
}
 8003198:	e04a      	b.n	8003230 <Motor_SetSpeed+0x13c>
	else if(name == 3) // PB12、PB13
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d122      	bne.n	80031e6 <Motor_SetSpeed+0xf2>
		if(output >= 0)//正轉
 80031a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80031a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ac:	db0d      	blt.n	80031ca <Motor_SetSpeed+0xd6>
			GPIOB->BSRR  = 1 << 12;
 80031ae:	4b24      	ldr	r3, [pc, #144]	@ (8003240 <Motor_SetSpeed+0x14c>)
 80031b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031b4:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << (13+16);
 80031b6:	4b22      	ldr	r3, [pc, #136]	@ (8003240 <Motor_SetSpeed+0x14c>)
 80031b8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80031bc:	619a      	str	r2, [r3, #24]
			PWM3_SetCompare1(speed);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 fc1a 	bl	80039fc <PWM3_SetCompare1>
}
 80031c8:	e032      	b.n	8003230 <Motor_SetSpeed+0x13c>
			GPIOB->BSRR  = 1 << (12+16);
 80031ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <Motor_SetSpeed+0x14c>)
 80031cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031d0:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << 13;
 80031d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <Motor_SetSpeed+0x14c>)
 80031d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031d8:	619a      	str	r2, [r3, #24]
			PWM3_SetCompare1(speed);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fc0c 	bl	80039fc <PWM3_SetCompare1>
}
 80031e4:	e024      	b.n	8003230 <Motor_SetSpeed+0x13c>
	else if(name == 4) // PB14、PB15
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d121      	bne.n	8003230 <Motor_SetSpeed+0x13c>
		if(output >= 0)//正轉
 80031ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80031f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f8:	db0d      	blt.n	8003216 <Motor_SetSpeed+0x122>
			GPIOB->BSRR  = 1 << (14+16);
 80031fa:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <Motor_SetSpeed+0x14c>)
 80031fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003200:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << 15;
 8003202:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <Motor_SetSpeed+0x14c>)
 8003204:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003208:	619a      	str	r2, [r3, #24]
			PWM4_SetCompare1(speed);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	b29b      	uxth	r3, r3
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fc88 	bl	8003b24 <PWM4_SetCompare1>
}
 8003214:	e00c      	b.n	8003230 <Motor_SetSpeed+0x13c>
			GPIOB->BSRR  = 1 << 14;
 8003216:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <Motor_SetSpeed+0x14c>)
 8003218:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800321c:	619a      	str	r2, [r3, #24]
			GPIOB->BSRR  = 1 << (15+16);
 800321e:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <Motor_SetSpeed+0x14c>)
 8003220:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003224:	619a      	str	r2, [r3, #24]
			PWM4_SetCompare1(speed);
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	b29b      	uxth	r3, r3
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fc7a 	bl	8003b24 <PWM4_SetCompare1>
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40020800 	.word	0x40020800
 800323c:	40020000 	.word	0x40020000
 8003240:	40020400 	.word	0x40020400

08003244 <OLED_W_SCL>:
#include "OLED_Font.h"


//GPIOB 8 當SCL
void OLED_W_SCL(uint8_t set)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
	if(set == 1) GPIOB->BSRR = 1 << 8;
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d104      	bne.n	800325e <OLED_W_SCL+0x1a>
 8003254:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <OLED_W_SCL+0x30>)
 8003256:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800325a:	619a      	str	r2, [r3, #24]
	else	     GPIOB->BSRR = 1 << (24);
}
 800325c:	e003      	b.n	8003266 <OLED_W_SCL+0x22>
	else	     GPIOB->BSRR = 1 << (24);
 800325e:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <OLED_W_SCL+0x30>)
 8003260:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003264:	619a      	str	r2, [r3, #24]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40020400 	.word	0x40020400

08003278 <OLED_W_SDA>:
//GPIOB 9 當SDA
void OLED_W_SDA(uint8_t set)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
	if(set == 1) GPIOB->BSRR = 1 << 9;
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d104      	bne.n	8003292 <OLED_W_SDA+0x1a>
 8003288:	4b07      	ldr	r3, [pc, #28]	@ (80032a8 <OLED_W_SDA+0x30>)
 800328a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800328e:	619a      	str	r2, [r3, #24]
	else	     GPIOB->BSRR = 1 << (25);
}
 8003290:	e003      	b.n	800329a <OLED_W_SDA+0x22>
	else	     GPIOB->BSRR = 1 << (25);
 8003292:	4b05      	ldr	r3, [pc, #20]	@ (80032a8 <OLED_W_SDA+0x30>)
 8003294:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003298:	619a      	str	r2, [r3, #24]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40020400 	.word	0x40020400

080032ac <OLED_I2C_Init>:

/*引脚初始化*/
void OLED_I2C_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
    //開啟GPIOB時鐘
    RCC->AHB1ENR |= 1 << 1;
 80032b0:	4b18      	ldr	r3, [pc, #96]	@ (8003314 <OLED_I2C_Init+0x68>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b4:	4a17      	ldr	r2, [pc, #92]	@ (8003314 <OLED_I2C_Init+0x68>)
 80032b6:	f043 0302 	orr.w	r3, r3, #2
 80032ba:	6313      	str	r3, [r2, #48]	@ 0x30

    //PB8 PB9 都OPEN DRAIN
	GPIOB->MODER  |= 1 << 16;
 80032bc:	4b16      	ldr	r3, [pc, #88]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a15      	ldr	r2, [pc, #84]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c6:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= 1 << 8;
 80032c8:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4a12      	ldr	r2, [pc, #72]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR|= 3 << 16;
 80032d4:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032da:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80032de:	6093      	str	r3, [r2, #8]

	GPIOB->MODER  |= 1 << 18;
 80032e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ea:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= 1 << 9;
 80032ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a09      	ldr	r2, [pc, #36]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032f6:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR|= 3 << 18;
 80032f8:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a06      	ldr	r2, [pc, #24]	@ (8003318 <OLED_I2C_Init+0x6c>)
 80032fe:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8003302:	6093      	str	r3, [r2, #8]
	
	OLED_W_SCL(1);
 8003304:	2001      	movs	r0, #1
 8003306:	f7ff ff9d 	bl	8003244 <OLED_W_SCL>
	OLED_W_SDA(1);
 800330a:	2001      	movs	r0, #1
 800330c:	f7ff ffb4 	bl	8003278 <OLED_W_SDA>
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	40020400 	.word	0x40020400

0800331c <OLED_I2C_Start>:
  * @brief  I2C开始
  * @param  无
  * @retval 无
  */
void OLED_I2C_Start(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 8003320:	2001      	movs	r0, #1
 8003322:	f7ff ffa9 	bl	8003278 <OLED_W_SDA>
	OLED_W_SCL(1);
 8003326:	2001      	movs	r0, #1
 8003328:	f7ff ff8c 	bl	8003244 <OLED_W_SCL>
	OLED_W_SDA(0);
 800332c:	2000      	movs	r0, #0
 800332e:	f7ff ffa3 	bl	8003278 <OLED_W_SDA>
	OLED_W_SCL(0);
 8003332:	2000      	movs	r0, #0
 8003334:	f7ff ff86 	bl	8003244 <OLED_W_SCL>
}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}

0800333c <OLED_I2C_Stop>:
  * @brief  I2C停止
  * @param  无
  * @retval 无
  */
void OLED_I2C_Stop(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 8003340:	2000      	movs	r0, #0
 8003342:	f7ff ff99 	bl	8003278 <OLED_W_SDA>
	OLED_W_SCL(1);
 8003346:	2001      	movs	r0, #1
 8003348:	f7ff ff7c 	bl	8003244 <OLED_W_SCL>
	OLED_W_SDA(1);
 800334c:	2001      	movs	r0, #1
 800334e:	f7ff ff93 	bl	8003278 <OLED_W_SDA>
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}

08003356 <OLED_I2C_SendByte>:
  * @brief  I2C发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_I2C_SendByte(uint8_t Byte)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	e016      	b.n	8003394 <OLED_I2C_SendByte+0x3e>
	{
		OLED_W_SDA(!!(Byte & (0x80 >> i)));
 8003366:	79fa      	ldrb	r2, [r7, #7]
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2180      	movs	r1, #128	@ 0x80
 800336c:	fa41 f303 	asr.w	r3, r1, r3
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	bf14      	ite	ne
 8003376:	2301      	movne	r3, #1
 8003378:	2300      	moveq	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff7b 	bl	8003278 <OLED_W_SDA>
		OLED_W_SCL(1);
 8003382:	2001      	movs	r0, #1
 8003384:	f7ff ff5e 	bl	8003244 <OLED_W_SCL>
		OLED_W_SCL(0);
 8003388:	2000      	movs	r0, #0
 800338a:	f7ff ff5b 	bl	8003244 <OLED_W_SCL>
	for (i = 0; i < 8; i++)
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	3301      	adds	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b07      	cmp	r3, #7
 8003398:	d9e5      	bls.n	8003366 <OLED_I2C_SendByte+0x10>
	}
	OLED_W_SCL(1);	//额外的一个时钟，不处理应答信号
 800339a:	2001      	movs	r0, #1
 800339c:	f7ff ff52 	bl	8003244 <OLED_W_SCL>
	OLED_W_SCL(0);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7ff ff4f 	bl	8003244 <OLED_W_SCL>
}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	4603      	mov	r3, r0
 80033b6:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 80033b8:	f7ff ffb0 	bl	800331c <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 80033bc:	2078      	movs	r0, #120	@ 0x78
 80033be:	f7ff ffca 	bl	8003356 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00);		//写命令
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7ff ffc7 	bl	8003356 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command); 
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff ffc3 	bl	8003356 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 80033d0:	f7ff ffb4 	bl	800333c <OLED_I2C_Stop>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 80033e6:	f7ff ff99 	bl	800331c <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 80033ea:	2078      	movs	r0, #120	@ 0x78
 80033ec:	f7ff ffb3 	bl	8003356 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40);		//写数据
 80033f0:	2040      	movs	r0, #64	@ 0x40
 80033f2:	f7ff ffb0 	bl	8003356 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ffac 	bl	8003356 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 80033fe:	f7ff ff9d 	bl	800333c <OLED_I2C_Stop>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	4603      	mov	r3, r0
 8003412:	460a      	mov	r2, r1
 8003414:	71fb      	strb	r3, [r7, #7]
 8003416:	4613      	mov	r3, r2
 8003418:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8003420:	b2db      	uxtb	r3, r3
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff ffc3 	bl	80033ae <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 8003428:	79bb      	ldrb	r3, [r7, #6]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	b2db      	uxtb	r3, r3
 800342e:	f043 0310 	orr.w	r3, r3, #16
 8003432:	b2db      	uxtb	r3, r3
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ffba 	bl	80033ae <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 800343a:	79bb      	ldrb	r3, [r7, #6]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	b2db      	uxtb	r3, r3
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff ffb3 	bl	80033ae <OLED_WriteCommand>
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8003456:	2300      	movs	r3, #0
 8003458:	71bb      	strb	r3, [r7, #6]
 800345a:	e014      	b.n	8003486 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 800345c:	79bb      	ldrb	r3, [r7, #6]
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ffd2 	bl	800340a <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	71fb      	strb	r3, [r7, #7]
 800346a:	e005      	b.n	8003478 <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 800346c:	2000      	movs	r0, #0
 800346e:	f7ff ffb5 	bl	80033dc <OLED_WriteData>
		for(i = 0; i < 128; i++)
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	3301      	adds	r3, #1
 8003476:	71fb      	strb	r3, [r7, #7]
 8003478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347c:	2b00      	cmp	r3, #0
 800347e:	daf5      	bge.n	800346c <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8003480:	79bb      	ldrb	r3, [r7, #6]
 8003482:	3301      	adds	r3, #1
 8003484:	71bb      	strb	r3, [r7, #6]
 8003486:	79bb      	ldrb	r3, [r7, #6]
 8003488:	2b07      	cmp	r3, #7
 800348a:	d9e7      	bls.n	800345c <OLED_Clear+0xc>
		}
	}
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{      	
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
 80034a2:	460b      	mov	r3, r1
 80034a4:	71bb      	strb	r3, [r7, #6]
 80034a6:	4613      	mov	r3, r2
 80034a8:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	79bb      	ldrb	r3, [r7, #6]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7ff ffa2 	bl	800340a <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
 80034ca:	e00e      	b.n	80034ea <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 80034cc:	797b      	ldrb	r3, [r7, #5]
 80034ce:	f1a3 0220 	sub.w	r2, r3, #32
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	491c      	ldr	r1, [pc, #112]	@ (8003548 <OLED_ShowChar+0xb0>)
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	440a      	add	r2, r1
 80034da:	4413      	add	r3, r2
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff ff7c 	bl	80033dc <OLED_WriteData>
	for (i = 0; i < 8; i++)
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	3301      	adds	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	2b07      	cmp	r3, #7
 80034ee:	d9ed      	bls.n	80034cc <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	79bb      	ldrb	r3, [r7, #6]
 8003500:	3b01      	subs	r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f7ff ff7d 	bl	800340a <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	e00f      	b.n	8003536 <OLED_ShowChar+0x9e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 8003516:	797b      	ldrb	r3, [r7, #5]
 8003518:	f1a3 0220 	sub.w	r2, r3, #32
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	3308      	adds	r3, #8
 8003520:	4909      	ldr	r1, [pc, #36]	@ (8003548 <OLED_ShowChar+0xb0>)
 8003522:	0112      	lsls	r2, r2, #4
 8003524:	440a      	add	r2, r1
 8003526:	4413      	add	r3, r2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff56 	bl	80033dc <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	3301      	adds	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b07      	cmp	r3, #7
 800353a:	d9ec      	bls.n	8003516 <OLED_ShowChar+0x7e>
	}
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	080081c8 	.word	0x080081c8

0800354c <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	603a      	str	r2, [r7, #0]
 8003556:	71fb      	strb	r3, [r7, #7]
 8003558:	460b      	mov	r3, r1
 800355a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e00e      	b.n	8003580 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 8003562:	79ba      	ldrb	r2, [r7, #6]
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	4413      	add	r3, r2
 8003568:	b2d9      	uxtb	r1, r3
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	4413      	add	r3, r2
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff ff8f 	bl	8003498 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	3301      	adds	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	4413      	add	r3, r2
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ea      	bne.n	8003562 <OLED_ShowString+0x16>
	}
}
 800358c:	bf00      	nop
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 800359c:	2300      	movs	r3, #0
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	e00c      	b.n	80035bc <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 80035a2:	2300      	movs	r3, #0
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	e002      	b.n	80035ae <OLED_Init+0x18>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	3301      	adds	r3, #1
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035b4:	d3f8      	bcc.n	80035a8 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3301      	adds	r3, #1
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035c2:	d3ee      	bcc.n	80035a2 <OLED_Init+0xc>
	}
	
	OLED_I2C_Init();			//端口初始化
 80035c4:	f7ff fe72 	bl	80032ac <OLED_I2C_Init>
	
	OLED_WriteCommand(0xAE);	//关闭显示
 80035c8:	20ae      	movs	r0, #174	@ 0xae
 80035ca:	f7ff fef0 	bl	80033ae <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80035ce:	20d5      	movs	r0, #213	@ 0xd5
 80035d0:	f7ff feed 	bl	80033ae <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 80035d4:	2080      	movs	r0, #128	@ 0x80
 80035d6:	f7ff feea 	bl	80033ae <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 80035da:	20a8      	movs	r0, #168	@ 0xa8
 80035dc:	f7ff fee7 	bl	80033ae <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 80035e0:	203f      	movs	r0, #63	@ 0x3f
 80035e2:	f7ff fee4 	bl	80033ae <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 80035e6:	20d3      	movs	r0, #211	@ 0xd3
 80035e8:	f7ff fee1 	bl	80033ae <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80035ec:	2000      	movs	r0, #0
 80035ee:	f7ff fede 	bl	80033ae <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 80035f2:	2040      	movs	r0, #64	@ 0x40
 80035f4:	f7ff fedb 	bl	80033ae <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 80035f8:	20a1      	movs	r0, #161	@ 0xa1
 80035fa:	f7ff fed8 	bl	80033ae <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 80035fe:	20c8      	movs	r0, #200	@ 0xc8
 8003600:	f7ff fed5 	bl	80033ae <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8003604:	20da      	movs	r0, #218	@ 0xda
 8003606:	f7ff fed2 	bl	80033ae <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 800360a:	2012      	movs	r0, #18
 800360c:	f7ff fecf 	bl	80033ae <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 8003610:	2081      	movs	r0, #129	@ 0x81
 8003612:	f7ff fecc 	bl	80033ae <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8003616:	20cf      	movs	r0, #207	@ 0xcf
 8003618:	f7ff fec9 	bl	80033ae <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 800361c:	20d9      	movs	r0, #217	@ 0xd9
 800361e:	f7ff fec6 	bl	80033ae <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8003622:	20f1      	movs	r0, #241	@ 0xf1
 8003624:	f7ff fec3 	bl	80033ae <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8003628:	20db      	movs	r0, #219	@ 0xdb
 800362a:	f7ff fec0 	bl	80033ae <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 800362e:	2030      	movs	r0, #48	@ 0x30
 8003630:	f7ff febd 	bl	80033ae <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8003634:	20a4      	movs	r0, #164	@ 0xa4
 8003636:	f7ff feba 	bl	80033ae <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 800363a:	20a6      	movs	r0, #166	@ 0xa6
 800363c:	f7ff feb7 	bl	80033ae <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8003640:	208d      	movs	r0, #141	@ 0x8d
 8003642:	f7ff feb4 	bl	80033ae <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8003646:	2014      	movs	r0, #20
 8003648:	f7ff feb1 	bl	80033ae <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 800364c:	20af      	movs	r0, #175	@ 0xaf
 800364e:	f7ff feae 	bl	80033ae <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 8003652:	f7ff fefd 	bl	8003450 <OLED_Clear>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <Pwm1_Init>:
#include <stm32f446xx.h>


void Pwm1_Init(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
	//開啟GPIOA、TIM1時鐘
	RCC->AHB1ENR |= 1 << 0;
 8003664:	4b40      	ldr	r3, [pc, #256]	@ (8003768 <Pwm1_Init+0x108>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003668:	4a3f      	ldr	r2, [pc, #252]	@ (8003768 <Pwm1_Init+0x108>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= 1 << 0;
 8003670:	4b3d      	ldr	r3, [pc, #244]	@ (8003768 <Pwm1_Init+0x108>)
 8003672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003674:	4a3c      	ldr	r2, [pc, #240]	@ (8003768 <Pwm1_Init+0x108>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6453      	str	r3, [r2, #68]	@ 0x44

	//tim1 PWM輸出復用功能
	GPIOA->AFR[1] &= ~(0xF << 0);
 800367c:	4b3b      	ldr	r3, [pc, #236]	@ (800376c <Pwm1_Init+0x10c>)
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	4a3a      	ldr	r2, [pc, #232]	@ (800376c <Pwm1_Init+0x10c>)
 8003682:	f023 030f 	bic.w	r3, r3, #15
 8003686:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (1 << 0);
 8003688:	4b38      	ldr	r3, [pc, #224]	@ (800376c <Pwm1_Init+0x10c>)
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	4a37      	ldr	r2, [pc, #220]	@ (800376c <Pwm1_Init+0x10c>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6253      	str	r3, [r2, #36]	@ 0x24


	//設置PA8為復用推挽輸出
	GPIOA->MODER  &=~(3 << 16);
 8003694:	4b35      	ldr	r3, [pc, #212]	@ (800376c <Pwm1_Init+0x10c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a34      	ldr	r2, [pc, #208]	@ (800376c <Pwm1_Init+0x10c>)
 800369a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800369e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 16;
 80036a0:	4b32      	ldr	r3, [pc, #200]	@ (800376c <Pwm1_Init+0x10c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a31      	ldr	r2, [pc, #196]	@ (800376c <Pwm1_Init+0x10c>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036aa:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 8);
 80036ac:	4b2f      	ldr	r3, [pc, #188]	@ (800376c <Pwm1_Init+0x10c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a2e      	ldr	r2, [pc, #184]	@ (800376c <Pwm1_Init+0x10c>)
 80036b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036b6:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 16;
 80036b8:	4b2c      	ldr	r3, [pc, #176]	@ (800376c <Pwm1_Init+0x10c>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a2b      	ldr	r2, [pc, #172]	@ (800376c <Pwm1_Init+0x10c>)
 80036be:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80036c2:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM1->SMCR &= ~(7 << 0);
 80036c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003770 <Pwm1_Init+0x110>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	4a29      	ldr	r2, [pc, #164]	@ (8003770 <Pwm1_Init+0x110>)
 80036ca:	f023 0307 	bic.w	r3, r3, #7
 80036ce:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM1->PSC = 4-1;
 80036d0:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <Pwm1_Init+0x110>)
 80036d2:	2203      	movs	r2, #3
 80036d4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = 1000-1;
 80036d6:	4b26      	ldr	r3, [pc, #152]	@ (8003770 <Pwm1_Init+0x110>)
 80036d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	
	//設置自動裝載、計數方向、始能計數器
	TIM1->CR1 |=  1 << 7;
 80036de:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <Pwm1_Init+0x110>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a23      	ldr	r2, [pc, #140]	@ (8003770 <Pwm1_Init+0x110>)
 80036e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036e8:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(1 << 4);
 80036ea:	4b21      	ldr	r3, [pc, #132]	@ (8003770 <Pwm1_Init+0x110>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a20      	ldr	r2, [pc, #128]	@ (8003770 <Pwm1_Init+0x110>)
 80036f0:	f023 0310 	bic.w	r3, r3, #16
 80036f4:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |=  1 << 0;
 80036f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003770 <Pwm1_Init+0x110>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003770 <Pwm1_Init+0x110>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6013      	str	r3, [r2, #0]
	
    //設置初始化計數器
	TIM1->EGR |=  1 << 0;
 8003702:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <Pwm1_Init+0x110>)
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	4a1a      	ldr	r2, [pc, #104]	@ (8003770 <Pwm1_Init+0x110>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);
	
    //設置PWM模式、輸出比較自動裝載
	TIM1->CCMR1 &= ~(7 << 4);
 800370e:	4b18      	ldr	r3, [pc, #96]	@ (8003770 <Pwm1_Init+0x110>)
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	4a17      	ldr	r2, [pc, #92]	@ (8003770 <Pwm1_Init+0x110>)
 8003714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003718:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |=   6 << 4;
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <Pwm1_Init+0x110>)
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <Pwm1_Init+0x110>)
 8003720:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003724:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |=   1 << 3;
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <Pwm1_Init+0x110>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	4a11      	ldr	r2, [pc, #68]	@ (8003770 <Pwm1_Init+0x110>)
 800372c:	f043 0308 	orr.w	r3, r3, #8
 8003730:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM1->CCR1  = 0;
 8003732:	4b0f      	ldr	r3, [pc, #60]	@ (8003770 <Pwm1_Init+0x110>)
 8003734:	2200      	movs	r2, #0
 8003736:	635a      	str	r2, [r3, #52]	@ 0x34
	
    //設置輸出比較始能、輸出極性
	TIM1->CCER  |=   1 << 0;
 8003738:	4b0d      	ldr	r3, [pc, #52]	@ (8003770 <Pwm1_Init+0x110>)
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4a0c      	ldr	r2, [pc, #48]	@ (8003770 <Pwm1_Init+0x110>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6213      	str	r3, [r2, #32]
	TIM1->CCER  &= ~(1 << 1);
 8003744:	4b0a      	ldr	r3, [pc, #40]	@ (8003770 <Pwm1_Init+0x110>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4a09      	ldr	r2, [pc, #36]	@ (8003770 <Pwm1_Init+0x110>)
 800374a:	f023 0302 	bic.w	r3, r3, #2
 800374e:	6213      	str	r3, [r2, #32]
	
	TIM1->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)
 8003750:	4b07      	ldr	r3, [pc, #28]	@ (8003770 <Pwm1_Init+0x110>)
 8003752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003754:	4a06      	ldr	r2, [pc, #24]	@ (8003770 <Pwm1_Init+0x110>)
 8003756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800375a:	6453      	str	r3, [r2, #68]	@ 0x44

	//TIM_Cmd(TIM1, ENABLE);

}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
 800376c:	40020000 	.word	0x40020000
 8003770:	40010000 	.word	0x40010000

08003774 <PWM1_SetCompare1>:

void PWM1_SetCompare1(uint16_t Compare)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM1->CCR1 = Compare;
 800377e:	4a04      	ldr	r2, [pc, #16]	@ (8003790 <PWM1_SetCompare1+0x1c>)
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40010000 	.word	0x40010000

08003794 <Pwm2_Init>:
#include <stm32f446xx.h>

//使用TIM2 CH1 PA0當PWM輸出
void Pwm2_Init(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
	//開啟GPIOA、TIM1時鐘
	RCC->AHB1ENR |= 1 << 0;
 8003798:	4b4c      	ldr	r3, [pc, #304]	@ (80038cc <Pwm2_Init+0x138>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379c:	4a4b      	ldr	r2, [pc, #300]	@ (80038cc <Pwm2_Init+0x138>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= 1 << 0;
 80037a4:	4b49      	ldr	r3, [pc, #292]	@ (80038cc <Pwm2_Init+0x138>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	4a48      	ldr	r2, [pc, #288]	@ (80038cc <Pwm2_Init+0x138>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6413      	str	r3, [r2, #64]	@ 0x40

	//PA0當TIM2復用
	GPIOA->AFR[0] &= ~(0xF << 0);
 80037b0:	4b47      	ldr	r3, [pc, #284]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a46      	ldr	r2, [pc, #280]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037b6:	f023 030f 	bic.w	r3, r3, #15
 80037ba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (1 << 0);
 80037bc:	4b44      	ldr	r3, [pc, #272]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a43      	ldr	r2, [pc, #268]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6213      	str	r3, [r2, #32]


	//設置PA0為復用推挽輸出
	GPIOA->MODER  &=~(3 << 0);
 80037c8:	4b41      	ldr	r3, [pc, #260]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a40      	ldr	r2, [pc, #256]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037ce:	f023 0303 	bic.w	r3, r3, #3
 80037d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 0;
 80037d4:	4b3e      	ldr	r3, [pc, #248]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a3d      	ldr	r2, [pc, #244]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037da:	f043 0302 	orr.w	r3, r3, #2
 80037de:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 0);
 80037e0:	4b3b      	ldr	r3, [pc, #236]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a3a      	ldr	r2, [pc, #232]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037e6:	f023 0301 	bic.w	r3, r3, #1
 80037ea:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 0;
 80037ec:	4b38      	ldr	r3, [pc, #224]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a37      	ldr	r2, [pc, #220]	@ (80038d0 <Pwm2_Init+0x13c>)
 80037f2:	f043 0303 	orr.w	r3, r3, #3
 80037f6:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM2->SMCR &= ~(7 << 0);
 80037f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003802:	f023 0307 	bic.w	r3, r3, #7
 8003806:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM2->PSC = 4-1;
 8003808:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800380c:	2203      	movs	r2, #3
 800380e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1000-1;
 8003810:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003814:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003818:	62da      	str	r2, [r3, #44]	@ 0x2c

	//設置自動裝載、計數方向、始能計數器
	TIM2->CR1 |=  1 << 7;
 800381a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003828:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(1 << 4);
 800382a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003834:	f023 0310 	bic.w	r3, r3, #16
 8003838:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |=  1 << 0;
 800383a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6013      	str	r3, [r2, #0]

    //設置初始化計數器
	TIM2->EGR |=  1 << 0;
 800384a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);

    //設置PWM模式、輸出比較自動裝載
	TIM2->CCMR1 &= ~(7 << 4);
 800385a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003868:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=   6 << 4;
 800386a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003874:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003878:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=   1 << 3;
 800387a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003884:	f043 0308 	orr.w	r3, r3, #8
 8003888:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM2->CCR1  = 0;
 800388a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800388e:	2200      	movs	r2, #0
 8003890:	635a      	str	r2, [r3, #52]	@ 0x34

    //設置輸出比較始能、輸出極性
	TIM2->CCER  |=   1 << 0;
 8003892:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6213      	str	r3, [r2, #32]
	TIM2->CCER  &= ~(1 << 1);
 80038a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038ac:	f023 0302 	bic.w	r3, r3, #2
 80038b0:	6213      	str	r3, [r2, #32]

	TIM2->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)
 80038b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80038b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038c0:	6453      	str	r3, [r2, #68]	@ 0x44

	//TIM_Cmd(TIM1, ENABLE);

}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020000 	.word	0x40020000

080038d4 <PWM2_SetCompare1>:

void PWM2_SetCompare1(uint16_t Compare)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM2->CCR1 = Compare;
 80038de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <Pwm3_Init>:
#include <stm32f446xx.h>


void Pwm3_Init(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
	//開啟GPIOA、TIM3時鐘
	RCC->AHB1ENR |= 1 << 0;
 80038f8:	4b3d      	ldr	r3, [pc, #244]	@ (80039f0 <Pwm3_Init+0xfc>)
 80038fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fc:	4a3c      	ldr	r2, [pc, #240]	@ (80039f0 <Pwm3_Init+0xfc>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= 1 << 1;
 8003904:	4b3a      	ldr	r3, [pc, #232]	@ (80039f0 <Pwm3_Init+0xfc>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	4a39      	ldr	r2, [pc, #228]	@ (80039f0 <Pwm3_Init+0xfc>)
 800390a:	f043 0302 	orr.w	r3, r3, #2
 800390e:	6413      	str	r3, [r2, #64]	@ 0x40

	//Tim3 PWM輸出復用功能 使用TIM3_CH1通道PA6
	GPIOA->AFR[0] &= ~(0xF << 24);
 8003910:	4b38      	ldr	r3, [pc, #224]	@ (80039f4 <Pwm3_Init+0x100>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4a37      	ldr	r2, [pc, #220]	@ (80039f4 <Pwm3_Init+0x100>)
 8003916:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800391a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (2 << 24);
 800391c:	4b35      	ldr	r3, [pc, #212]	@ (80039f4 <Pwm3_Init+0x100>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	4a34      	ldr	r2, [pc, #208]	@ (80039f4 <Pwm3_Init+0x100>)
 8003922:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003926:	6213      	str	r3, [r2, #32]


	//設置PA6為復用推挽輸出
	GPIOA->MODER  &=~(3 << 12);
 8003928:	4b32      	ldr	r3, [pc, #200]	@ (80039f4 <Pwm3_Init+0x100>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a31      	ldr	r2, [pc, #196]	@ (80039f4 <Pwm3_Init+0x100>)
 800392e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003932:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 12;
 8003934:	4b2f      	ldr	r3, [pc, #188]	@ (80039f4 <Pwm3_Init+0x100>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2e      	ldr	r2, [pc, #184]	@ (80039f4 <Pwm3_Init+0x100>)
 800393a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800393e:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 6);
 8003940:	4b2c      	ldr	r3, [pc, #176]	@ (80039f4 <Pwm3_Init+0x100>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a2b      	ldr	r2, [pc, #172]	@ (80039f4 <Pwm3_Init+0x100>)
 8003946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800394a:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 12;
 800394c:	4b29      	ldr	r3, [pc, #164]	@ (80039f4 <Pwm3_Init+0x100>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a28      	ldr	r2, [pc, #160]	@ (80039f4 <Pwm3_Init+0x100>)
 8003952:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8003956:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM3->SMCR &= ~(7 << 0);
 8003958:	4b27      	ldr	r3, [pc, #156]	@ (80039f8 <Pwm3_Init+0x104>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a26      	ldr	r2, [pc, #152]	@ (80039f8 <Pwm3_Init+0x104>)
 800395e:	f023 0307 	bic.w	r3, r3, #7
 8003962:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM3->PSC = 4-1;
 8003964:	4b24      	ldr	r3, [pc, #144]	@ (80039f8 <Pwm3_Init+0x104>)
 8003966:	2203      	movs	r2, #3
 8003968:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 1000-1;
 800396a:	4b23      	ldr	r3, [pc, #140]	@ (80039f8 <Pwm3_Init+0x104>)
 800396c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003970:	62da      	str	r2, [r3, #44]	@ 0x2c

	//設置自動裝載、計數方向、始能計數器
	TIM3->CR1 |=  1 << 7;
 8003972:	4b21      	ldr	r3, [pc, #132]	@ (80039f8 <Pwm3_Init+0x104>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a20      	ldr	r2, [pc, #128]	@ (80039f8 <Pwm3_Init+0x104>)
 8003978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800397c:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~(1 << 4);
 800397e:	4b1e      	ldr	r3, [pc, #120]	@ (80039f8 <Pwm3_Init+0x104>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1d      	ldr	r2, [pc, #116]	@ (80039f8 <Pwm3_Init+0x104>)
 8003984:	f023 0310 	bic.w	r3, r3, #16
 8003988:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |=  1 << 0;
 800398a:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <Pwm3_Init+0x104>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1a      	ldr	r2, [pc, #104]	@ (80039f8 <Pwm3_Init+0x104>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6013      	str	r3, [r2, #0]

    //設置初始化計數器
	TIM3->EGR |=  1 << 0;
 8003996:	4b18      	ldr	r3, [pc, #96]	@ (80039f8 <Pwm3_Init+0x104>)
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <Pwm3_Init+0x104>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);

    //設置PWM模式、輸出比較自動裝載
	TIM3->CCMR1 &= ~(7 << 4);
 80039a2:	4b15      	ldr	r3, [pc, #84]	@ (80039f8 <Pwm3_Init+0x104>)
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	4a14      	ldr	r2, [pc, #80]	@ (80039f8 <Pwm3_Init+0x104>)
 80039a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ac:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=   6 << 4;
 80039ae:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <Pwm3_Init+0x104>)
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	4a11      	ldr	r2, [pc, #68]	@ (80039f8 <Pwm3_Init+0x104>)
 80039b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80039b8:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=   1 << 3;
 80039ba:	4b0f      	ldr	r3, [pc, #60]	@ (80039f8 <Pwm3_Init+0x104>)
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	4a0e      	ldr	r2, [pc, #56]	@ (80039f8 <Pwm3_Init+0x104>)
 80039c0:	f043 0308 	orr.w	r3, r3, #8
 80039c4:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM3->CCR1  = 0;
 80039c6:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <Pwm3_Init+0x104>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	635a      	str	r2, [r3, #52]	@ 0x34

    //設置輸出比較始能、輸出極性
	TIM3->CCER  |=   1 << 0;
 80039cc:	4b0a      	ldr	r3, [pc, #40]	@ (80039f8 <Pwm3_Init+0x104>)
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4a09      	ldr	r2, [pc, #36]	@ (80039f8 <Pwm3_Init+0x104>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6213      	str	r3, [r2, #32]
	TIM3->CCER  &= ~(1 << 1);
 80039d8:	4b07      	ldr	r3, [pc, #28]	@ (80039f8 <Pwm3_Init+0x104>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a06      	ldr	r2, [pc, #24]	@ (80039f8 <Pwm3_Init+0x104>)
 80039de:	f023 0302 	bic.w	r3, r3, #2
 80039e2:	6213      	str	r3, [r2, #32]

//	TIM3->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)

	//TIM_Cmd(TIM1, ENABLE);

}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40020000 	.word	0x40020000
 80039f8:	40000400 	.word	0x40000400

080039fc <PWM3_SetCompare1>:

void PWM3_SetCompare1(uint16_t Compare)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM3->CCR1 = Compare;
 8003a06:	4a04      	ldr	r2, [pc, #16]	@ (8003a18 <PWM3_SetCompare1+0x1c>)
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40000400 	.word	0x40000400

08003a1c <Pwm4_Init>:
#include <stm32f446xx.h>

//使用TIM4 CH1 PB6當PWM輸出
void Pwm4_Init(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
	//開啟GPIOB、TIM4時鐘
	RCC->AHB1ENR |= 1 << 1;
 8003a20:	4b3d      	ldr	r3, [pc, #244]	@ (8003b18 <Pwm4_Init+0xfc>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	4a3c      	ldr	r2, [pc, #240]	@ (8003b18 <Pwm4_Init+0xfc>)
 8003a26:	f043 0302 	orr.w	r3, r3, #2
 8003a2a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= 1 << 2;
 8003a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b18 <Pwm4_Init+0xfc>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	4a39      	ldr	r2, [pc, #228]	@ (8003b18 <Pwm4_Init+0xfc>)
 8003a32:	f043 0304 	orr.w	r3, r3, #4
 8003a36:	6413      	str	r3, [r2, #64]	@ 0x40

	//PB6當TIM4復用
	GPIOB->AFR[0] &= ~(0xF << 24);
 8003a38:	4b38      	ldr	r3, [pc, #224]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4a37      	ldr	r2, [pc, #220]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a3e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8003a42:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=  (2 << 24);
 8003a44:	4b35      	ldr	r3, [pc, #212]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4a34      	ldr	r2, [pc, #208]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a4e:	6213      	str	r3, [r2, #32]


	//設置PB6為復用推挽輸出
	GPIOB->MODER  &=~(3 << 12);
 8003a50:	4b32      	ldr	r3, [pc, #200]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a31      	ldr	r2, [pc, #196]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a5a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER  |=  2 << 12;
 8003a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a2e      	ldr	r2, [pc, #184]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a66:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER &=~(1 << 6);
 8003a68:	4b2c      	ldr	r3, [pc, #176]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a2b      	ldr	r2, [pc, #172]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a72:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR|=  3 << 12;
 8003a74:	4b29      	ldr	r3, [pc, #164]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a28      	ldr	r2, [pc, #160]	@ (8003b1c <Pwm4_Init+0x100>)
 8003a7a:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8003a7e:	6093      	str	r3, [r2, #8]


    //設置使用內部時鐘
//	TIM_InternalClockConfig(TIM2);
	TIM4->SMCR &= ~(7 << 0);
 8003a80:	4b27      	ldr	r3, [pc, #156]	@ (8003b20 <Pwm4_Init+0x104>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a26      	ldr	r2, [pc, #152]	@ (8003b20 <Pwm4_Init+0x104>)
 8003a86:	f023 0307 	bic.w	r3, r3, #7
 8003a8a:	6093      	str	r3, [r2, #8]


    //設置計數目標值和預分頻值
	//21kHZ
	TIM4->PSC = 4-1;
 8003a8c:	4b24      	ldr	r3, [pc, #144]	@ (8003b20 <Pwm4_Init+0x104>)
 8003a8e:	2203      	movs	r2, #3
 8003a90:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 1000-1;
 8003a92:	4b23      	ldr	r3, [pc, #140]	@ (8003b20 <Pwm4_Init+0x104>)
 8003a94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a98:	62da      	str	r2, [r3, #44]	@ 0x2c

	//設置自動裝載、計數方向、始能計數器
	TIM4->CR1 |=  1 << 7;
 8003a9a:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <Pwm4_Init+0x104>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a20      	ldr	r2, [pc, #128]	@ (8003b20 <Pwm4_Init+0x104>)
 8003aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aa4:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~(1 << 4);
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b20 <Pwm4_Init+0x104>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8003b20 <Pwm4_Init+0x104>)
 8003aac:	f023 0310 	bic.w	r3, r3, #16
 8003ab0:	6013      	str	r3, [r2, #0]
	TIM4->CR1 |=  1 << 0;
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b20 <Pwm4_Init+0x104>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8003b20 <Pwm4_Init+0x104>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6013      	str	r3, [r2, #0]

    //設置初始化計數器
	TIM4->EGR |=  1 << 0;
 8003abe:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <Pwm4_Init+0x104>)
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4a17      	ldr	r2, [pc, #92]	@ (8003b20 <Pwm4_Init+0x104>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6153      	str	r3, [r2, #20]
//	TIM_OCInitStructure.TIM_OutputState  = TIM_OutputState_Enable;
//	TIM_OCInitStructure.TIM_Pulse        = 0;//CCR的值
//	TIM_OC2Init(TIM2, &TIM_OCInitStructure);

    //設置PWM模式、輸出比較自動裝載
	TIM4->CCMR1 &= ~(7 << 4);
 8003aca:	4b15      	ldr	r3, [pc, #84]	@ (8003b20 <Pwm4_Init+0x104>)
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	4a14      	ldr	r2, [pc, #80]	@ (8003b20 <Pwm4_Init+0x104>)
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad4:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=   6 << 4;
 8003ad6:	4b12      	ldr	r3, [pc, #72]	@ (8003b20 <Pwm4_Init+0x104>)
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	4a11      	ldr	r2, [pc, #68]	@ (8003b20 <Pwm4_Init+0x104>)
 8003adc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ae0:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |=   1 << 3;
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b20 <Pwm4_Init+0x104>)
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8003b20 <Pwm4_Init+0x104>)
 8003ae8:	f043 0308 	orr.w	r3, r3, #8
 8003aec:	6193      	str	r3, [r2, #24]
//	TIM2->CCMR2 &= ~(7 << 4);
//	TIM2->CCMR2 |=   6 << 4;
//	TIM2->CCMR2 |=   1 << 3;

    //設置CCR值
	TIM4->CCR1  = 0;
 8003aee:	4b0c      	ldr	r3, [pc, #48]	@ (8003b20 <Pwm4_Init+0x104>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	635a      	str	r2, [r3, #52]	@ 0x34

    //設置輸出比較始能、輸出極性
	TIM4->CCER  |=   1 << 0;
 8003af4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b20 <Pwm4_Init+0x104>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4a09      	ldr	r2, [pc, #36]	@ (8003b20 <Pwm4_Init+0x104>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	6213      	str	r3, [r2, #32]
	TIM4->CCER  &= ~(1 << 1);
 8003b00:	4b07      	ldr	r3, [pc, #28]	@ (8003b20 <Pwm4_Init+0x104>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4a06      	ldr	r2, [pc, #24]	@ (8003b20 <Pwm4_Init+0x104>)
 8003b06:	f023 0302 	bic.w	r3, r3, #2
 8003b0a:	6213      	str	r3, [r2, #32]

//	TIM2->BDTR |= 1 << 15;  // MOE = 1 (Main Output Enable)

	//TIM_Cmd(TIM1, ENABLE);

}
 8003b0c:	bf00      	nop
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40020400 	.word	0x40020400
 8003b20:	40000800 	.word	0x40000800

08003b24 <PWM4_SetCompare1>:

void PWM4_SetCompare1(uint16_t Compare)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	80fb      	strh	r3, [r7, #6]
//	TIM_SetCompare2(TIM2, Compare);
	TIM4->CCR1 = Compare;
 8003b2e:	4a04      	ldr	r2, [pc, #16]	@ (8003b40 <PWM4_SetCompare1+0x1c>)
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40000800 	.word	0x40000800

08003b44 <__NVIC_SetPriority>:
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	6039      	str	r1, [r7, #0]
 8003b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	db0a      	blt.n	8003b6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	490c      	ldr	r1, [pc, #48]	@ (8003b90 <__NVIC_SetPriority+0x4c>)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	0112      	lsls	r2, r2, #4
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	440b      	add	r3, r1
 8003b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003b6c:	e00a      	b.n	8003b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	4908      	ldr	r1, [pc, #32]	@ (8003b94 <__NVIC_SetPriority+0x50>)
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	3b04      	subs	r3, #4
 8003b7c:	0112      	lsls	r2, r2, #4
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	440b      	add	r3, r1
 8003b82:	761a      	strb	r2, [r3, #24]
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	e000e100 	.word	0xe000e100
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <Serial_Init>:
  * 函    数：串口初始化
  * 参    数：无
  * 返 回 值：无
  */
void Serial_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0

	//開啟USART1、GPIOA時鐘
	RCC->APB2ENR |= 1 << 4;
 8003b9c:	4b49      	ldr	r3, [pc, #292]	@ (8003cc4 <Serial_Init+0x12c>)
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba0:	4a48      	ldr	r2, [pc, #288]	@ (8003cc4 <Serial_Init+0x12c>)
 8003ba2:	f043 0310 	orr.w	r3, r3, #16
 8003ba6:	6453      	str	r3, [r2, #68]	@ 0x44
	RCC->AHB1ENR |= 1 << 0;
 8003ba8:	4b46      	ldr	r3, [pc, #280]	@ (8003cc4 <Serial_Init+0x12c>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bac:	4a45      	ldr	r2, [pc, #276]	@ (8003cc4 <Serial_Init+0x12c>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6313      	str	r3, [r2, #48]	@ 0x30
	

	//PA9為TX復用輸出、PA10為RX上拉輸入
	GPIOA->AFR[1] &= ~(0xF << 4);  // 清除 AFRH9（PA9）
 8003bb4:	4b44      	ldr	r3, [pc, #272]	@ (8003cc8 <Serial_Init+0x130>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	4a43      	ldr	r2, [pc, #268]	@ (8003cc8 <Serial_Init+0x130>)
 8003bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bbe:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (7 << 4);    // AF7 = USART1_TX
 8003bc0:	4b41      	ldr	r3, [pc, #260]	@ (8003cc8 <Serial_Init+0x130>)
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	4a40      	ldr	r2, [pc, #256]	@ (8003cc8 <Serial_Init+0x130>)
 8003bc6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8003bca:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] &= ~(0xF << 8);  // 清除 AFRH10（PA10）
 8003bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8003cc8 <Serial_Init+0x130>)
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8003cc8 <Serial_Init+0x130>)
 8003bd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bd6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOA->AFR[1] |=  (7 << 8);    // AF7 = USART1_RX
 8003bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc8 <Serial_Init+0x130>)
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8003cc8 <Serial_Init+0x130>)
 8003bde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003be2:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOA->MODER &= ~(3 << 18);  // 清 PA9 模式位
 8003be4:	4b38      	ldr	r3, [pc, #224]	@ (8003cc8 <Serial_Init+0x130>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a37      	ldr	r2, [pc, #220]	@ (8003cc8 <Serial_Init+0x130>)
 8003bea:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8003bee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |=  2 << 18;
 8003bf0:	4b35      	ldr	r3, [pc, #212]	@ (8003cc8 <Serial_Init+0x130>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a34      	ldr	r2, [pc, #208]	@ (8003cc8 <Serial_Init+0x130>)
 8003bf6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003bfa:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &=~(1 << 9);
 8003bfc:	4b32      	ldr	r3, [pc, #200]	@ (8003cc8 <Serial_Init+0x130>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a31      	ldr	r2, [pc, #196]	@ (8003cc8 <Serial_Init+0x130>)
 8003c02:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c06:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR|=  3 << 18;
 8003c08:	4b2f      	ldr	r3, [pc, #188]	@ (8003cc8 <Serial_Init+0x130>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003cc8 <Serial_Init+0x130>)
 8003c0e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8003c12:	6093      	str	r3, [r2, #8]
	
	GPIOA->MODER &= ~(3 << 20);  // PA10 模式為輸入或 AF
 8003c14:	4b2c      	ldr	r3, [pc, #176]	@ (8003cc8 <Serial_Init+0x130>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc8 <Serial_Init+0x130>)
 8003c1a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003c1e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (2 << 20);  // 設為 AF 模式
 8003c20:	4b29      	ldr	r3, [pc, #164]	@ (8003cc8 <Serial_Init+0x130>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a28      	ldr	r2, [pc, #160]	@ (8003cc8 <Serial_Init+0x130>)
 8003c26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c2a:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3 << 20);
 8003c2c:	4b26      	ldr	r3, [pc, #152]	@ (8003cc8 <Serial_Init+0x130>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a25      	ldr	r2, [pc, #148]	@ (8003cc8 <Serial_Init+0x130>)
 8003c32:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003c36:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (1 << 20);  // 上拉
 8003c38:	4b23      	ldr	r3, [pc, #140]	@ (8003cc8 <Serial_Init+0x130>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4a22      	ldr	r2, [pc, #136]	@ (8003cc8 <Serial_Init+0x130>)
 8003c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c42:	60d3      	str	r3, [r2, #12]



	//設置字長(8位元)、校驗(不使用)、發送始能、接收始能
	USART1->CR1 &= ~(1 << 12);
 8003c44:	4b21      	ldr	r3, [pc, #132]	@ (8003ccc <Serial_Init+0x134>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	4a20      	ldr	r2, [pc, #128]	@ (8003ccc <Serial_Init+0x134>)
 8003c4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c4e:	60d3      	str	r3, [r2, #12]
	USART1->CR1 &= ~(1 << 10);
 8003c50:	4b1e      	ldr	r3, [pc, #120]	@ (8003ccc <Serial_Init+0x134>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a1d      	ldr	r2, [pc, #116]	@ (8003ccc <Serial_Init+0x134>)
 8003c56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c5a:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= 1 << 3;
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ccc <Serial_Init+0x134>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4a1a      	ldr	r2, [pc, #104]	@ (8003ccc <Serial_Init+0x134>)
 8003c62:	f043 0308 	orr.w	r3, r3, #8
 8003c66:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= 1 << 2;
 8003c68:	4b18      	ldr	r3, [pc, #96]	@ (8003ccc <Serial_Init+0x134>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	@ (8003ccc <Serial_Init+0x134>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	60d3      	str	r3, [r2, #12]

	//設置停止位(1bit)
	USART1->CR2 &= ~(3 << 12);
 8003c74:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <Serial_Init+0x134>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	4a14      	ldr	r2, [pc, #80]	@ (8003ccc <Serial_Init+0x134>)
 8003c7a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c7e:	6113      	str	r3, [r2, #16]

	//設置硬體流控(不用)
	USART1->CR3 &= ~(7 << 8);
 8003c80:	4b12      	ldr	r3, [pc, #72]	@ (8003ccc <Serial_Init+0x134>)
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	4a11      	ldr	r2, [pc, #68]	@ (8003ccc <Serial_Init+0x134>)
 8003c86:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c8a:	6153      	str	r3, [r2, #20]

	//設定波特律(115200*10)
	USART1->BRR = (4 << 4) | (9 & 0xF);
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <Serial_Init+0x134>)
 8003c8e:	2249      	movs	r2, #73	@ 0x49
 8003c90:	609a      	str	r2, [r3, #8]


	//設置當RXNE為1時，產生USART1中斷
	USART1->CR1 |= 1 << 5;
 8003c92:	4b0e      	ldr	r3, [pc, #56]	@ (8003ccc <Serial_Init+0x134>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	4a0d      	ldr	r2, [pc, #52]	@ (8003ccc <Serial_Init+0x134>)
 8003c98:	f043 0320 	orr.w	r3, r3, #32
 8003c9c:	60d3      	str	r3, [r2, #12]

	//設置USART始能
	USART1->CR1 |= 1 << 13;
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <Serial_Init+0x134>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ccc <Serial_Init+0x134>)
 8003ca4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ca8:	60d3      	str	r3, [r2, #12]

	//設置NVIC打開USART1的IRQHandler
	NVIC->ISER[1] |= 1 << 5;  //位置在37
 8003caa:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <Serial_Init+0x138>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4a08      	ldr	r2, [pc, #32]	@ (8003cd0 <Serial_Init+0x138>)
 8003cb0:	f043 0320 	orr.w	r3, r3, #32
 8003cb4:	6053      	str	r3, [r2, #4]

	NVIC_SetPriority(USART1_IRQn, 7); // OK
 8003cb6:	2107      	movs	r1, #7
 8003cb8:	2025      	movs	r0, #37	@ 0x25
 8003cba:	f7ff ff43 	bl	8003b44 <__NVIC_SetPriority>

}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40020000 	.word	0x40020000
 8003ccc:	40011000 	.word	0x40011000
 8003cd0:	e000e100 	.word	0xe000e100

08003cd4 <Serial_SendByte>:
  * 函    数：串口发送一个字节
  * 参    数：Byte 要发送的一个字节
  * 返 回 值：无
  */
void Serial_SendByte(uint8_t Byte)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
	//將字節寫入TDR
	USART1->DR = Byte & (uint16_t)0x1FF;
 8003cde:	4a08      	ldr	r2, [pc, #32]	@ (8003d00 <Serial_SendByte+0x2c>)
 8003ce0:	79fb      	ldrb	r3, [r7, #7]
 8003ce2:	6053      	str	r3, [r2, #4]
	//判斷TDR是否為空，若空了代表已經送到移位暫存器內，會被設置成1
	while( ( USART1->SR & (1 << 7) ) == 0);
 8003ce4:	bf00      	nop
 8003ce6:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <Serial_SendByte+0x2c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f9      	beq.n	8003ce6 <Serial_SendByte+0x12>
}
 8003cf2:	bf00      	nop
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	40011000 	.word	0x40011000

08003d04 <USART1_IRQHandler>:
  * 注意事项：此函数为中断函数，无需调用，中断触发后自动执行
  *           函数名为预留的指定名称，可以从启动文件复制
  *           请确保函数名正确，不能有任何差异，否则中断函数将不能进入
  */
void USART1_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0


	static uint8_t RxState = 0;
	static uint8_t Data_L,Data_H;

	if ( USART1->SR & (1 << 5) )
 8003d0a:	4b65      	ldr	r3, [pc, #404]	@ (8003ea0 <USART1_IRQHandler+0x19c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80bf 	beq.w	8003e96 <USART1_IRQHandler+0x192>
	{
		uint8_t RxData = USART1->DR;
 8003d18:	4b61      	ldr	r3, [pc, #388]	@ (8003ea0 <USART1_IRQHandler+0x19c>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	71fb      	strb	r3, [r7, #7]


		//Start
		if (RxState == 0)
 8003d1e:	4b61      	ldr	r3, [pc, #388]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d107      	bne.n	8003d36 <USART1_IRQHandler+0x32>
		{
			if (RxData == 0xFF)
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	2bff      	cmp	r3, #255	@ 0xff
 8003d2a:	f040 80ae 	bne.w	8003e8a <USART1_IRQHandler+0x186>
			{
				RxState = 1;
 8003d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	e0a9      	b.n	8003e8a <USART1_IRQHandler+0x186>
			}
		}

		//1st
		else if(RxState == 1)
 8003d36:	4b5b      	ldr	r3, [pc, #364]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d106      	bne.n	8003d4c <USART1_IRQHandler+0x48>
		{
			Data_L = RxData;
 8003d3e:	4a5a      	ldr	r2, [pc, #360]	@ (8003ea8 <USART1_IRQHandler+0x1a4>)
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	7013      	strb	r3, [r2, #0]
			RxState = 2;
 8003d44:	4b57      	ldr	r3, [pc, #348]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003d46:	2202      	movs	r2, #2
 8003d48:	701a      	strb	r2, [r3, #0]
 8003d4a:	e09e      	b.n	8003e8a <USART1_IRQHandler+0x186>
		}
		else if(RxState == 2)
 8003d4c:	4b55      	ldr	r3, [pc, #340]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d112      	bne.n	8003d7a <USART1_IRQHandler+0x76>
		{
			Data_H = RxData;
 8003d54:	4a55      	ldr	r2, [pc, #340]	@ (8003eac <USART1_IRQHandler+0x1a8>)
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[0] = (Data_H << 6) | Data_L;
 8003d5a:	4b54      	ldr	r3, [pc, #336]	@ (8003eac <USART1_IRQHandler+0x1a8>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	019b      	lsls	r3, r3, #6
 8003d60:	b21a      	sxth	r2, r3
 8003d62:	4b51      	ldr	r3, [pc, #324]	@ (8003ea8 <USART1_IRQHandler+0x1a4>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	b21b      	sxth	r3, r3
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	4b50      	ldr	r3, [pc, #320]	@ (8003eb0 <USART1_IRQHandler+0x1ac>)
 8003d70:	801a      	strh	r2, [r3, #0]
			RxState = 3;
 8003d72:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003d74:	2203      	movs	r2, #3
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e087      	b.n	8003e8a <USART1_IRQHandler+0x186>
		}
		//2nd
		else if(RxState == 3)
 8003d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d106      	bne.n	8003d90 <USART1_IRQHandler+0x8c>
		{
			Data_L = RxData;
 8003d82:	4a49      	ldr	r2, [pc, #292]	@ (8003ea8 <USART1_IRQHandler+0x1a4>)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	7013      	strb	r3, [r2, #0]
			RxState = 4;
 8003d88:	4b46      	ldr	r3, [pc, #280]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e07c      	b.n	8003e8a <USART1_IRQHandler+0x186>
		}
		else if(RxState == 4)
 8003d90:	4b44      	ldr	r3, [pc, #272]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d112      	bne.n	8003dbe <USART1_IRQHandler+0xba>
		{
			Data_H = RxData;
 8003d98:	4a44      	ldr	r2, [pc, #272]	@ (8003eac <USART1_IRQHandler+0x1a8>)
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[1] = (Data_H << 6) | Data_L;
 8003d9e:	4b43      	ldr	r3, [pc, #268]	@ (8003eac <USART1_IRQHandler+0x1a8>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	019b      	lsls	r3, r3, #6
 8003da4:	b21a      	sxth	r2, r3
 8003da6:	4b40      	ldr	r3, [pc, #256]	@ (8003ea8 <USART1_IRQHandler+0x1a4>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b21b      	sxth	r3, r3
 8003dac:	4313      	orrs	r3, r2
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb0 <USART1_IRQHandler+0x1ac>)
 8003db4:	805a      	strh	r2, [r3, #2]
			RxState = 5;
 8003db6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003db8:	2205      	movs	r2, #5
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	e065      	b.n	8003e8a <USART1_IRQHandler+0x186>
		}
		//3rd
		else if(RxState == 5)
 8003dbe:	4b39      	ldr	r3, [pc, #228]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b05      	cmp	r3, #5
 8003dc4:	d106      	bne.n	8003dd4 <USART1_IRQHandler+0xd0>
		{
			Data_L = RxData;
 8003dc6:	4a38      	ldr	r2, [pc, #224]	@ (8003ea8 <USART1_IRQHandler+0x1a4>)
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	7013      	strb	r3, [r2, #0]
			RxState = 6;
 8003dcc:	4b35      	ldr	r3, [pc, #212]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003dce:	2206      	movs	r2, #6
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e05a      	b.n	8003e8a <USART1_IRQHandler+0x186>
		}
		else if(RxState == 6)
 8003dd4:	4b33      	ldr	r3, [pc, #204]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b06      	cmp	r3, #6
 8003dda:	d112      	bne.n	8003e02 <USART1_IRQHandler+0xfe>
		{
			Data_H = RxData;
 8003ddc:	4a33      	ldr	r2, [pc, #204]	@ (8003eac <USART1_IRQHandler+0x1a8>)
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[2] = (Data_H << 6) | Data_L;
 8003de2:	4b32      	ldr	r3, [pc, #200]	@ (8003eac <USART1_IRQHandler+0x1a8>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	019b      	lsls	r3, r3, #6
 8003de8:	b21a      	sxth	r2, r3
 8003dea:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea8 <USART1_IRQHandler+0x1a4>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	b21b      	sxth	r3, r3
 8003df0:	4313      	orrs	r3, r2
 8003df2:	b21b      	sxth	r3, r3
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <USART1_IRQHandler+0x1ac>)
 8003df8:	809a      	strh	r2, [r3, #4]
			RxState = 7;
 8003dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003dfc:	2207      	movs	r2, #7
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e043      	b.n	8003e8a <USART1_IRQHandler+0x186>
		}
		//4th
		else if(RxState == 7)
 8003e02:	4b28      	ldr	r3, [pc, #160]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b07      	cmp	r3, #7
 8003e08:	d106      	bne.n	8003e18 <USART1_IRQHandler+0x114>
		{
			Data_L = RxData;
 8003e0a:	4a27      	ldr	r2, [pc, #156]	@ (8003ea8 <USART1_IRQHandler+0x1a4>)
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	7013      	strb	r3, [r2, #0]
			RxState = 8;
 8003e10:	4b24      	ldr	r3, [pc, #144]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003e12:	2208      	movs	r2, #8
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e038      	b.n	8003e8a <USART1_IRQHandler+0x186>
		}
		else if(RxState == 8)
 8003e18:	4b22      	ldr	r3, [pc, #136]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d112      	bne.n	8003e46 <USART1_IRQHandler+0x142>
		{
			Data_H = RxData;
 8003e20:	4a22      	ldr	r2, [pc, #136]	@ (8003eac <USART1_IRQHandler+0x1a8>)
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	7013      	strb	r3, [r2, #0]
			Serial_RxPacket[3] = (Data_H << 6) | Data_L;
 8003e26:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <USART1_IRQHandler+0x1a8>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	019b      	lsls	r3, r3, #6
 8003e2c:	b21a      	sxth	r2, r3
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <USART1_IRQHandler+0x1a4>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b21b      	sxth	r3, r3
 8003e34:	4313      	orrs	r3, r2
 8003e36:	b21b      	sxth	r3, r3
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb0 <USART1_IRQHandler+0x1ac>)
 8003e3c:	80da      	strh	r2, [r3, #6]
			RxState = 9;
 8003e3e:	4b19      	ldr	r3, [pc, #100]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003e40:	2209      	movs	r2, #9
 8003e42:	701a      	strb	r2, [r3, #0]
 8003e44:	e021      	b.n	8003e8a <USART1_IRQHandler+0x186>
		}

		//end
		else if (RxState == 9)
 8003e46:	4b17      	ldr	r3, [pc, #92]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b09      	cmp	r3, #9
 8003e4c:	d11d      	bne.n	8003e8a <USART1_IRQHandler+0x186>
		{
			if (RxData == 0xFE)
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	2bfe      	cmp	r3, #254	@ 0xfe
 8003e52:	d11a      	bne.n	8003e8a <USART1_IRQHandler+0x186>
			{
				RxState = 0;
 8003e54:	4b13      	ldr	r3, [pc, #76]	@ (8003ea4 <USART1_IRQHandler+0x1a0>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
				Serial_RxFlag = 1;
 8003e5a:	4b16      	ldr	r3, [pc, #88]	@ (8003eb4 <USART1_IRQHandler+0x1b0>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	701a      	strb	r2, [r3, #0]

				Encoder_Buffer[0] = Serial_RxPacket[0];
 8003e60:	4b13      	ldr	r3, [pc, #76]	@ (8003eb0 <USART1_IRQHandler+0x1ac>)
 8003e62:	881a      	ldrh	r2, [r3, #0]
 8003e64:	4b14      	ldr	r3, [pc, #80]	@ (8003eb8 <USART1_IRQHandler+0x1b4>)
 8003e66:	801a      	strh	r2, [r3, #0]
				Encoder_Buffer[1] = Serial_RxPacket[1];
 8003e68:	4b11      	ldr	r3, [pc, #68]	@ (8003eb0 <USART1_IRQHandler+0x1ac>)
 8003e6a:	885a      	ldrh	r2, [r3, #2]
 8003e6c:	4b12      	ldr	r3, [pc, #72]	@ (8003eb8 <USART1_IRQHandler+0x1b4>)
 8003e6e:	805a      	strh	r2, [r3, #2]
				Encoder_Buffer[2] = Serial_RxPacket[2];
 8003e70:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb0 <USART1_IRQHandler+0x1ac>)
 8003e72:	889a      	ldrh	r2, [r3, #4]
 8003e74:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <USART1_IRQHandler+0x1b4>)
 8003e76:	809a      	strh	r2, [r3, #4]
				Encoder_Buffer[3] = Serial_RxPacket[3];
 8003e78:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <USART1_IRQHandler+0x1ac>)
 8003e7a:	88da      	ldrh	r2, [r3, #6]
 8003e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb8 <USART1_IRQHandler+0x1b4>)
 8003e7e:	80da      	strh	r2, [r3, #6]
				osSemaphoreRelease(EncoderIRQHandle);
 8003e80:	4b0e      	ldr	r3, [pc, #56]	@ (8003ebc <USART1_IRQHandler+0x1b8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fd07 	bl	8004898 <osSemaphoreRelease>
			}
		}


		USART1->SR &= ~(1 << 5);
 8003e8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <USART1_IRQHandler+0x19c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a04      	ldr	r2, [pc, #16]	@ (8003ea0 <USART1_IRQHandler+0x19c>)
 8003e90:	f023 0320 	bic.w	r3, r3, #32
 8003e94:	6013      	str	r3, [r2, #0]
	}
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40011000 	.word	0x40011000
 8003ea4:	20000280 	.word	0x20000280
 8003ea8:	20000281 	.word	0x20000281
 8003eac:	20000282 	.word	0x20000282
 8003eb0:	20000270 	.word	0x20000270
 8003eb4:	2000026e 	.word	0x2000026e
 8003eb8:	20000278 	.word	0x20000278
 8003ebc:	200000a8 	.word	0x200000a8

08003ec0 <__NVIC_SetPriority>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	6039      	str	r1, [r7, #0]
 8003eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	db0a      	blt.n	8003eea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	490c      	ldr	r1, [pc, #48]	@ (8003f0c <__NVIC_SetPriority+0x4c>)
 8003eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ede:	0112      	lsls	r2, r2, #4
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ee8:	e00a      	b.n	8003f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4908      	ldr	r1, [pc, #32]	@ (8003f10 <__NVIC_SetPriority+0x50>)
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	3b04      	subs	r3, #4
 8003ef8:	0112      	lsls	r2, r2, #4
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	440b      	add	r3, r1
 8003efe:	761a      	strb	r2, [r3, #24]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	e000e100 	.word	0xe000e100
 8003f10:	e000ed00 	.word	0xe000ed00

08003f14 <JoinStick_Init>:
uint8_t  JoinStickFlag;

uint16_t User_Buffer[3];

void JoinStick_Init(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0

	//開啟USART2、GPIOA時鐘
	RCC->APB1ENR |= 1 << 18;
 8003f18:	4b54      	ldr	r3, [pc, #336]	@ (800406c <JoinStick_Init+0x158>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	4a53      	ldr	r2, [pc, #332]	@ (800406c <JoinStick_Init+0x158>)
 8003f1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f22:	6413      	str	r3, [r2, #64]	@ 0x40
	RCC->AHB1ENR |= 1 << 2;
 8003f24:	4b51      	ldr	r3, [pc, #324]	@ (800406c <JoinStick_Init+0x158>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f28:	4a50      	ldr	r2, [pc, #320]	@ (800406c <JoinStick_Init+0x158>)
 8003f2a:	f043 0304 	orr.w	r3, r3, #4
 8003f2e:	6313      	str	r3, [r2, #48]	@ 0x30

	//TX
	GPIOC->MODER &= ~(3 << 20);  // 清 PA2 模式位
 8003f30:	4b4f      	ldr	r3, [pc, #316]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a4e      	ldr	r2, [pc, #312]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f36:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003f3a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER  |=  2 << 20;
 8003f3c:	4b4c      	ldr	r3, [pc, #304]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a4b      	ldr	r2, [pc, #300]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f46:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &=~(1 << 10);
 8003f48:	4b49      	ldr	r3, [pc, #292]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	4a48      	ldr	r2, [pc, #288]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f52:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR|=  3 << 20;
 8003f54:	4b46      	ldr	r3, [pc, #280]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a45      	ldr	r2, [pc, #276]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f5a:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003f5e:	6093      	str	r3, [r2, #8]

	//RX
	GPIOC->MODER &= ~(3 << 22);  // PA3 模式為輸入或 AF
 8003f60:	4b43      	ldr	r3, [pc, #268]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a42      	ldr	r2, [pc, #264]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f66:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003f6a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (2 << 22);  // 設為 AF 模式
 8003f6c:	4b40      	ldr	r3, [pc, #256]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a3f      	ldr	r2, [pc, #252]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f76:	6013      	str	r3, [r2, #0]
	GPIOC->OSPEEDR|=  1 << 22;
 8003f78:	4b3d      	ldr	r3, [pc, #244]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f82:	6093      	str	r3, [r2, #8]
	GPIOC->PUPDR &= ~(3 << 22);
 8003f84:	4b3a      	ldr	r3, [pc, #232]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a39      	ldr	r2, [pc, #228]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f8a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003f8e:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |=  (1 << 22);  // 上拉
 8003f90:	4b37      	ldr	r3, [pc, #220]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4a36      	ldr	r2, [pc, #216]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f9a:	60d3      	str	r3, [r2, #12]

	//PA2為TX復用輸出、PA3為RX上拉輸入
	GPIOC->AFR[1] &= ~(0xF << 8);  // 清除 AFRH9（PA2）
 8003f9c:	4b34      	ldr	r3, [pc, #208]	@ (8004070 <JoinStick_Init+0x15c>)
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	4a33      	ldr	r2, [pc, #204]	@ (8004070 <JoinStick_Init+0x15c>)
 8003fa2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003fa6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] |=  (7 << 8);    // AF7 = USART2_TX
 8003fa8:	4b31      	ldr	r3, [pc, #196]	@ (8004070 <JoinStick_Init+0x15c>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	4a30      	ldr	r2, [pc, #192]	@ (8004070 <JoinStick_Init+0x15c>)
 8003fae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fb2:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] &= ~(0xF << 12);  // 清除 AFRH10（PA2）
 8003fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8004070 <JoinStick_Init+0x15c>)
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004070 <JoinStick_Init+0x15c>)
 8003fba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fbe:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOC->AFR[1] |=  (7 << 12);    // AF7 = USART2_RX
 8003fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004070 <JoinStick_Init+0x15c>)
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8004070 <JoinStick_Init+0x15c>)
 8003fc6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8003fca:	6253      	str	r3, [r2, #36]	@ 0x24

//	//設置波特率(9600)
	USART3->BRR  =  (273 << 4) | (0xD << 0);
 8003fcc:	4b29      	ldr	r3, [pc, #164]	@ (8004074 <JoinStick_Init+0x160>)
 8003fce:	f241 121d 	movw	r2, #4381	@ 0x111d
 8003fd2:	609a      	str	r2, [r3, #8]
	USART3->CR1 &= ~(1 << 15);
 8003fd4:	4b27      	ldr	r3, [pc, #156]	@ (8004074 <JoinStick_Init+0x160>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4a26      	ldr	r2, [pc, #152]	@ (8004074 <JoinStick_Init+0x160>)
 8003fda:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003fde:	60d3      	str	r3, [r2, #12]

//	//設置波特率(115200)
	USART3->BRR  =  (22 << 4) | (7 << 0);
 8003fe0:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <JoinStick_Init+0x160>)
 8003fe2:	f240 1267 	movw	r2, #359	@ 0x167
 8003fe6:	609a      	str	r2, [r3, #8]
	USART3->CR1 &= ~(1 << 15);
 8003fe8:	4b22      	ldr	r3, [pc, #136]	@ (8004074 <JoinStick_Init+0x160>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4a21      	ldr	r2, [pc, #132]	@ (8004074 <JoinStick_Init+0x160>)
 8003fee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ff2:	60d3      	str	r3, [r2, #12]

	//設置字長(8位元)、校驗(不使用)、發送始能、接收始能
	USART3->CR1 &= ~(1 << 12);
 8003ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8004074 <JoinStick_Init+0x160>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <JoinStick_Init+0x160>)
 8003ffa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ffe:	60d3      	str	r3, [r2, #12]
	USART3->CR1 &= ~(1 << 10);
 8004000:	4b1c      	ldr	r3, [pc, #112]	@ (8004074 <JoinStick_Init+0x160>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a1b      	ldr	r2, [pc, #108]	@ (8004074 <JoinStick_Init+0x160>)
 8004006:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800400a:	60d3      	str	r3, [r2, #12]
	USART3->CR1 |= 1 << 3;
 800400c:	4b19      	ldr	r3, [pc, #100]	@ (8004074 <JoinStick_Init+0x160>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a18      	ldr	r2, [pc, #96]	@ (8004074 <JoinStick_Init+0x160>)
 8004012:	f043 0308 	orr.w	r3, r3, #8
 8004016:	60d3      	str	r3, [r2, #12]
	USART3->CR1 |= 1 << 2;
 8004018:	4b16      	ldr	r3, [pc, #88]	@ (8004074 <JoinStick_Init+0x160>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a15      	ldr	r2, [pc, #84]	@ (8004074 <JoinStick_Init+0x160>)
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	60d3      	str	r3, [r2, #12]

	//設置停止位(1bit)
	USART3->CR2 &= ~(3 << 12);
 8004024:	4b13      	ldr	r3, [pc, #76]	@ (8004074 <JoinStick_Init+0x160>)
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	4a12      	ldr	r2, [pc, #72]	@ (8004074 <JoinStick_Init+0x160>)
 800402a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800402e:	6113      	str	r3, [r2, #16]

	//設置硬體流控(不用)
	USART3->CR3 &= ~(7 << 8);
 8004030:	4b10      	ldr	r3, [pc, #64]	@ (8004074 <JoinStick_Init+0x160>)
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	4a0f      	ldr	r2, [pc, #60]	@ (8004074 <JoinStick_Init+0x160>)
 8004036:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800403a:	6153      	str	r3, [r2, #20]


	//設置當RXNE為1時，產生USART1中斷
	USART3->CR1 |= 1 << 5;
 800403c:	4b0d      	ldr	r3, [pc, #52]	@ (8004074 <JoinStick_Init+0x160>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	4a0c      	ldr	r2, [pc, #48]	@ (8004074 <JoinStick_Init+0x160>)
 8004042:	f043 0320 	orr.w	r3, r3, #32
 8004046:	60d3      	str	r3, [r2, #12]

	//設置USART始能
	USART3->CR1 |= 1 << 13;
 8004048:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <JoinStick_Init+0x160>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a09      	ldr	r2, [pc, #36]	@ (8004074 <JoinStick_Init+0x160>)
 800404e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004052:	60d3      	str	r3, [r2, #12]

	//設置NVIC打開USART2的IRQHandler
	NVIC->ISER[1] |= 1 << 7;  //位置在38
 8004054:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <JoinStick_Init+0x164>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a07      	ldr	r2, [pc, #28]	@ (8004078 <JoinStick_Init+0x164>)
 800405a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800405e:	6053      	str	r3, [r2, #4]

	NVIC_SetPriority(USART3_IRQn, 8); // OK
 8004060:	2108      	movs	r1, #8
 8004062:	2027      	movs	r0, #39	@ 0x27
 8004064:	f7ff ff2c 	bl	8003ec0 <__NVIC_SetPriority>

}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	40020800 	.word	0x40020800
 8004074:	40004800 	.word	0x40004800
 8004078:	e000e100 	.word	0xe000e100

0800407c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0


	static uint8_t RxState = 0;
	static uint8_t Data_L,Data_H;

	if ( USART3->SR & (1 << 5) )
 8004082:	4b52      	ldr	r3, [pc, #328]	@ (80041cc <USART3_IRQHandler+0x150>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8099 	beq.w	80041c2 <USART3_IRQHandler+0x146>
	{
		uint8_t RxData = USART3->DR;
 8004090:	4b4e      	ldr	r3, [pc, #312]	@ (80041cc <USART3_IRQHandler+0x150>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	71fb      	strb	r3, [r7, #7]


		//Start
		if (RxState == 0)
 8004096:	4b4e      	ldr	r3, [pc, #312]	@ (80041d0 <USART3_IRQHandler+0x154>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <USART3_IRQHandler+0x32>
		{
			if (RxData == 0xFF)
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2bff      	cmp	r3, #255	@ 0xff
 80040a2:	f040 8088 	bne.w	80041b6 <USART3_IRQHandler+0x13a>
			{
				RxState = 1;
 80040a6:	4b4a      	ldr	r3, [pc, #296]	@ (80041d0 <USART3_IRQHandler+0x154>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	e083      	b.n	80041b6 <USART3_IRQHandler+0x13a>
			}
		}

		//1st
		else if(RxState == 1)
 80040ae:	4b48      	ldr	r3, [pc, #288]	@ (80041d0 <USART3_IRQHandler+0x154>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d106      	bne.n	80040c4 <USART3_IRQHandler+0x48>
		{
			Data_L = RxData;
 80040b6:	4a47      	ldr	r2, [pc, #284]	@ (80041d4 <USART3_IRQHandler+0x158>)
 80040b8:	79fb      	ldrb	r3, [r7, #7]
 80040ba:	7013      	strb	r3, [r2, #0]
			RxState = 2;
 80040bc:	4b44      	ldr	r3, [pc, #272]	@ (80041d0 <USART3_IRQHandler+0x154>)
 80040be:	2202      	movs	r2, #2
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e078      	b.n	80041b6 <USART3_IRQHandler+0x13a>
		}
		else if(RxState == 2)
 80040c4:	4b42      	ldr	r3, [pc, #264]	@ (80041d0 <USART3_IRQHandler+0x154>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d112      	bne.n	80040f2 <USART3_IRQHandler+0x76>
		{
			Data_H = RxData;
 80040cc:	4a42      	ldr	r2, [pc, #264]	@ (80041d8 <USART3_IRQHandler+0x15c>)
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	7013      	strb	r3, [r2, #0]
//			JoinStick[0] = (Data_H << 8) | Data_L;
			JoinStick[0] = (Data_H << 6) | Data_L;
 80040d2:	4b41      	ldr	r3, [pc, #260]	@ (80041d8 <USART3_IRQHandler+0x15c>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	019b      	lsls	r3, r3, #6
 80040d8:	b21a      	sxth	r2, r3
 80040da:	4b3e      	ldr	r3, [pc, #248]	@ (80041d4 <USART3_IRQHandler+0x158>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	b21b      	sxth	r3, r3
 80040e0:	4313      	orrs	r3, r2
 80040e2:	b21b      	sxth	r3, r3
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	4b3d      	ldr	r3, [pc, #244]	@ (80041dc <USART3_IRQHandler+0x160>)
 80040e8:	801a      	strh	r2, [r3, #0]
			RxState = 3;
 80040ea:	4b39      	ldr	r3, [pc, #228]	@ (80041d0 <USART3_IRQHandler+0x154>)
 80040ec:	2203      	movs	r2, #3
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e061      	b.n	80041b6 <USART3_IRQHandler+0x13a>
		}
		//2nd
		else if(RxState == 3)
 80040f2:	4b37      	ldr	r3, [pc, #220]	@ (80041d0 <USART3_IRQHandler+0x154>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d106      	bne.n	8004108 <USART3_IRQHandler+0x8c>
		{
			Data_L = RxData;
 80040fa:	4a36      	ldr	r2, [pc, #216]	@ (80041d4 <USART3_IRQHandler+0x158>)
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	7013      	strb	r3, [r2, #0]
			RxState = 4;
 8004100:	4b33      	ldr	r3, [pc, #204]	@ (80041d0 <USART3_IRQHandler+0x154>)
 8004102:	2204      	movs	r2, #4
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e056      	b.n	80041b6 <USART3_IRQHandler+0x13a>
		}
		else if(RxState == 4)
 8004108:	4b31      	ldr	r3, [pc, #196]	@ (80041d0 <USART3_IRQHandler+0x154>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d112      	bne.n	8004136 <USART3_IRQHandler+0xba>
		{
			Data_H = RxData;
 8004110:	4a31      	ldr	r2, [pc, #196]	@ (80041d8 <USART3_IRQHandler+0x15c>)
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	7013      	strb	r3, [r2, #0]
//			JoinStick[1] = (Data_H << 8) | Data_L;
			JoinStick[1] = (Data_H << 6) | Data_L;
 8004116:	4b30      	ldr	r3, [pc, #192]	@ (80041d8 <USART3_IRQHandler+0x15c>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	019b      	lsls	r3, r3, #6
 800411c:	b21a      	sxth	r2, r3
 800411e:	4b2d      	ldr	r3, [pc, #180]	@ (80041d4 <USART3_IRQHandler+0x158>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	b21b      	sxth	r3, r3
 8004124:	4313      	orrs	r3, r2
 8004126:	b21b      	sxth	r3, r3
 8004128:	b29a      	uxth	r2, r3
 800412a:	4b2c      	ldr	r3, [pc, #176]	@ (80041dc <USART3_IRQHandler+0x160>)
 800412c:	805a      	strh	r2, [r3, #2]

			RxState = 5;
 800412e:	4b28      	ldr	r3, [pc, #160]	@ (80041d0 <USART3_IRQHandler+0x154>)
 8004130:	2205      	movs	r2, #5
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	e03f      	b.n	80041b6 <USART3_IRQHandler+0x13a>
		}
		//3rd
		else if(RxState == 5)
 8004136:	4b26      	ldr	r3, [pc, #152]	@ (80041d0 <USART3_IRQHandler+0x154>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b05      	cmp	r3, #5
 800413c:	d106      	bne.n	800414c <USART3_IRQHandler+0xd0>
		{
			Data_L = RxData;
 800413e:	4a25      	ldr	r2, [pc, #148]	@ (80041d4 <USART3_IRQHandler+0x158>)
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	7013      	strb	r3, [r2, #0]
			RxState = 6;
 8004144:	4b22      	ldr	r3, [pc, #136]	@ (80041d0 <USART3_IRQHandler+0x154>)
 8004146:	2206      	movs	r2, #6
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e034      	b.n	80041b6 <USART3_IRQHandler+0x13a>
		}
		else if(RxState == 6)
 800414c:	4b20      	ldr	r3, [pc, #128]	@ (80041d0 <USART3_IRQHandler+0x154>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d112      	bne.n	800417a <USART3_IRQHandler+0xfe>
		{
			Data_H = RxData;
 8004154:	4a20      	ldr	r2, [pc, #128]	@ (80041d8 <USART3_IRQHandler+0x15c>)
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	7013      	strb	r3, [r2, #0]
//			JoinStick[2] = (Data_H << 8) | Data_L;
			JoinStick[2] = (Data_H << 6) | Data_L;
 800415a:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <USART3_IRQHandler+0x15c>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	019b      	lsls	r3, r3, #6
 8004160:	b21a      	sxth	r2, r3
 8004162:	4b1c      	ldr	r3, [pc, #112]	@ (80041d4 <USART3_IRQHandler+0x158>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	b21b      	sxth	r3, r3
 8004168:	4313      	orrs	r3, r2
 800416a:	b21b      	sxth	r3, r3
 800416c:	b29a      	uxth	r2, r3
 800416e:	4b1b      	ldr	r3, [pc, #108]	@ (80041dc <USART3_IRQHandler+0x160>)
 8004170:	809a      	strh	r2, [r3, #4]

			RxState = 7;
 8004172:	4b17      	ldr	r3, [pc, #92]	@ (80041d0 <USART3_IRQHandler+0x154>)
 8004174:	2207      	movs	r2, #7
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e01d      	b.n	80041b6 <USART3_IRQHandler+0x13a>
		}

		//end
		else if (RxState == 7)
 800417a:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <USART3_IRQHandler+0x154>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b07      	cmp	r3, #7
 8004180:	d119      	bne.n	80041b6 <USART3_IRQHandler+0x13a>
		{
			if (RxData == 0xFE)
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	2bfe      	cmp	r3, #254	@ 0xfe
 8004186:	d116      	bne.n	80041b6 <USART3_IRQHandler+0x13a>
			{
				RxState = 0;
 8004188:	4b11      	ldr	r3, [pc, #68]	@ (80041d0 <USART3_IRQHandler+0x154>)
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
				JoinStickFlag = 1;
 800418e:	4b14      	ldr	r3, [pc, #80]	@ (80041e0 <USART3_IRQHandler+0x164>)
 8004190:	2201      	movs	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]


				User_Buffer[0] = JoinStick[0];
 8004194:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <USART3_IRQHandler+0x160>)
 8004196:	881a      	ldrh	r2, [r3, #0]
 8004198:	4b12      	ldr	r3, [pc, #72]	@ (80041e4 <USART3_IRQHandler+0x168>)
 800419a:	801a      	strh	r2, [r3, #0]
				User_Buffer[1] = JoinStick[1];
 800419c:	4b0f      	ldr	r3, [pc, #60]	@ (80041dc <USART3_IRQHandler+0x160>)
 800419e:	885a      	ldrh	r2, [r3, #2]
 80041a0:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <USART3_IRQHandler+0x168>)
 80041a2:	805a      	strh	r2, [r3, #2]
				User_Buffer[2] = JoinStick[2];
 80041a4:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <USART3_IRQHandler+0x160>)
 80041a6:	889a      	ldrh	r2, [r3, #4]
 80041a8:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <USART3_IRQHandler+0x168>)
 80041aa:	809a      	strh	r2, [r3, #4]

				osSemaphoreRelease(HC05IRQHandle);
 80041ac:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <USART3_IRQHandler+0x16c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fb71 	bl	8004898 <osSemaphoreRelease>
			}
		}



		USART3->SR &= ~(1 << 5);
 80041b6:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <USART3_IRQHandler+0x150>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a04      	ldr	r2, [pc, #16]	@ (80041cc <USART3_IRQHandler+0x150>)
 80041bc:	f023 0320 	bic.w	r3, r3, #32
 80041c0:	6013      	str	r3, [r2, #0]
	}
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40004800 	.word	0x40004800
 80041d0:	20000292 	.word	0x20000292
 80041d4:	20000293 	.word	0x20000293
 80041d8:	20000294 	.word	0x20000294
 80041dc:	20000284 	.word	0x20000284
 80041e0:	2000028a 	.word	0x2000028a
 80041e4:	2000028c 	.word	0x2000028c
 80041e8:	200000ac 	.word	0x200000ac

080041ec <__NVIC_SetPriority>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	db0a      	blt.n	8004216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	490c      	ldr	r1, [pc, #48]	@ (8004238 <__NVIC_SetPriority+0x4c>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	440b      	add	r3, r1
 8004210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004214:	e00a      	b.n	800422c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4908      	ldr	r1, [pc, #32]	@ (800423c <__NVIC_SetPriority+0x50>)
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	3b04      	subs	r3, #4
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	440b      	add	r3, r1
 800422a:	761a      	strb	r2, [r3, #24]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000e100 	.word	0xe000e100
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004244:	2100      	movs	r1, #0
 8004246:	f06f 0004 	mvn.w	r0, #4
 800424a:	f7ff ffcf 	bl	80041ec <__NVIC_SetPriority>
#endif
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800425a:	f3ef 8305 	mrs	r3, IPSR
 800425e:	603b      	str	r3, [r7, #0]
  return(result);
 8004260:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004266:	f06f 0305 	mvn.w	r3, #5
 800426a:	607b      	str	r3, [r7, #4]
 800426c:	e00c      	b.n	8004288 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800426e:	4b0a      	ldr	r3, [pc, #40]	@ (8004298 <osKernelInitialize+0x44>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d105      	bne.n	8004282 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004276:	4b08      	ldr	r3, [pc, #32]	@ (8004298 <osKernelInitialize+0x44>)
 8004278:	2201      	movs	r2, #1
 800427a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800427c:	2300      	movs	r3, #0
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	e002      	b.n	8004288 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004288:	687b      	ldr	r3, [r7, #4]
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000298 	.word	0x20000298

0800429c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042a2:	f3ef 8305 	mrs	r3, IPSR
 80042a6:	603b      	str	r3, [r7, #0]
  return(result);
 80042a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80042ae:	f06f 0305 	mvn.w	r3, #5
 80042b2:	607b      	str	r3, [r7, #4]
 80042b4:	e010      	b.n	80042d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <osKernelStart+0x48>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d109      	bne.n	80042d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042be:	f7ff ffbf 	bl	8004240 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042c2:	4b08      	ldr	r3, [pc, #32]	@ (80042e4 <osKernelStart+0x48>)
 80042c4:	2202      	movs	r2, #2
 80042c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042c8:	f001 ff52 	bl	8006170 <vTaskStartScheduler>
      stat = osOK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	607b      	str	r3, [r7, #4]
 80042d0:	e002      	b.n	80042d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80042d2:	f04f 33ff 	mov.w	r3, #4294967295
 80042d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042d8:	687b      	ldr	r3, [r7, #4]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000298 	.word	0x20000298

080042e8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ee:	f3ef 8305 	mrs	r3, IPSR
 80042f2:	603b      	str	r3, [r7, #0]
  return(result);
 80042f4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80042fa:	f002 f85d 	bl	80063b8 <xTaskGetTickCountFromISR>
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	e002      	b.n	8004308 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004302:	f002 f849 	bl	8006398 <xTaskGetTickCount>
 8004306:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004308:	687b      	ldr	r3, [r7, #4]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004312:	b580      	push	{r7, lr}
 8004314:	b08e      	sub	sp, #56	@ 0x38
 8004316:	af04      	add	r7, sp, #16
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004322:	f3ef 8305 	mrs	r3, IPSR
 8004326:	617b      	str	r3, [r7, #20]
  return(result);
 8004328:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800432a:	2b00      	cmp	r3, #0
 800432c:	d17e      	bne.n	800442c <osThreadNew+0x11a>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d07b      	beq.n	800442c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004334:	2380      	movs	r3, #128	@ 0x80
 8004336:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004338:	2318      	movs	r3, #24
 800433a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004340:	f04f 33ff 	mov.w	r3, #4294967295
 8004344:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d045      	beq.n	80043d8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <osThreadNew+0x48>
        name = attr->name;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <osThreadNew+0x6e>
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	2b38      	cmp	r3, #56	@ 0x38
 8004372:	d805      	bhi.n	8004380 <osThreadNew+0x6e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <osThreadNew+0x72>
        return (NULL);
 8004380:	2300      	movs	r3, #0
 8004382:	e054      	b.n	800442e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	089b      	lsrs	r3, r3, #2
 8004392:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00e      	beq.n	80043ba <osThreadNew+0xa8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2b5b      	cmp	r3, #91	@ 0x5b
 80043a2:	d90a      	bls.n	80043ba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d006      	beq.n	80043ba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <osThreadNew+0xa8>
        mem = 1;
 80043b4:	2301      	movs	r3, #1
 80043b6:	61bb      	str	r3, [r7, #24]
 80043b8:	e010      	b.n	80043dc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10c      	bne.n	80043dc <osThreadNew+0xca>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <osThreadNew+0xca>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <osThreadNew+0xca>
          mem = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	e001      	b.n	80043dc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d110      	bne.n	8004404 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043ea:	9202      	str	r2, [sp, #8]
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6a3a      	ldr	r2, [r7, #32]
 80043f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f001 fc5d 	bl	8005cb8 <xTaskCreateStatic>
 80043fe:	4603      	mov	r3, r0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	e013      	b.n	800442c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d110      	bne.n	800442c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	b29a      	uxth	r2, r3
 800440e:	f107 0310 	add.w	r3, r7, #16
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f001 fcab 	bl	8005d78 <xTaskCreate>
 8004422:	4603      	mov	r3, r0
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <osThreadNew+0x11a>
            hTask = NULL;
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800442c:	693b      	ldr	r3, [r7, #16]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3728      	adds	r7, #40	@ 0x28
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800443e:	f3ef 8305 	mrs	r3, IPSR
 8004442:	60bb      	str	r3, [r7, #8]
  return(result);
 8004444:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <osDelay+0x1c>
    stat = osErrorISR;
 800444a:	f06f 0305 	mvn.w	r3, #5
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e007      	b.n	8004462 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <osDelay+0x2c>
      vTaskDelay(ticks);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f001 fe51 	bl	8006104 <vTaskDelay>
    }
  }

  return (stat);
 8004462:	68fb      	ldr	r3, [r7, #12]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004474:	f3ef 8305 	mrs	r3, IPSR
 8004478:	60fb      	str	r3, [r7, #12]
  return(result);
 800447a:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8004480:	f06f 0305 	mvn.w	r3, #5
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	e019      	b.n	80044bc <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800448c:	f001 ff84 	bl	8006398 <xTaskGetTickCount>
 8004490:	4603      	mov	r3, r0
 8004492:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <osDelayUntil+0x4a>
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	db06      	blt.n	80044b6 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80044a8:	f107 0308 	add.w	r3, r7, #8
 80044ac:	6939      	ldr	r1, [r7, #16]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fda8 	bl	8006004 <vTaskDelayUntil>
 80044b4:	e002      	b.n	80044bc <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80044b6:	f06f 0303 	mvn.w	r3, #3
 80044ba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80044bc:	697b      	ldr	r3, [r7, #20]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b088      	sub	sp, #32
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044d2:	f3ef 8305 	mrs	r3, IPSR
 80044d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80044d8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d174      	bne.n	80045c8 <osMutexNew+0x102>
    if (attr != NULL) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <osMutexNew+0x26>
      type = attr->attr_bits;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	e001      	b.n	80044f0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <osMutexNew+0x3a>
      rmtx = 1U;
 80044fa:	2301      	movs	r3, #1
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	e001      	b.n	8004504 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d15c      	bne.n	80045c8 <osMutexNew+0x102>
      mem = -1;
 800450e:	f04f 33ff 	mov.w	r3, #4294967295
 8004512:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d015      	beq.n	8004546 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d006      	beq.n	8004530 <osMutexNew+0x6a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b4f      	cmp	r3, #79	@ 0x4f
 8004528:	d902      	bls.n	8004530 <osMutexNew+0x6a>
          mem = 1;
 800452a:	2301      	movs	r3, #1
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e00c      	b.n	800454a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d108      	bne.n	800454a <osMutexNew+0x84>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <osMutexNew+0x84>
            mem = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	e001      	b.n	800454a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d112      	bne.n	8004576 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	4619      	mov	r1, r3
 800455c:	2004      	movs	r0, #4
 800455e:	f000 fc3e 	bl	8004dde <xQueueCreateMutexStatic>
 8004562:	61f8      	str	r0, [r7, #28]
 8004564:	e016      	b.n	8004594 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	4619      	mov	r1, r3
 800456c:	2001      	movs	r0, #1
 800456e:	f000 fc36 	bl	8004dde <xQueueCreateMutexStatic>
 8004572:	61f8      	str	r0, [r7, #28]
 8004574:	e00e      	b.n	8004594 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d004      	beq.n	800458c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004582:	2004      	movs	r0, #4
 8004584:	f000 fc13 	bl	8004dae <xQueueCreateMutex>
 8004588:	61f8      	str	r0, [r7, #28]
 800458a:	e003      	b.n	8004594 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800458c:	2001      	movs	r0, #1
 800458e:	f000 fc0e 	bl	8004dae <xQueueCreateMutex>
 8004592:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <osMutexNew+0xee>
        if (attr != NULL) {
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <osMutexNew+0xe2>
          name = attr->name;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e001      	b.n	80045ac <osMutexNew+0xe6>
        } else {
          name = NULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80045ac:	68f9      	ldr	r1, [r7, #12]
 80045ae:	69f8      	ldr	r0, [r7, #28]
 80045b0:	f001 fafa 	bl	8005ba8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d006      	beq.n	80045c8 <osMutexNew+0x102>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80045c8:	69fb      	ldr	r3, [r7, #28]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b086      	sub	sp, #24
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f0:	f3ef 8305 	mrs	r3, IPSR
 80045f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80045f6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80045fc:	f06f 0305 	mvn.w	r3, #5
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	e02c      	b.n	800465e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d103      	bne.n	8004612 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800460a:	f06f 0303 	mvn.w	r3, #3
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e025      	b.n	800465e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d011      	beq.n	800463c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	6938      	ldr	r0, [r7, #16]
 800461c:	f000 fc2f 	bl	8004e7e <xQueueTakeMutexRecursive>
 8004620:	4603      	mov	r3, r0
 8004622:	2b01      	cmp	r3, #1
 8004624:	d01b      	beq.n	800465e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800462c:	f06f 0301 	mvn.w	r3, #1
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e014      	b.n	800465e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004634:	f06f 0302 	mvn.w	r3, #2
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e010      	b.n	800465e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800463c:	6839      	ldr	r1, [r7, #0]
 800463e:	6938      	ldr	r0, [r7, #16]
 8004640:	f000 ffd4 	bl	80055ec <xQueueSemaphoreTake>
 8004644:	4603      	mov	r3, r0
 8004646:	2b01      	cmp	r3, #1
 8004648:	d009      	beq.n	800465e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004650:	f06f 0301 	mvn.w	r3, #1
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e002      	b.n	800465e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004658:	f06f 0302 	mvn.w	r3, #2
 800465c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800465e:	697b      	ldr	r3, [r7, #20]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004684:	f3ef 8305 	mrs	r3, IPSR
 8004688:	60bb      	str	r3, [r7, #8]
  return(result);
 800468a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004690:	f06f 0305 	mvn.w	r3, #5
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e01f      	b.n	80046d8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d103      	bne.n	80046a6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800469e:	f06f 0303 	mvn.w	r3, #3
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e018      	b.n	80046d8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80046ac:	6938      	ldr	r0, [r7, #16]
 80046ae:	f000 fbb1 	bl	8004e14 <xQueueGiveMutexRecursive>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d00f      	beq.n	80046d8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80046b8:	f06f 0302 	mvn.w	r3, #2
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e00b      	b.n	80046d8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80046c0:	2300      	movs	r3, #0
 80046c2:	2200      	movs	r2, #0
 80046c4:	2100      	movs	r1, #0
 80046c6:	6938      	ldr	r0, [r7, #16]
 80046c8:	f000 fc7e 	bl	8004fc8 <xQueueGenericSend>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d002      	beq.n	80046d8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80046d2:	f06f 0302 	mvn.w	r3, #2
 80046d6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80046d8:	697b      	ldr	r3, [r7, #20]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b08a      	sub	sp, #40	@ 0x28
 80046e6:	af02      	add	r7, sp, #8
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f2:	f3ef 8305 	mrs	r3, IPSR
 80046f6:	613b      	str	r3, [r7, #16]
  return(result);
 80046f8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d175      	bne.n	80047ea <osSemaphoreNew+0x108>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d072      	beq.n	80047ea <osSemaphoreNew+0x108>
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	429a      	cmp	r2, r3
 800470a:	d86e      	bhi.n	80047ea <osSemaphoreNew+0x108>
    mem = -1;
 800470c:	f04f 33ff 	mov.w	r3, #4294967295
 8004710:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d015      	beq.n	8004744 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d006      	beq.n	800472e <osSemaphoreNew+0x4c>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	2b4f      	cmp	r3, #79	@ 0x4f
 8004726:	d902      	bls.n	800472e <osSemaphoreNew+0x4c>
        mem = 1;
 8004728:	2301      	movs	r3, #1
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	e00c      	b.n	8004748 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d108      	bne.n	8004748 <osSemaphoreNew+0x66>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d104      	bne.n	8004748 <osSemaphoreNew+0x66>
          mem = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	e001      	b.n	8004748 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474e:	d04c      	beq.n	80047ea <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d128      	bne.n	80047a8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d10a      	bne.n	8004772 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2203      	movs	r2, #3
 8004762:	9200      	str	r2, [sp, #0]
 8004764:	2200      	movs	r2, #0
 8004766:	2100      	movs	r1, #0
 8004768:	2001      	movs	r0, #1
 800476a:	f000 fa2b 	bl	8004bc4 <xQueueGenericCreateStatic>
 800476e:	61f8      	str	r0, [r7, #28]
 8004770:	e005      	b.n	800477e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004772:	2203      	movs	r2, #3
 8004774:	2100      	movs	r1, #0
 8004776:	2001      	movs	r0, #1
 8004778:	f000 faa1 	bl	8004cbe <xQueueGenericCreate>
 800477c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d022      	beq.n	80047ca <osSemaphoreNew+0xe8>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01f      	beq.n	80047ca <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800478a:	2300      	movs	r3, #0
 800478c:	2200      	movs	r2, #0
 800478e:	2100      	movs	r1, #0
 8004790:	69f8      	ldr	r0, [r7, #28]
 8004792:	f000 fc19 	bl	8004fc8 <xQueueGenericSend>
 8004796:	4603      	mov	r3, r0
 8004798:	2b01      	cmp	r3, #1
 800479a:	d016      	beq.n	80047ca <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800479c:	69f8      	ldr	r0, [r7, #28]
 800479e:	f001 f8b7 	bl	8005910 <vQueueDelete>
            hSemaphore = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	e010      	b.n	80047ca <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d108      	bne.n	80047c0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	461a      	mov	r2, r3
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fb98 	bl	8004eec <xQueueCreateCountingSemaphoreStatic>
 80047bc:	61f8      	str	r0, [r7, #28]
 80047be:	e004      	b.n	80047ca <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 fbcb 	bl	8004f5e <xQueueCreateCountingSemaphore>
 80047c8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00c      	beq.n	80047ea <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <osSemaphoreNew+0xfc>
          name = attr->name;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	e001      	b.n	80047e2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80047e2:	6979      	ldr	r1, [r7, #20]
 80047e4:	69f8      	ldr	r0, [r7, #28]
 80047e6:	f001 f9df 	bl	8005ba8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80047ea:	69fb      	ldr	r3, [r7, #28]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d103      	bne.n	8004814 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800480c:	f06f 0303 	mvn.w	r3, #3
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e039      	b.n	8004888 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004814:	f3ef 8305 	mrs	r3, IPSR
 8004818:	60fb      	str	r3, [r7, #12]
  return(result);
 800481a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800481c:	2b00      	cmp	r3, #0
 800481e:	d022      	beq.n	8004866 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004826:	f06f 0303 	mvn.w	r3, #3
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e02c      	b.n	8004888 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004832:	f107 0308 	add.w	r3, r7, #8
 8004836:	461a      	mov	r2, r3
 8004838:	2100      	movs	r1, #0
 800483a:	6938      	ldr	r0, [r7, #16]
 800483c:	f000 ffe6 	bl	800580c <xQueueReceiveFromISR>
 8004840:	4603      	mov	r3, r0
 8004842:	2b01      	cmp	r3, #1
 8004844:	d003      	beq.n	800484e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004846:	f06f 0302 	mvn.w	r3, #2
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e01c      	b.n	8004888 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d019      	beq.n	8004888 <osSemaphoreAcquire+0x94>
 8004854:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <osSemaphoreAcquire+0xa0>)
 8004856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	e010      	b.n	8004888 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004866:	6839      	ldr	r1, [r7, #0]
 8004868:	6938      	ldr	r0, [r7, #16]
 800486a:	f000 febf 	bl	80055ec <xQueueSemaphoreTake>
 800486e:	4603      	mov	r3, r0
 8004870:	2b01      	cmp	r3, #1
 8004872:	d009      	beq.n	8004888 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800487a:	f06f 0301 	mvn.w	r3, #1
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e002      	b.n	8004888 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004882:	f06f 0302 	mvn.w	r3, #2
 8004886:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004888:	697b      	ldr	r3, [r7, #20]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80048ae:	f06f 0303 	mvn.w	r3, #3
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	e02c      	b.n	8004910 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048b6:	f3ef 8305 	mrs	r3, IPSR
 80048ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80048bc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d01a      	beq.n	80048f8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80048c6:	f107 0308 	add.w	r3, r7, #8
 80048ca:	4619      	mov	r1, r3
 80048cc:	6938      	ldr	r0, [r7, #16]
 80048ce:	f000 fd1b 	bl	8005308 <xQueueGiveFromISR>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d003      	beq.n	80048e0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80048d8:	f06f 0302 	mvn.w	r3, #2
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e017      	b.n	8004910 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d014      	beq.n	8004910 <osSemaphoreRelease+0x78>
 80048e6:	4b0d      	ldr	r3, [pc, #52]	@ (800491c <osSemaphoreRelease+0x84>)
 80048e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	e00b      	b.n	8004910 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80048f8:	2300      	movs	r3, #0
 80048fa:	2200      	movs	r2, #0
 80048fc:	2100      	movs	r1, #0
 80048fe:	6938      	ldr	r0, [r7, #16]
 8004900:	f000 fb62 	bl	8004fc8 <xQueueGenericSend>
 8004904:	4603      	mov	r3, r0
 8004906:	2b01      	cmp	r3, #1
 8004908:	d002      	beq.n	8004910 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800490a:	f06f 0302 	mvn.w	r3, #2
 800490e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004910:	697b      	ldr	r3, [r7, #20]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	e000ed04 	.word	0xe000ed04

08004920 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a07      	ldr	r2, [pc, #28]	@ (800494c <vApplicationGetIdleTaskMemory+0x2c>)
 8004930:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4a06      	ldr	r2, [pc, #24]	@ (8004950 <vApplicationGetIdleTaskMemory+0x30>)
 8004936:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2280      	movs	r2, #128	@ 0x80
 800493c:	601a      	str	r2, [r3, #0]
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	2000029c 	.word	0x2000029c
 8004950:	200002f8 	.word	0x200002f8

08004954 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4a07      	ldr	r2, [pc, #28]	@ (8004980 <vApplicationGetTimerTaskMemory+0x2c>)
 8004964:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4a06      	ldr	r2, [pc, #24]	@ (8004984 <vApplicationGetTimerTaskMemory+0x30>)
 800496a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	200004f8 	.word	0x200004f8
 8004984:	20000554 	.word	0x20000554

08004988 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f103 0208 	add.w	r2, r3, #8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f04f 32ff 	mov.w	r2, #4294967295
 80049a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f103 0208 	add.w	r2, r3, #8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f103 0208 	add.w	r2, r3, #8
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a40:	d103      	bne.n	8004a4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	e00c      	b.n	8004a64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e002      	b.n	8004a58 <vListInsert+0x2e>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d2f6      	bcs.n	8004a52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	601a      	str	r2, [r3, #0]
}
 8004a90:	bf00      	nop
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6892      	ldr	r2, [r2, #8]
 8004ab2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6852      	ldr	r2, [r2, #4]
 8004abc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d103      	bne.n	8004ad0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	1e5a      	subs	r2, r3, #1
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10b      	bne.n	8004b1c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b16:	bf00      	nop
 8004b18:	bf00      	nop
 8004b1a:	e7fd      	b.n	8004b18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b1c:	f002 fe04 	bl	8007728 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b28:	68f9      	ldr	r1, [r7, #12]
 8004b2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	441a      	add	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	68f9      	ldr	r1, [r7, #12]
 8004b50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004b52:	fb01 f303 	mul.w	r3, r1, r3
 8004b56:	441a      	add	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	22ff      	movs	r2, #255	@ 0xff
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	22ff      	movs	r2, #255	@ 0xff
 8004b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d114      	bne.n	8004b9c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01a      	beq.n	8004bb0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3310      	adds	r3, #16
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 fd96 	bl	80066b0 <xTaskRemoveFromEventList>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d012      	beq.n	8004bb0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc0 <xQueueGenericReset+0xd0>)
 8004b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	e009      	b.n	8004bb0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3310      	adds	r3, #16
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fef1 	bl	8004988 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3324      	adds	r3, #36	@ 0x24
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff feec 	bl	8004988 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bb0:	f002 fdec 	bl	800778c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bb4:	2301      	movs	r3, #1
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	e000ed04 	.word	0xe000ed04

08004bc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08e      	sub	sp, #56	@ 0x38
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
 8004bee:	e7fd      	b.n	8004bec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	e7fd      	b.n	8004c0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <xQueueGenericCreateStatic+0x56>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <xQueueGenericCreateStatic+0x5a>
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <xQueueGenericCreateStatic+0x5c>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	623b      	str	r3, [r7, #32]
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	e7fd      	b.n	8004c38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <xQueueGenericCreateStatic+0x84>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <xQueueGenericCreateStatic+0x88>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <xQueueGenericCreateStatic+0x8a>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10b      	bne.n	8004c6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	61fb      	str	r3, [r7, #28]
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	e7fd      	b.n	8004c66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c6a:	2350      	movs	r3, #80	@ 0x50
 8004c6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b50      	cmp	r3, #80	@ 0x50
 8004c72:	d00b      	beq.n	8004c8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	61bb      	str	r3, [r7, #24]
}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	e7fd      	b.n	8004c88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ca0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f840 	bl	8004d34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3730      	adds	r7, #48	@ 0x30
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b08a      	sub	sp, #40	@ 0x28
 8004cc2:	af02      	add	r7, sp, #8
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <xQueueGenericCreate+0x2c>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	613b      	str	r3, [r7, #16]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
 8004cf2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	3350      	adds	r3, #80	@ 0x50
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f002 fe37 	bl	800796c <pvPortMalloc>
 8004cfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d011      	beq.n	8004d2a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	3350      	adds	r3, #80	@ 0x50
 8004d0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d18:	79fa      	ldrb	r2, [r7, #7]
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f000 f805 	bl	8004d34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
	}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3720      	adds	r7, #32
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	e002      	b.n	8004d56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d62:	2101      	movs	r1, #1
 8004d64:	69b8      	ldr	r0, [r7, #24]
 8004d66:	f7ff fec3 	bl	8004af0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00e      	beq.n	8004da6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2100      	movs	r1, #0
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f911 	bl	8004fc8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b086      	sub	sp, #24
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	4603      	mov	r3, r0
 8004db6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004db8:	2301      	movs	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	6939      	ldr	r1, [r7, #16]
 8004dc6:	6978      	ldr	r0, [r7, #20]
 8004dc8:	f7ff ff79 	bl	8004cbe <xQueueGenericCreate>
 8004dcc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff ffd3 	bl	8004d7a <prvInitialiseMutex>

		return xNewQueue;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
	}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b088      	sub	sp, #32
 8004de2:	af02      	add	r7, sp, #8
 8004de4:	4603      	mov	r3, r0
 8004de6:	6039      	str	r1, [r7, #0]
 8004de8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004dea:	2301      	movs	r3, #1
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	6978      	ldr	r0, [r7, #20]
 8004dfe:	f7ff fee1 	bl	8004bc4 <xQueueGenericCreateStatic>
 8004e02:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7ff ffb8 	bl	8004d7a <prvInitialiseMutex>

		return xNewQueue;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
	}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004e14:	b590      	push	{r4, r7, lr}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60fb      	str	r3, [r7, #12]
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	689c      	ldr	r4, [r3, #8]
 8004e42:	f001 fdf5 	bl	8006a30 <xTaskGetCurrentTaskHandle>
 8004e46:	4603      	mov	r3, r0
 8004e48:	429c      	cmp	r4, r3
 8004e4a:	d111      	bne.n	8004e70 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	1e5a      	subs	r2, r3, #1
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2200      	movs	r2, #0
 8004e62:	2100      	movs	r1, #0
 8004e64:	6938      	ldr	r0, [r7, #16]
 8004e66:	f000 f8af 	bl	8004fc8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e001      	b.n	8004e74 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004e74:	697b      	ldr	r3, [r7, #20]
	}
 8004e76:	4618      	mov	r0, r3
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd90      	pop	{r4, r7, pc}

08004e7e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004e7e:	b590      	push	{r4, r7, lr}
 8004e80:	b087      	sub	sp, #28
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10b      	bne.n	8004eaa <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60fb      	str	r3, [r7, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	e7fd      	b.n	8004ea6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	689c      	ldr	r4, [r3, #8]
 8004eae:	f001 fdbf 	bl	8006a30 <xTaskGetCurrentTaskHandle>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	429c      	cmp	r4, r3
 8004eb6:	d107      	bne.n	8004ec8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	e00c      	b.n	8004ee2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004ec8:	6839      	ldr	r1, [r7, #0]
 8004eca:	6938      	ldr	r0, [r7, #16]
 8004ecc:	f000 fb8e 	bl	80055ec <xQueueSemaphoreTake>
 8004ed0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004ee2:	697b      	ldr	r3, [r7, #20]
	}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd90      	pop	{r4, r7, pc}

08004eec <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08a      	sub	sp, #40	@ 0x28
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	61bb      	str	r3, [r7, #24]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d90b      	bls.n	8004f36 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	617b      	str	r3, [r7, #20]
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	e7fd      	b.n	8004f32 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f36:	2302      	movs	r3, #2
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2100      	movs	r1, #0
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f7ff fe3f 	bl	8004bc4 <xQueueGenericCreateStatic>
 8004f46:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f54:	69fb      	ldr	r3, [r7, #28]
	}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10b      	bne.n	8004f86 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8004f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	613b      	str	r3, [r7, #16]
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	e7fd      	b.n	8004f82 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d90b      	bls.n	8004fa6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60fb      	str	r3, [r7, #12]
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	e7fd      	b.n	8004fa2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	2100      	movs	r1, #0
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff fe87 	bl	8004cbe <xQueueGenericCreate>
 8004fb0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004fbe:	697b      	ldr	r3, [r7, #20]
	}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08e      	sub	sp, #56	@ 0x38
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <xQueueGenericSend+0x34>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <xQueueGenericSend+0x42>
 8005002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <xQueueGenericSend+0x46>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <xQueueGenericSend+0x48>
 800500e:	2300      	movs	r3, #0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <xQueueGenericSend+0x64>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005026:	bf00      	nop
 8005028:	bf00      	nop
 800502a:	e7fd      	b.n	8005028 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d103      	bne.n	800503a <xQueueGenericSend+0x72>
 8005032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <xQueueGenericSend+0x76>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <xQueueGenericSend+0x78>
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <xQueueGenericSend+0x94>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	623b      	str	r3, [r7, #32]
}
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	e7fd      	b.n	8005058 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800505c:	f001 fcf8 	bl	8006a50 <xTaskGetSchedulerState>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d102      	bne.n	800506c <xQueueGenericSend+0xa4>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d101      	bne.n	8005070 <xQueueGenericSend+0xa8>
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <xQueueGenericSend+0xaa>
 8005070:	2300      	movs	r3, #0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10b      	bne.n	800508e <xQueueGenericSend+0xc6>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	61fb      	str	r3, [r7, #28]
}
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	e7fd      	b.n	800508a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800508e:	f002 fb4b 	bl	8007728 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <xQueueGenericSend+0xdc>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d129      	bne.n	80050f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050aa:	f000 fc6d 	bl	8005988 <prvCopyDataToQueue>
 80050ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d010      	beq.n	80050da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	3324      	adds	r3, #36	@ 0x24
 80050bc:	4618      	mov	r0, r3
 80050be:	f001 faf7 	bl	80066b0 <xTaskRemoveFromEventList>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d013      	beq.n	80050f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050c8:	4b3f      	ldr	r3, [pc, #252]	@ (80051c8 <xQueueGenericSend+0x200>)
 80050ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	e00a      	b.n	80050f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d007      	beq.n	80050f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050e0:	4b39      	ldr	r3, [pc, #228]	@ (80051c8 <xQueueGenericSend+0x200>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050f0:	f002 fb4c 	bl	800778c <vPortExitCritical>
				return pdPASS;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e063      	b.n	80051c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d103      	bne.n	8005106 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050fe:	f002 fb45 	bl	800778c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005102:	2300      	movs	r3, #0
 8005104:	e05c      	b.n	80051c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800510c:	f107 0314 	add.w	r3, r7, #20
 8005110:	4618      	mov	r0, r3
 8005112:	f001 fb31 	bl	8006778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005116:	2301      	movs	r3, #1
 8005118:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800511a:	f002 fb37 	bl	800778c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800511e:	f001 f88f 	bl	8006240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005122:	f002 fb01 	bl	8007728 <vPortEnterCritical>
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800512c:	b25b      	sxtb	r3, r3
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d103      	bne.n	800513c <xQueueGenericSend+0x174>
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005142:	b25b      	sxtb	r3, r3
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d103      	bne.n	8005152 <xQueueGenericSend+0x18a>
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005152:	f002 fb1b 	bl	800778c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005156:	1d3a      	adds	r2, r7, #4
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4611      	mov	r1, r2
 800515e:	4618      	mov	r0, r3
 8005160:	f001 fb20 	bl	80067a4 <xTaskCheckForTimeOut>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d124      	bne.n	80051b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800516a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800516c:	f000 fd04 	bl	8005b78 <prvIsQueueFull>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d018      	beq.n	80051a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005178:	3310      	adds	r3, #16
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f001 fa44 	bl	800660c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005186:	f000 fc8f 	bl	8005aa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800518a:	f001 f867 	bl	800625c <xTaskResumeAll>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	f47f af7c 	bne.w	800508e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005196:	4b0c      	ldr	r3, [pc, #48]	@ (80051c8 <xQueueGenericSend+0x200>)
 8005198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	e772      	b.n	800508e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051aa:	f000 fc7d 	bl	8005aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051ae:	f001 f855 	bl	800625c <xTaskResumeAll>
 80051b2:	e76c      	b.n	800508e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051b6:	f000 fc77 	bl	8005aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051ba:	f001 f84f 	bl	800625c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3738      	adds	r7, #56	@ 0x38
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b090      	sub	sp, #64	@ 0x40
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80051de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <xQueueGenericSendFromISR+0x3e>
 8005202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <xQueueGenericSendFromISR+0x42>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <xQueueGenericSendFromISR+0x44>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10b      	bne.n	800522c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	e7fd      	b.n	8005228 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d103      	bne.n	800523a <xQueueGenericSendFromISR+0x6e>
 8005232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <xQueueGenericSendFromISR+0x72>
 800523a:	2301      	movs	r3, #1
 800523c:	e000      	b.n	8005240 <xQueueGenericSendFromISR+0x74>
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10b      	bne.n	800525c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	623b      	str	r3, [r7, #32]
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800525c:	f002 fb44 	bl	80078e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005260:	f3ef 8211 	mrs	r2, BASEPRI
 8005264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	61fa      	str	r2, [r7, #28]
 8005276:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005278:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800527a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800527c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <xQueueGenericSendFromISR+0xc2>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d12f      	bne.n	80052ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005294:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80052a4:	f000 fb70 	bl	8005988 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d112      	bne.n	80052d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d016      	beq.n	80052e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052bc:	3324      	adds	r3, #36	@ 0x24
 80052be:	4618      	mov	r0, r3
 80052c0:	f001 f9f6 	bl	80066b0 <xTaskRemoveFromEventList>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00e      	beq.n	80052e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e007      	b.n	80052e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80052dc:	3301      	adds	r3, #1
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	b25a      	sxtb	r2, r3
 80052e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80052e8:	2301      	movs	r3, #1
 80052ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80052ec:	e001      	b.n	80052f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005300:	4618      	mov	r0, r3
 8005302:	3740      	adds	r7, #64	@ 0x40
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08e      	sub	sp, #56	@ 0x38
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10b      	bne.n	8005334 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	623b      	str	r3, [r7, #32]
}
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	e7fd      	b.n	8005330 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00b      	beq.n	8005354 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	61fb      	str	r3, [r7, #28]
}
 800534e:	bf00      	nop
 8005350:	bf00      	nop
 8005352:	e7fd      	b.n	8005350 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d103      	bne.n	8005364 <xQueueGiveFromISR+0x5c>
 800535c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <xQueueGiveFromISR+0x60>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <xQueueGiveFromISR+0x62>
 8005368:	2300      	movs	r3, #0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10b      	bne.n	8005386 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	61bb      	str	r3, [r7, #24]
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	e7fd      	b.n	8005382 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005386:	f002 faaf 	bl	80078e8 <vPortValidateInterruptPriority>
	__asm volatile
 800538a:	f3ef 8211 	mrs	r2, BASEPRI
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	617a      	str	r2, [r7, #20]
 80053a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80053a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d22b      	bcs.n	800540e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d0:	d112      	bne.n	80053f8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d016      	beq.n	8005408 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053dc:	3324      	adds	r3, #36	@ 0x24
 80053de:	4618      	mov	r0, r3
 80053e0:	f001 f966 	bl	80066b0 <xTaskRemoveFromEventList>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00e      	beq.n	8005408 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	e007      	b.n	8005408 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053fc:	3301      	adds	r3, #1
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	b25a      	sxtb	r2, r3
 8005402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005408:	2301      	movs	r3, #1
 800540a:	637b      	str	r3, [r7, #52]	@ 0x34
 800540c:	e001      	b.n	8005412 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800540e:	2300      	movs	r3, #0
 8005410:	637b      	str	r3, [r7, #52]	@ 0x34
 8005412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005414:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f383 8811 	msr	BASEPRI, r3
}
 800541c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800541e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005420:	4618      	mov	r0, r3
 8005422:	3738      	adds	r7, #56	@ 0x38
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08c      	sub	sp, #48	@ 0x30
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005434:	2300      	movs	r3, #0
 8005436:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10b      	bne.n	800545a <xQueueReceive+0x32>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	623b      	str	r3, [r7, #32]
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop
 8005458:	e7fd      	b.n	8005456 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d103      	bne.n	8005468 <xQueueReceive+0x40>
 8005460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <xQueueReceive+0x44>
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <xQueueReceive+0x46>
 800546c:	2300      	movs	r3, #0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10b      	bne.n	800548a <xQueueReceive+0x62>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	61fb      	str	r3, [r7, #28]
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800548a:	f001 fae1 	bl	8006a50 <xTaskGetSchedulerState>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <xQueueReceive+0x72>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <xQueueReceive+0x76>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <xQueueReceive+0x78>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <xQueueReceive+0x94>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	61bb      	str	r3, [r7, #24]
}
 80054b6:	bf00      	nop
 80054b8:	bf00      	nop
 80054ba:	e7fd      	b.n	80054b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054bc:	f002 f934 	bl	8007728 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01f      	beq.n	800550c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054d0:	f000 fac4 	bl	8005a5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	1e5a      	subs	r2, r3, #1
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00f      	beq.n	8005504 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e6:	3310      	adds	r3, #16
 80054e8:	4618      	mov	r0, r3
 80054ea:	f001 f8e1 	bl	80066b0 <xTaskRemoveFromEventList>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054f4:	4b3c      	ldr	r3, [pc, #240]	@ (80055e8 <xQueueReceive+0x1c0>)
 80054f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005504:	f002 f942 	bl	800778c <vPortExitCritical>
				return pdPASS;
 8005508:	2301      	movs	r3, #1
 800550a:	e069      	b.n	80055e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005512:	f002 f93b 	bl	800778c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005516:	2300      	movs	r3, #0
 8005518:	e062      	b.n	80055e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800551a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d106      	bne.n	800552e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005520:	f107 0310 	add.w	r3, r7, #16
 8005524:	4618      	mov	r0, r3
 8005526:	f001 f927 	bl	8006778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800552a:	2301      	movs	r3, #1
 800552c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800552e:	f002 f92d 	bl	800778c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005532:	f000 fe85 	bl	8006240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005536:	f002 f8f7 	bl	8007728 <vPortEnterCritical>
 800553a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005540:	b25b      	sxtb	r3, r3
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005546:	d103      	bne.n	8005550 <xQueueReceive+0x128>
 8005548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005552:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005556:	b25b      	sxtb	r3, r3
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d103      	bne.n	8005566 <xQueueReceive+0x13e>
 800555e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005566:	f002 f911 	bl	800778c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800556a:	1d3a      	adds	r2, r7, #4
 800556c:	f107 0310 	add.w	r3, r7, #16
 8005570:	4611      	mov	r1, r2
 8005572:	4618      	mov	r0, r3
 8005574:	f001 f916 	bl	80067a4 <xTaskCheckForTimeOut>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d123      	bne.n	80055c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800557e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005580:	f000 fae4 	bl	8005b4c <prvIsQueueEmpty>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d017      	beq.n	80055ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	3324      	adds	r3, #36	@ 0x24
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	4611      	mov	r1, r2
 8005592:	4618      	mov	r0, r3
 8005594:	f001 f83a 	bl	800660c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005598:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800559a:	f000 fa85 	bl	8005aa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800559e:	f000 fe5d 	bl	800625c <xTaskResumeAll>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d189      	bne.n	80054bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80055a8:	4b0f      	ldr	r3, [pc, #60]	@ (80055e8 <xQueueReceive+0x1c0>)
 80055aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	e780      	b.n	80054bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80055ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055bc:	f000 fa74 	bl	8005aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055c0:	f000 fe4c 	bl	800625c <xTaskResumeAll>
 80055c4:	e77a      	b.n	80054bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055c8:	f000 fa6e 	bl	8005aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055cc:	f000 fe46 	bl	800625c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055d2:	f000 fabb 	bl	8005b4c <prvIsQueueEmpty>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f43f af6f 	beq.w	80054bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3730      	adds	r7, #48	@ 0x30
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	e000ed04 	.word	0xe000ed04

080055ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08e      	sub	sp, #56	@ 0x38
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80055fe:	2300      	movs	r3, #0
 8005600:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10b      	bne.n	8005620 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	623b      	str	r3, [r7, #32]
}
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	61fb      	str	r3, [r7, #28]
}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	e7fd      	b.n	800563c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005640:	f001 fa06 	bl	8006a50 <xTaskGetSchedulerState>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d102      	bne.n	8005650 <xQueueSemaphoreTake+0x64>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <xQueueSemaphoreTake+0x68>
 8005650:	2301      	movs	r3, #1
 8005652:	e000      	b.n	8005656 <xQueueSemaphoreTake+0x6a>
 8005654:	2300      	movs	r3, #0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	61bb      	str	r3, [r7, #24]
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	e7fd      	b.n	800566e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005672:	f002 f859 	bl	8007728 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800567c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d024      	beq.n	80056cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	1e5a      	subs	r2, r3, #1
 8005686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005688:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800568a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d104      	bne.n	800569c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005692:	f001 fb57 	bl	8006d44 <pvTaskIncrementMutexHeldCount>
 8005696:	4602      	mov	r2, r0
 8005698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800569c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00f      	beq.n	80056c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a6:	3310      	adds	r3, #16
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 f801 	bl	80066b0 <xTaskRemoveFromEventList>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056b4:	4b54      	ldr	r3, [pc, #336]	@ (8005808 <xQueueSemaphoreTake+0x21c>)
 80056b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056c4:	f002 f862 	bl	800778c <vPortExitCritical>
				return pdPASS;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e098      	b.n	80057fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d112      	bne.n	80056f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80056d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	617b      	str	r3, [r7, #20]
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80056f0:	f002 f84c 	bl	800778c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056f4:	2300      	movs	r3, #0
 80056f6:	e082      	b.n	80057fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056fe:	f107 030c 	add.w	r3, r7, #12
 8005702:	4618      	mov	r0, r3
 8005704:	f001 f838 	bl	8006778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005708:	2301      	movs	r3, #1
 800570a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800570c:	f002 f83e 	bl	800778c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005710:	f000 fd96 	bl	8006240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005714:	f002 f808 	bl	8007728 <vPortEnterCritical>
 8005718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800571e:	b25b      	sxtb	r3, r3
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005724:	d103      	bne.n	800572e <xQueueSemaphoreTake+0x142>
 8005726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800572e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005730:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005734:	b25b      	sxtb	r3, r3
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d103      	bne.n	8005744 <xQueueSemaphoreTake+0x158>
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005744:	f002 f822 	bl	800778c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005748:	463a      	mov	r2, r7
 800574a:	f107 030c 	add.w	r3, r7, #12
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f001 f827 	bl	80067a4 <xTaskCheckForTimeOut>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d132      	bne.n	80057c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800575c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800575e:	f000 f9f5 	bl	8005b4c <prvIsQueueEmpty>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d026      	beq.n	80057b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d109      	bne.n	8005784 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005770:	f001 ffda 	bl	8007728 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4618      	mov	r0, r3
 800577a:	f001 f987 	bl	8006a8c <xTaskPriorityInherit>
 800577e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005780:	f002 f804 	bl	800778c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005786:	3324      	adds	r3, #36	@ 0x24
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	4611      	mov	r1, r2
 800578c:	4618      	mov	r0, r3
 800578e:	f000 ff3d 	bl	800660c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005792:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005794:	f000 f988 	bl	8005aa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005798:	f000 fd60 	bl	800625c <xTaskResumeAll>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f47f af67 	bne.w	8005672 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80057a4:	4b18      	ldr	r3, [pc, #96]	@ (8005808 <xQueueSemaphoreTake+0x21c>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	e75d      	b.n	8005672 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80057b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057b8:	f000 f976 	bl	8005aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057bc:	f000 fd4e 	bl	800625c <xTaskResumeAll>
 80057c0:	e757      	b.n	8005672 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80057c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057c4:	f000 f970 	bl	8005aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057c8:	f000 fd48 	bl	800625c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057ce:	f000 f9bd 	bl	8005b4c <prvIsQueueEmpty>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f43f af4c 	beq.w	8005672 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80057da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00d      	beq.n	80057fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80057e0:	f001 ffa2 	bl	8007728 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80057e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057e6:	f000 f8b7 	bl	8005958 <prvGetDisinheritPriorityAfterTimeout>
 80057ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80057ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f001 fa22 	bl	8006c3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80057f8:	f001 ffc8 	bl	800778c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3738      	adds	r7, #56	@ 0x38
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	e000ed04 	.word	0xe000ed04

0800580c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08e      	sub	sp, #56	@ 0x38
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10b      	bne.n	800583a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	623b      	str	r3, [r7, #32]
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	e7fd      	b.n	8005836 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <xQueueReceiveFromISR+0x3c>
 8005840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <xQueueReceiveFromISR+0x40>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <xQueueReceiveFromISR+0x42>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10b      	bne.n	800586a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	61fb      	str	r3, [r7, #28]
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	e7fd      	b.n	8005866 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800586a:	f002 f83d 	bl	80078e8 <vPortValidateInterruptPriority>
	__asm volatile
 800586e:	f3ef 8211 	mrs	r2, BASEPRI
 8005872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	61ba      	str	r2, [r7, #24]
 8005884:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005886:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005888:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	d02f      	beq.n	80058f6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800589c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058a4:	f000 f8da 	bl	8005a5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058aa:	1e5a      	subs	r2, r3, #1
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80058b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d112      	bne.n	80058e0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	3310      	adds	r3, #16
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fef2 	bl	80066b0 <xTaskRemoveFromEventList>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00e      	beq.n	80058f0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	e007      	b.n	80058f0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80058e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058e4:	3301      	adds	r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	b25a      	sxtb	r2, r3
 80058ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80058f0:	2301      	movs	r3, #1
 80058f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80058f4:	e001      	b.n	80058fa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80058f6:	2300      	movs	r3, #0
 80058f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f383 8811 	msr	BASEPRI, r3
}
 8005904:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005908:	4618      	mov	r0, r3
 800590a:	3738      	adds	r7, #56	@ 0x38
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10b      	bne.n	800593a <vQueueDelete+0x2a>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60bb      	str	r3, [r7, #8]
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	e7fd      	b.n	8005936 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f95e 	bl	8005bfc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f002 f8dc 	bl	8007b08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005950:	bf00      	nop
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d006      	beq.n	8005976 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	e001      	b.n	800597a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800597a:	68fb      	ldr	r3, [r7, #12]
	}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10d      	bne.n	80059c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d14d      	bne.n	8005a4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 f8d2 	bl	8006b5c <xTaskPriorityDisinherit>
 80059b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	e043      	b.n	8005a4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d119      	bne.n	80059fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6858      	ldr	r0, [r3, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d0:	461a      	mov	r2, r3
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	f002 fa86 	bl	8007ee4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e0:	441a      	add	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d32b      	bcc.n	8005a4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	e026      	b.n	8005a4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	68d8      	ldr	r0, [r3, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a04:	461a      	mov	r2, r3
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	f002 fa6c 	bl	8007ee4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a14:	425b      	negs	r3, r3
 8005a16:	441a      	add	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d207      	bcs.n	8005a38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a30:	425b      	negs	r3, r3
 8005a32:	441a      	add	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d105      	bne.n	8005a4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a52:	697b      	ldr	r3, [r7, #20]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d018      	beq.n	8005aa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	441a      	add	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d303      	bcc.n	8005a90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68d9      	ldr	r1, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6838      	ldr	r0, [r7, #0]
 8005a9c:	f002 fa22 	bl	8007ee4 <memcpy>
	}
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ab0:	f001 fe3a 	bl	8007728 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005aba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005abc:	e011      	b.n	8005ae2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d012      	beq.n	8005aec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3324      	adds	r3, #36	@ 0x24
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fdf0 	bl	80066b0 <xTaskRemoveFromEventList>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ad6:	f000 fec9 	bl	800686c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	dce9      	bgt.n	8005abe <prvUnlockQueue+0x16>
 8005aea:	e000      	b.n	8005aee <prvUnlockQueue+0x46>
					break;
 8005aec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	22ff      	movs	r2, #255	@ 0xff
 8005af2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005af6:	f001 fe49 	bl	800778c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005afa:	f001 fe15 	bl	8007728 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b06:	e011      	b.n	8005b2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d012      	beq.n	8005b36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3310      	adds	r3, #16
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fdcb 	bl	80066b0 <xTaskRemoveFromEventList>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b20:	f000 fea4 	bl	800686c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b24:	7bbb      	ldrb	r3, [r7, #14]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	dce9      	bgt.n	8005b08 <prvUnlockQueue+0x60>
 8005b34:	e000      	b.n	8005b38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	22ff      	movs	r2, #255	@ 0xff
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b40:	f001 fe24 	bl	800778c <vPortExitCritical>
}
 8005b44:	bf00      	nop
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b54:	f001 fde8 	bl	8007728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e001      	b.n	8005b6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b6a:	f001 fe0f 	bl	800778c <vPortExitCritical>

	return xReturn;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b80:	f001 fdd2 	bl	8007728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d102      	bne.n	8005b96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e001      	b.n	8005b9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b9a:	f001 fdf7 	bl	800778c <vPortExitCritical>

	return xReturn;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e014      	b.n	8005be2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bb8:	4a0f      	ldr	r2, [pc, #60]	@ (8005bf8 <vQueueAddToRegistry+0x50>)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10b      	bne.n	8005bdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bc4:	490c      	ldr	r1, [pc, #48]	@ (8005bf8 <vQueueAddToRegistry+0x50>)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bce:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf8 <vQueueAddToRegistry+0x50>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bda:	e006      	b.n	8005bea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3301      	adds	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b07      	cmp	r3, #7
 8005be6:	d9e7      	bls.n	8005bb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	20000954 	.word	0x20000954

08005bfc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	e016      	b.n	8005c38 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005c0a:	4a10      	ldr	r2, [pc, #64]	@ (8005c4c <vQueueUnregisterQueue+0x50>)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	4413      	add	r3, r2
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d10b      	bne.n	8005c32 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c4c <vQueueUnregisterQueue+0x50>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2100      	movs	r1, #0
 8005c20:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005c24:	4a09      	ldr	r2, [pc, #36]	@ (8005c4c <vQueueUnregisterQueue+0x50>)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	605a      	str	r2, [r3, #4]
				break;
 8005c30:	e006      	b.n	8005c40 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3301      	adds	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b07      	cmp	r3, #7
 8005c3c:	d9e5      	bls.n	8005c0a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005c3e:	bf00      	nop
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	20000954 	.word	0x20000954

08005c50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c60:	f001 fd62 	bl	8007728 <vPortEnterCritical>
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c6a:	b25b      	sxtb	r3, r3
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d103      	bne.n	8005c7a <vQueueWaitForMessageRestricted+0x2a>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c80:	b25b      	sxtb	r3, r3
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c86:	d103      	bne.n	8005c90 <vQueueWaitForMessageRestricted+0x40>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c90:	f001 fd7c 	bl	800778c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d106      	bne.n	8005caa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	3324      	adds	r3, #36	@ 0x24
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fcd7 	bl	8006658 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005caa:	6978      	ldr	r0, [r7, #20]
 8005cac:	f7ff fefc 	bl	8005aa8 <prvUnlockQueue>
	}
 8005cb0:	bf00      	nop
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08e      	sub	sp, #56	@ 0x38
 8005cbc:	af04      	add	r7, sp, #16
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	623b      	str	r3, [r7, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	e7fd      	b.n	8005ce0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	61fb      	str	r3, [r7, #28]
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	e7fd      	b.n	8005cfe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d02:	235c      	movs	r3, #92	@ 0x5c
 8005d04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b5c      	cmp	r3, #92	@ 0x5c
 8005d0a:	d00b      	beq.n	8005d24 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	61bb      	str	r3, [r7, #24]
}
 8005d1e:	bf00      	nop
 8005d20:	bf00      	nop
 8005d22:	e7fd      	b.n	8005d20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01e      	beq.n	8005d6a <xTaskCreateStatic+0xb2>
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d01b      	beq.n	8005d6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d44:	2300      	movs	r3, #0
 8005d46:	9303      	str	r3, [sp, #12]
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	9302      	str	r3, [sp, #8]
 8005d4c:	f107 0314 	add.w	r3, r7, #20
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f850 	bl	8005e02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d64:	f000 f8de 	bl	8005f24 <prvAddNewTaskToReadyList>
 8005d68:	e001      	b.n	8005d6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d6e:	697b      	ldr	r3, [r7, #20]
	}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3728      	adds	r7, #40	@ 0x28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08c      	sub	sp, #48	@ 0x30
 8005d7c:	af04      	add	r7, sp, #16
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	4613      	mov	r3, r2
 8005d86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 fded 	bl	800796c <pvPortMalloc>
 8005d92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00e      	beq.n	8005db8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d9a:	205c      	movs	r0, #92	@ 0x5c
 8005d9c:	f001 fde6 	bl	800796c <pvPortMalloc>
 8005da0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	631a      	str	r2, [r3, #48]	@ 0x30
 8005dae:	e005      	b.n	8005dbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005db0:	6978      	ldr	r0, [r7, #20]
 8005db2:	f001 fea9 	bl	8007b08 <vPortFree>
 8005db6:	e001      	b.n	8005dbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d017      	beq.n	8005df2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005dca:	88fa      	ldrh	r2, [r7, #6]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	9303      	str	r3, [sp, #12]
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	9302      	str	r3, [sp, #8]
 8005dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f80e 	bl	8005e02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005de6:	69f8      	ldr	r0, [r7, #28]
 8005de8:	f000 f89c 	bl	8005f24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005dec:	2301      	movs	r3, #1
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	e002      	b.n	8005df8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295
 8005df6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005df8:	69bb      	ldr	r3, [r7, #24]
	}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3720      	adds	r7, #32
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b088      	sub	sp, #32
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
 8005e0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	461a      	mov	r2, r3
 8005e1a:	21a5      	movs	r1, #165	@ 0xa5
 8005e1c:	f002 f836 	bl	8007e8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	f023 0307 	bic.w	r3, r3, #7
 8005e38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f003 0307 	and.w	r3, r3, #7
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	617b      	str	r3, [r7, #20]
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	e7fd      	b.n	8005e58 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01f      	beq.n	8005ea2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
 8005e66:	e012      	b.n	8005e8e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	7819      	ldrb	r1, [r3, #0]
 8005e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	3334      	adds	r3, #52	@ 0x34
 8005e78:	460a      	mov	r2, r1
 8005e7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d006      	beq.n	8005e96 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	2b0f      	cmp	r3, #15
 8005e92:	d9e9      	bls.n	8005e68 <prvInitialiseNewTask+0x66>
 8005e94:	e000      	b.n	8005e98 <prvInitialiseNewTask+0x96>
			{
				break;
 8005e96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ea0:	e003      	b.n	8005eaa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	2b37      	cmp	r3, #55	@ 0x37
 8005eae:	d901      	bls.n	8005eb4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005eb0:	2337      	movs	r3, #55	@ 0x37
 8005eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ebe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe fd7c 	bl	80049c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed2:	3318      	adds	r3, #24
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fe fd77 	bl	80049c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ede:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	68f9      	ldr	r1, [r7, #12]
 8005f02:	69b8      	ldr	r0, [r7, #24]
 8005f04:	f001 fae0 	bl	80074c8 <pxPortInitialiseStack>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f1a:	bf00      	nop
 8005f1c:	3720      	adds	r7, #32
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f2c:	f001 fbfc 	bl	8007728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f30:	4b2d      	ldr	r3, [pc, #180]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc4>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3301      	adds	r3, #1
 8005f36:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc4>)
 8005f38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005fec <prvAddNewTaskToReadyList+0xc8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d109      	bne.n	8005f56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f42:	4a2a      	ldr	r2, [pc, #168]	@ (8005fec <prvAddNewTaskToReadyList+0xc8>)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f48:	4b27      	ldr	r3, [pc, #156]	@ (8005fe8 <prvAddNewTaskToReadyList+0xc4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d110      	bne.n	8005f72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f50:	f000 fcb0 	bl	80068b4 <prvInitialiseTaskLists>
 8005f54:	e00d      	b.n	8005f72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f56:	4b26      	ldr	r3, [pc, #152]	@ (8005ff0 <prvAddNewTaskToReadyList+0xcc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f5e:	4b23      	ldr	r3, [pc, #140]	@ (8005fec <prvAddNewTaskToReadyList+0xc8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d802      	bhi.n	8005f72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005fec <prvAddNewTaskToReadyList+0xc8>)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f72:	4b20      	ldr	r3, [pc, #128]	@ (8005ff4 <prvAddNewTaskToReadyList+0xd0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3301      	adds	r3, #1
 8005f78:	4a1e      	ldr	r2, [pc, #120]	@ (8005ff4 <prvAddNewTaskToReadyList+0xd0>)
 8005f7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ff4 <prvAddNewTaskToReadyList+0xd0>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f88:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff8 <prvAddNewTaskToReadyList+0xd4>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d903      	bls.n	8005f98 <prvAddNewTaskToReadyList+0x74>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f94:	4a18      	ldr	r2, [pc, #96]	@ (8005ff8 <prvAddNewTaskToReadyList+0xd4>)
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4a15      	ldr	r2, [pc, #84]	@ (8005ffc <prvAddNewTaskToReadyList+0xd8>)
 8005fa6:	441a      	add	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4619      	mov	r1, r3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	f7fe fd17 	bl	80049e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fb4:	f001 fbea 	bl	800778c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff0 <prvAddNewTaskToReadyList+0xcc>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00e      	beq.n	8005fde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fec <prvAddNewTaskToReadyList+0xc8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d207      	bcs.n	8005fde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fce:	4b0c      	ldr	r3, [pc, #48]	@ (8006000 <prvAddNewTaskToReadyList+0xdc>)
 8005fd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000e68 	.word	0x20000e68
 8005fec:	20000994 	.word	0x20000994
 8005ff0:	20000e74 	.word	0x20000e74
 8005ff4:	20000e84 	.word	0x20000e84
 8005ff8:	20000e70 	.word	0x20000e70
 8005ffc:	20000998 	.word	0x20000998
 8006000:	e000ed04 	.word	0xe000ed04

08006004 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08a      	sub	sp, #40	@ 0x28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800600e:	2300      	movs	r3, #0
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10b      	bne.n	8006030 <vTaskDelayUntil+0x2c>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	617b      	str	r3, [r7, #20]
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	e7fd      	b.n	800602c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <vTaskDelayUntil+0x4a>
	__asm volatile
 8006036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	613b      	str	r3, [r7, #16]
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	e7fd      	b.n	800604a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800604e:	4b2a      	ldr	r3, [pc, #168]	@ (80060f8 <vTaskDelayUntil+0xf4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00b      	beq.n	800606e <vTaskDelayUntil+0x6a>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	60fb      	str	r3, [r7, #12]
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	e7fd      	b.n	800606a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800606e:	f000 f8e7 	bl	8006240 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006072:	4b22      	ldr	r3, [pc, #136]	@ (80060fc <vTaskDelayUntil+0xf8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	4413      	add	r3, r2
 8006080:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a3a      	ldr	r2, [r7, #32]
 8006088:	429a      	cmp	r2, r3
 800608a:	d20b      	bcs.n	80060a4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	429a      	cmp	r2, r3
 8006094:	d211      	bcs.n	80060ba <vTaskDelayUntil+0xb6>
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	429a      	cmp	r2, r3
 800609c:	d90d      	bls.n	80060ba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800609e:	2301      	movs	r3, #1
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060a2:	e00a      	b.n	80060ba <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d303      	bcc.n	80060b6 <vTaskDelayUntil+0xb2>
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d901      	bls.n	80060ba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80060b6:	2301      	movs	r3, #1
 80060b8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d006      	beq.n	80060d4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2100      	movs	r1, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fe4c 	bl	8006d6c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80060d4:	f000 f8c2 	bl	800625c <xTaskResumeAll>
 80060d8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d107      	bne.n	80060f0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80060e0:	4b07      	ldr	r3, [pc, #28]	@ (8006100 <vTaskDelayUntil+0xfc>)
 80060e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060f0:	bf00      	nop
 80060f2:	3728      	adds	r7, #40	@ 0x28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	20000e90 	.word	0x20000e90
 80060fc:	20000e6c 	.word	0x20000e6c
 8006100:	e000ed04 	.word	0xe000ed04

08006104 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d018      	beq.n	8006148 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006116:	4b14      	ldr	r3, [pc, #80]	@ (8006168 <vTaskDelay+0x64>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <vTaskDelay+0x32>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	60bb      	str	r3, [r7, #8]
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006136:	f000 f883 	bl	8006240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800613a:	2100      	movs	r1, #0
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fe15 	bl	8006d6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006142:	f000 f88b 	bl	800625c <xTaskResumeAll>
 8006146:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d107      	bne.n	800615e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800614e:	4b07      	ldr	r3, [pc, #28]	@ (800616c <vTaskDelay+0x68>)
 8006150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800615e:	bf00      	nop
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000e90 	.word	0x20000e90
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	@ 0x28
 8006174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800617e:	463a      	mov	r2, r7
 8006180:	1d39      	adds	r1, r7, #4
 8006182:	f107 0308 	add.w	r3, r7, #8
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fbca 	bl	8004920 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	9202      	str	r2, [sp, #8]
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	2300      	movs	r3, #0
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	2300      	movs	r3, #0
 800619c:	460a      	mov	r2, r1
 800619e:	4922      	ldr	r1, [pc, #136]	@ (8006228 <vTaskStartScheduler+0xb8>)
 80061a0:	4822      	ldr	r0, [pc, #136]	@ (800622c <vTaskStartScheduler+0xbc>)
 80061a2:	f7ff fd89 	bl	8005cb8 <xTaskCreateStatic>
 80061a6:	4603      	mov	r3, r0
 80061a8:	4a21      	ldr	r2, [pc, #132]	@ (8006230 <vTaskStartScheduler+0xc0>)
 80061aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061ac:	4b20      	ldr	r3, [pc, #128]	@ (8006230 <vTaskStartScheduler+0xc0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061b4:	2301      	movs	r3, #1
 80061b6:	617b      	str	r3, [r7, #20]
 80061b8:	e001      	b.n	80061be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d102      	bne.n	80061ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80061c4:	f000 fe26 	bl	8006e14 <xTimerCreateTimerTask>
 80061c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d116      	bne.n	80061fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
}
 80061e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061e4:	4b13      	ldr	r3, [pc, #76]	@ (8006234 <vTaskStartScheduler+0xc4>)
 80061e6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061ec:	4b12      	ldr	r3, [pc, #72]	@ (8006238 <vTaskStartScheduler+0xc8>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061f2:	4b12      	ldr	r3, [pc, #72]	@ (800623c <vTaskStartScheduler+0xcc>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061f8:	f001 f9f2 	bl	80075e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061fc:	e00f      	b.n	800621e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d10b      	bne.n	800621e <vTaskStartScheduler+0xae>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60fb      	str	r3, [r7, #12]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <vTaskStartScheduler+0xaa>
}
 800621e:	bf00      	nop
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	08008098 	.word	0x08008098
 800622c:	08006885 	.word	0x08006885
 8006230:	20000e8c 	.word	0x20000e8c
 8006234:	20000e88 	.word	0x20000e88
 8006238:	20000e74 	.word	0x20000e74
 800623c:	20000e6c 	.word	0x20000e6c

08006240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006244:	4b04      	ldr	r3, [pc, #16]	@ (8006258 <vTaskSuspendAll+0x18>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3301      	adds	r3, #1
 800624a:	4a03      	ldr	r2, [pc, #12]	@ (8006258 <vTaskSuspendAll+0x18>)
 800624c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800624e:	bf00      	nop
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	20000e90 	.word	0x20000e90

0800625c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006266:	2300      	movs	r3, #0
 8006268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800626a:	4b42      	ldr	r3, [pc, #264]	@ (8006374 <xTaskResumeAll+0x118>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10b      	bne.n	800628a <xTaskResumeAll+0x2e>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	603b      	str	r3, [r7, #0]
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	e7fd      	b.n	8006286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800628a:	f001 fa4d 	bl	8007728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800628e:	4b39      	ldr	r3, [pc, #228]	@ (8006374 <xTaskResumeAll+0x118>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	3b01      	subs	r3, #1
 8006294:	4a37      	ldr	r2, [pc, #220]	@ (8006374 <xTaskResumeAll+0x118>)
 8006296:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006298:	4b36      	ldr	r3, [pc, #216]	@ (8006374 <xTaskResumeAll+0x118>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d162      	bne.n	8006366 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062a0:	4b35      	ldr	r3, [pc, #212]	@ (8006378 <xTaskResumeAll+0x11c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d05e      	beq.n	8006366 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062a8:	e02f      	b.n	800630a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062aa:	4b34      	ldr	r3, [pc, #208]	@ (800637c <xTaskResumeAll+0x120>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3318      	adds	r3, #24
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe fbf0 	bl	8004a9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3304      	adds	r3, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fbeb 	bl	8004a9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006380 <xTaskResumeAll+0x124>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d903      	bls.n	80062da <xTaskResumeAll+0x7e>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006380 <xTaskResumeAll+0x124>)
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a27      	ldr	r2, [pc, #156]	@ (8006384 <xTaskResumeAll+0x128>)
 80062e8:	441a      	add	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7fe fb76 	bl	80049e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fa:	4b23      	ldr	r3, [pc, #140]	@ (8006388 <xTaskResumeAll+0x12c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006300:	429a      	cmp	r2, r3
 8006302:	d302      	bcc.n	800630a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006304:	4b21      	ldr	r3, [pc, #132]	@ (800638c <xTaskResumeAll+0x130>)
 8006306:	2201      	movs	r2, #1
 8006308:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800630a:	4b1c      	ldr	r3, [pc, #112]	@ (800637c <xTaskResumeAll+0x120>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1cb      	bne.n	80062aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006318:	f000 fb6a 	bl	80069f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800631c:	4b1c      	ldr	r3, [pc, #112]	@ (8006390 <xTaskResumeAll+0x134>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d010      	beq.n	800634a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006328:	f000 f858 	bl	80063dc <xTaskIncrementTick>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006332:	4b16      	ldr	r3, [pc, #88]	@ (800638c <xTaskResumeAll+0x130>)
 8006334:	2201      	movs	r2, #1
 8006336:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3b01      	subs	r3, #1
 800633c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1f1      	bne.n	8006328 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006344:	4b12      	ldr	r3, [pc, #72]	@ (8006390 <xTaskResumeAll+0x134>)
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800634a:	4b10      	ldr	r3, [pc, #64]	@ (800638c <xTaskResumeAll+0x130>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006352:	2301      	movs	r3, #1
 8006354:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006356:	4b0f      	ldr	r3, [pc, #60]	@ (8006394 <xTaskResumeAll+0x138>)
 8006358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006366:	f001 fa11 	bl	800778c <vPortExitCritical>

	return xAlreadyYielded;
 800636a:	68bb      	ldr	r3, [r7, #8]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000e90 	.word	0x20000e90
 8006378:	20000e68 	.word	0x20000e68
 800637c:	20000e28 	.word	0x20000e28
 8006380:	20000e70 	.word	0x20000e70
 8006384:	20000998 	.word	0x20000998
 8006388:	20000994 	.word	0x20000994
 800638c:	20000e7c 	.word	0x20000e7c
 8006390:	20000e78 	.word	0x20000e78
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800639e:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <xTaskGetTickCount+0x1c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063a4:	687b      	ldr	r3, [r7, #4]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000e6c 	.word	0x20000e6c

080063b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063be:	f001 fa93 	bl	80078e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80063c2:	2300      	movs	r3, #0
 80063c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80063c6:	4b04      	ldr	r3, [pc, #16]	@ (80063d8 <xTaskGetTickCountFromISR+0x20>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063cc:	683b      	ldr	r3, [r7, #0]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000e6c 	.word	0x20000e6c

080063dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e6:	4b4f      	ldr	r3, [pc, #316]	@ (8006524 <xTaskIncrementTick+0x148>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f040 8090 	bne.w	8006510 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063f0:	4b4d      	ldr	r3, [pc, #308]	@ (8006528 <xTaskIncrementTick+0x14c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3301      	adds	r3, #1
 80063f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063f8:	4a4b      	ldr	r2, [pc, #300]	@ (8006528 <xTaskIncrementTick+0x14c>)
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d121      	bne.n	8006448 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006404:	4b49      	ldr	r3, [pc, #292]	@ (800652c <xTaskIncrementTick+0x150>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <xTaskIncrementTick+0x4a>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	603b      	str	r3, [r7, #0]
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	e7fd      	b.n	8006422 <xTaskIncrementTick+0x46>
 8006426:	4b41      	ldr	r3, [pc, #260]	@ (800652c <xTaskIncrementTick+0x150>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	4b40      	ldr	r3, [pc, #256]	@ (8006530 <xTaskIncrementTick+0x154>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a3e      	ldr	r2, [pc, #248]	@ (800652c <xTaskIncrementTick+0x150>)
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	4a3e      	ldr	r2, [pc, #248]	@ (8006530 <xTaskIncrementTick+0x154>)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	4b3e      	ldr	r3, [pc, #248]	@ (8006534 <xTaskIncrementTick+0x158>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3301      	adds	r3, #1
 8006440:	4a3c      	ldr	r2, [pc, #240]	@ (8006534 <xTaskIncrementTick+0x158>)
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	f000 fad4 	bl	80069f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006448:	4b3b      	ldr	r3, [pc, #236]	@ (8006538 <xTaskIncrementTick+0x15c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	d349      	bcc.n	80064e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006452:	4b36      	ldr	r3, [pc, #216]	@ (800652c <xTaskIncrementTick+0x150>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d104      	bne.n	8006466 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800645c:	4b36      	ldr	r3, [pc, #216]	@ (8006538 <xTaskIncrementTick+0x15c>)
 800645e:	f04f 32ff 	mov.w	r2, #4294967295
 8006462:	601a      	str	r2, [r3, #0]
					break;
 8006464:	e03f      	b.n	80064e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006466:	4b31      	ldr	r3, [pc, #196]	@ (800652c <xTaskIncrementTick+0x150>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	429a      	cmp	r2, r3
 800647c:	d203      	bcs.n	8006486 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800647e:	4a2e      	ldr	r2, [pc, #184]	@ (8006538 <xTaskIncrementTick+0x15c>)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006484:	e02f      	b.n	80064e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	3304      	adds	r3, #4
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe fb06 	bl	8004a9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	3318      	adds	r3, #24
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe fafd 	bl	8004a9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a6:	4b25      	ldr	r3, [pc, #148]	@ (800653c <xTaskIncrementTick+0x160>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d903      	bls.n	80064b6 <xTaskIncrementTick+0xda>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b2:	4a22      	ldr	r2, [pc, #136]	@ (800653c <xTaskIncrementTick+0x160>)
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ba:	4613      	mov	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006540 <xTaskIncrementTick+0x164>)
 80064c4:	441a      	add	r2, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	3304      	adds	r3, #4
 80064ca:	4619      	mov	r1, r3
 80064cc:	4610      	mov	r0, r2
 80064ce:	f7fe fa88 	bl	80049e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006544 <xTaskIncrementTick+0x168>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064dc:	429a      	cmp	r2, r3
 80064de:	d3b8      	bcc.n	8006452 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80064e0:	2301      	movs	r3, #1
 80064e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064e4:	e7b5      	b.n	8006452 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064e6:	4b17      	ldr	r3, [pc, #92]	@ (8006544 <xTaskIncrementTick+0x168>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ec:	4914      	ldr	r1, [pc, #80]	@ (8006540 <xTaskIncrementTick+0x164>)
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	440b      	add	r3, r1
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d901      	bls.n	8006502 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80064fe:	2301      	movs	r3, #1
 8006500:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006502:	4b11      	ldr	r3, [pc, #68]	@ (8006548 <xTaskIncrementTick+0x16c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800650a:	2301      	movs	r3, #1
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e004      	b.n	800651a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006510:	4b0e      	ldr	r3, [pc, #56]	@ (800654c <xTaskIncrementTick+0x170>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	4a0d      	ldr	r2, [pc, #52]	@ (800654c <xTaskIncrementTick+0x170>)
 8006518:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800651a:	697b      	ldr	r3, [r7, #20]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000e90 	.word	0x20000e90
 8006528:	20000e6c 	.word	0x20000e6c
 800652c:	20000e20 	.word	0x20000e20
 8006530:	20000e24 	.word	0x20000e24
 8006534:	20000e80 	.word	0x20000e80
 8006538:	20000e88 	.word	0x20000e88
 800653c:	20000e70 	.word	0x20000e70
 8006540:	20000998 	.word	0x20000998
 8006544:	20000994 	.word	0x20000994
 8006548:	20000e7c 	.word	0x20000e7c
 800654c:	20000e78 	.word	0x20000e78

08006550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006556:	4b28      	ldr	r3, [pc, #160]	@ (80065f8 <vTaskSwitchContext+0xa8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800655e:	4b27      	ldr	r3, [pc, #156]	@ (80065fc <vTaskSwitchContext+0xac>)
 8006560:	2201      	movs	r2, #1
 8006562:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006564:	e042      	b.n	80065ec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006566:	4b25      	ldr	r3, [pc, #148]	@ (80065fc <vTaskSwitchContext+0xac>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800656c:	4b24      	ldr	r3, [pc, #144]	@ (8006600 <vTaskSwitchContext+0xb0>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	e011      	b.n	8006598 <vTaskSwitchContext+0x48>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <vTaskSwitchContext+0x42>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	607b      	str	r3, [r7, #4]
}
 800658c:	bf00      	nop
 800658e:	bf00      	nop
 8006590:	e7fd      	b.n	800658e <vTaskSwitchContext+0x3e>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3b01      	subs	r3, #1
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	491a      	ldr	r1, [pc, #104]	@ (8006604 <vTaskSwitchContext+0xb4>)
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0e3      	beq.n	8006574 <vTaskSwitchContext+0x24>
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4a13      	ldr	r2, [pc, #76]	@ (8006604 <vTaskSwitchContext+0xb4>)
 80065b8:	4413      	add	r3, r2
 80065ba:	60bb      	str	r3, [r7, #8]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	605a      	str	r2, [r3, #4]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	3308      	adds	r3, #8
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d104      	bne.n	80065dc <vTaskSwitchContext+0x8c>
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	605a      	str	r2, [r3, #4]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	4a09      	ldr	r2, [pc, #36]	@ (8006608 <vTaskSwitchContext+0xb8>)
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	4a06      	ldr	r2, [pc, #24]	@ (8006600 <vTaskSwitchContext+0xb0>)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6013      	str	r3, [r2, #0]
}
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	20000e90 	.word	0x20000e90
 80065fc:	20000e7c 	.word	0x20000e7c
 8006600:	20000e70 	.word	0x20000e70
 8006604:	20000998 	.word	0x20000998
 8006608:	20000994 	.word	0x20000994

0800660c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60fb      	str	r3, [r7, #12]
}
 800662e:	bf00      	nop
 8006630:	bf00      	nop
 8006632:	e7fd      	b.n	8006630 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006634:	4b07      	ldr	r3, [pc, #28]	@ (8006654 <vTaskPlaceOnEventList+0x48>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3318      	adds	r3, #24
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7fe f9f4 	bl	8004a2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006642:	2101      	movs	r1, #1
 8006644:	6838      	ldr	r0, [r7, #0]
 8006646:	f000 fb91 	bl	8006d6c <prvAddCurrentTaskToDelayedList>
}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000994 	.word	0x20000994

08006658 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10b      	bne.n	8006682 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	617b      	str	r3, [r7, #20]
}
 800667c:	bf00      	nop
 800667e:	bf00      	nop
 8006680:	e7fd      	b.n	800667e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006682:	4b0a      	ldr	r3, [pc, #40]	@ (80066ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3318      	adds	r3, #24
 8006688:	4619      	mov	r1, r3
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7fe f9a9 	bl	80049e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006696:	f04f 33ff 	mov.w	r3, #4294967295
 800669a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	68b8      	ldr	r0, [r7, #8]
 80066a0:	f000 fb64 	bl	8006d6c <prvAddCurrentTaskToDelayedList>
	}
 80066a4:	bf00      	nop
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000994 	.word	0x20000994

080066b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	60fb      	str	r3, [r7, #12]
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	e7fd      	b.n	80066da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3318      	adds	r3, #24
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fe f9da 	bl	8004a9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006760 <xTaskRemoveFromEventList+0xb0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d11d      	bne.n	800672c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fe f9d1 	bl	8004a9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fe:	4b19      	ldr	r3, [pc, #100]	@ (8006764 <xTaskRemoveFromEventList+0xb4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d903      	bls.n	800670e <xTaskRemoveFromEventList+0x5e>
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670a:	4a16      	ldr	r2, [pc, #88]	@ (8006764 <xTaskRemoveFromEventList+0xb4>)
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4a13      	ldr	r2, [pc, #76]	@ (8006768 <xTaskRemoveFromEventList+0xb8>)
 800671c:	441a      	add	r2, r3
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	3304      	adds	r3, #4
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f7fe f95c 	bl	80049e2 <vListInsertEnd>
 800672a:	e005      	b.n	8006738 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3318      	adds	r3, #24
 8006730:	4619      	mov	r1, r3
 8006732:	480e      	ldr	r0, [pc, #56]	@ (800676c <xTaskRemoveFromEventList+0xbc>)
 8006734:	f7fe f955 	bl	80049e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673c:	4b0c      	ldr	r3, [pc, #48]	@ (8006770 <xTaskRemoveFromEventList+0xc0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006742:	429a      	cmp	r2, r3
 8006744:	d905      	bls.n	8006752 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006746:	2301      	movs	r3, #1
 8006748:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800674a:	4b0a      	ldr	r3, [pc, #40]	@ (8006774 <xTaskRemoveFromEventList+0xc4>)
 800674c:	2201      	movs	r2, #1
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	e001      	b.n	8006756 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006752:	2300      	movs	r3, #0
 8006754:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006756:	697b      	ldr	r3, [r7, #20]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20000e90 	.word	0x20000e90
 8006764:	20000e70 	.word	0x20000e70
 8006768:	20000998 	.word	0x20000998
 800676c:	20000e28 	.word	0x20000e28
 8006770:	20000994 	.word	0x20000994
 8006774:	20000e7c 	.word	0x20000e7c

08006778 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006780:	4b06      	ldr	r3, [pc, #24]	@ (800679c <vTaskInternalSetTimeOutState+0x24>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006788:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <vTaskInternalSetTimeOutState+0x28>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	605a      	str	r2, [r3, #4]
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	20000e80 	.word	0x20000e80
 80067a0:	20000e6c 	.word	0x20000e6c

080067a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10b      	bne.n	80067cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	613b      	str	r3, [r7, #16]
}
 80067c6:	bf00      	nop
 80067c8:	bf00      	nop
 80067ca:	e7fd      	b.n	80067c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	60fb      	str	r3, [r7, #12]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80067ea:	f000 ff9d 	bl	8007728 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006864 <xTaskCheckForTimeOut+0xc0>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006806:	d102      	bne.n	800680e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006808:	2300      	movs	r3, #0
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	e023      	b.n	8006856 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	4b15      	ldr	r3, [pc, #84]	@ (8006868 <xTaskCheckForTimeOut+0xc4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d007      	beq.n	800682a <xTaskCheckForTimeOut+0x86>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	429a      	cmp	r2, r3
 8006822:	d302      	bcc.n	800682a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006824:	2301      	movs	r3, #1
 8006826:	61fb      	str	r3, [r7, #28]
 8006828:	e015      	b.n	8006856 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	429a      	cmp	r2, r3
 8006832:	d20b      	bcs.n	800684c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	1ad2      	subs	r2, r2, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff ff99 	bl	8006778 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006846:	2300      	movs	r3, #0
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	e004      	b.n	8006856 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006852:	2301      	movs	r3, #1
 8006854:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006856:	f000 ff99 	bl	800778c <vPortExitCritical>

	return xReturn;
 800685a:	69fb      	ldr	r3, [r7, #28]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3720      	adds	r7, #32
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	20000e6c 	.word	0x20000e6c
 8006868:	20000e80 	.word	0x20000e80

0800686c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006870:	4b03      	ldr	r3, [pc, #12]	@ (8006880 <vTaskMissedYield+0x14>)
 8006872:	2201      	movs	r2, #1
 8006874:	601a      	str	r2, [r3, #0]
}
 8006876:	bf00      	nop
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	20000e7c 	.word	0x20000e7c

08006884 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800688c:	f000 f852 	bl	8006934 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006890:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <prvIdleTask+0x28>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d9f9      	bls.n	800688c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006898:	4b05      	ldr	r3, [pc, #20]	@ (80068b0 <prvIdleTask+0x2c>)
 800689a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068a8:	e7f0      	b.n	800688c <prvIdleTask+0x8>
 80068aa:	bf00      	nop
 80068ac:	20000998 	.word	0x20000998
 80068b0:	e000ed04 	.word	0xe000ed04

080068b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068ba:	2300      	movs	r3, #0
 80068bc:	607b      	str	r3, [r7, #4]
 80068be:	e00c      	b.n	80068da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4a12      	ldr	r2, [pc, #72]	@ (8006914 <prvInitialiseTaskLists+0x60>)
 80068cc:	4413      	add	r3, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe f85a 	bl	8004988 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3301      	adds	r3, #1
 80068d8:	607b      	str	r3, [r7, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b37      	cmp	r3, #55	@ 0x37
 80068de:	d9ef      	bls.n	80068c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068e0:	480d      	ldr	r0, [pc, #52]	@ (8006918 <prvInitialiseTaskLists+0x64>)
 80068e2:	f7fe f851 	bl	8004988 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068e6:	480d      	ldr	r0, [pc, #52]	@ (800691c <prvInitialiseTaskLists+0x68>)
 80068e8:	f7fe f84e 	bl	8004988 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068ec:	480c      	ldr	r0, [pc, #48]	@ (8006920 <prvInitialiseTaskLists+0x6c>)
 80068ee:	f7fe f84b 	bl	8004988 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068f2:	480c      	ldr	r0, [pc, #48]	@ (8006924 <prvInitialiseTaskLists+0x70>)
 80068f4:	f7fe f848 	bl	8004988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068f8:	480b      	ldr	r0, [pc, #44]	@ (8006928 <prvInitialiseTaskLists+0x74>)
 80068fa:	f7fe f845 	bl	8004988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068fe:	4b0b      	ldr	r3, [pc, #44]	@ (800692c <prvInitialiseTaskLists+0x78>)
 8006900:	4a05      	ldr	r2, [pc, #20]	@ (8006918 <prvInitialiseTaskLists+0x64>)
 8006902:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006904:	4b0a      	ldr	r3, [pc, #40]	@ (8006930 <prvInitialiseTaskLists+0x7c>)
 8006906:	4a05      	ldr	r2, [pc, #20]	@ (800691c <prvInitialiseTaskLists+0x68>)
 8006908:	601a      	str	r2, [r3, #0]
}
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000998 	.word	0x20000998
 8006918:	20000df8 	.word	0x20000df8
 800691c:	20000e0c 	.word	0x20000e0c
 8006920:	20000e28 	.word	0x20000e28
 8006924:	20000e3c 	.word	0x20000e3c
 8006928:	20000e54 	.word	0x20000e54
 800692c:	20000e20 	.word	0x20000e20
 8006930:	20000e24 	.word	0x20000e24

08006934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800693a:	e019      	b.n	8006970 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800693c:	f000 fef4 	bl	8007728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006940:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <prvCheckTasksWaitingTermination+0x50>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3304      	adds	r3, #4
 800694c:	4618      	mov	r0, r3
 800694e:	f7fe f8a5 	bl	8004a9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006952:	4b0d      	ldr	r3, [pc, #52]	@ (8006988 <prvCheckTasksWaitingTermination+0x54>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3b01      	subs	r3, #1
 8006958:	4a0b      	ldr	r2, [pc, #44]	@ (8006988 <prvCheckTasksWaitingTermination+0x54>)
 800695a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800695c:	4b0b      	ldr	r3, [pc, #44]	@ (800698c <prvCheckTasksWaitingTermination+0x58>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3b01      	subs	r3, #1
 8006962:	4a0a      	ldr	r2, [pc, #40]	@ (800698c <prvCheckTasksWaitingTermination+0x58>)
 8006964:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006966:	f000 ff11 	bl	800778c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f810 	bl	8006990 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006970:	4b06      	ldr	r3, [pc, #24]	@ (800698c <prvCheckTasksWaitingTermination+0x58>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e1      	bne.n	800693c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000e3c 	.word	0x20000e3c
 8006988:	20000e68 	.word	0x20000e68
 800698c:	20000e50 	.word	0x20000e50

08006990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d108      	bne.n	80069b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a6:	4618      	mov	r0, r3
 80069a8:	f001 f8ae 	bl	8007b08 <vPortFree>
				vPortFree( pxTCB );
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 f8ab 	bl	8007b08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80069b2:	e019      	b.n	80069e8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d103      	bne.n	80069c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 f8a2 	bl	8007b08 <vPortFree>
	}
 80069c4:	e010      	b.n	80069e8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d00b      	beq.n	80069e8 <prvDeleteTCB+0x58>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	60fb      	str	r3, [r7, #12]
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <prvDeleteTCB+0x54>
	}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006a28 <prvResetNextTaskUnblockTime+0x38>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d104      	bne.n	8006a0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a00:	4b0a      	ldr	r3, [pc, #40]	@ (8006a2c <prvResetNextTaskUnblockTime+0x3c>)
 8006a02:	f04f 32ff 	mov.w	r2, #4294967295
 8006a06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a08:	e008      	b.n	8006a1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a0a:	4b07      	ldr	r3, [pc, #28]	@ (8006a28 <prvResetNextTaskUnblockTime+0x38>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	4a04      	ldr	r2, [pc, #16]	@ (8006a2c <prvResetNextTaskUnblockTime+0x3c>)
 8006a1a:	6013      	str	r3, [r2, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	20000e20 	.word	0x20000e20
 8006a2c:	20000e88 	.word	0x20000e88

08006a30 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006a36:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <xTaskGetCurrentTaskHandle+0x1c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006a3c:	687b      	ldr	r3, [r7, #4]
	}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	20000994 	.word	0x20000994

08006a50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a56:	4b0b      	ldr	r3, [pc, #44]	@ (8006a84 <xTaskGetSchedulerState+0x34>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d102      	bne.n	8006a64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	607b      	str	r3, [r7, #4]
 8006a62:	e008      	b.n	8006a76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a64:	4b08      	ldr	r3, [pc, #32]	@ (8006a88 <xTaskGetSchedulerState+0x38>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d102      	bne.n	8006a72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	607b      	str	r3, [r7, #4]
 8006a70:	e001      	b.n	8006a76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a72:	2300      	movs	r3, #0
 8006a74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a76:	687b      	ldr	r3, [r7, #4]
	}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	20000e74 	.word	0x20000e74
 8006a88:	20000e90 	.word	0x20000e90

08006a8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d051      	beq.n	8006b46 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b50 <xTaskPriorityInherit+0xc4>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d241      	bcs.n	8006b34 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	db06      	blt.n	8006ac6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab8:	4b25      	ldr	r3, [pc, #148]	@ (8006b50 <xTaskPriorityInherit+0xc4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6959      	ldr	r1, [r3, #20]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b54 <xTaskPriorityInherit+0xc8>)
 8006ad8:	4413      	add	r3, r2
 8006ada:	4299      	cmp	r1, r3
 8006adc:	d122      	bne.n	8006b24 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fd ffda 	bl	8004a9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ae8:	4b19      	ldr	r3, [pc, #100]	@ (8006b50 <xTaskPriorityInherit+0xc4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af6:	4b18      	ldr	r3, [pc, #96]	@ (8006b58 <xTaskPriorityInherit+0xcc>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d903      	bls.n	8006b06 <xTaskPriorityInherit+0x7a>
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b02:	4a15      	ldr	r2, [pc, #84]	@ (8006b58 <xTaskPriorityInherit+0xcc>)
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4a10      	ldr	r2, [pc, #64]	@ (8006b54 <xTaskPriorityInherit+0xc8>)
 8006b14:	441a      	add	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	f7fd ff60 	bl	80049e2 <vListInsertEnd>
 8006b22:	e004      	b.n	8006b2e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b24:	4b0a      	ldr	r3, [pc, #40]	@ (8006b50 <xTaskPriorityInherit+0xc4>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	e008      	b.n	8006b46 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b38:	4b05      	ldr	r3, [pc, #20]	@ (8006b50 <xTaskPriorityInherit+0xc4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d201      	bcs.n	8006b46 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006b42:	2301      	movs	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b46:	68fb      	ldr	r3, [r7, #12]
	}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20000994 	.word	0x20000994
 8006b54:	20000998 	.word	0x20000998
 8006b58:	20000e70 	.word	0x20000e70

08006b5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d058      	beq.n	8006c24 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b72:	4b2f      	ldr	r3, [pc, #188]	@ (8006c30 <xTaskPriorityDisinherit+0xd4>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d00b      	beq.n	8006b94 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	60fb      	str	r3, [r7, #12]
}
 8006b8e:	bf00      	nop
 8006b90:	bf00      	nop
 8006b92:	e7fd      	b.n	8006b90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10b      	bne.n	8006bb4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	60bb      	str	r3, [r7, #8]
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb8:	1e5a      	subs	r2, r3, #1
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d02c      	beq.n	8006c24 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d128      	bne.n	8006c24 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fd ff60 	bl	8004a9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8006c34 <xTaskPriorityDisinherit+0xd8>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d903      	bls.n	8006c04 <xTaskPriorityDisinherit+0xa8>
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c00:	4a0c      	ldr	r2, [pc, #48]	@ (8006c34 <xTaskPriorityDisinherit+0xd8>)
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4a09      	ldr	r2, [pc, #36]	@ (8006c38 <xTaskPriorityDisinherit+0xdc>)
 8006c12:	441a      	add	r2, r3
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	f7fd fee1 	bl	80049e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c20:	2301      	movs	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c24:	697b      	ldr	r3, [r7, #20]
	}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000994 	.word	0x20000994
 8006c34:	20000e70 	.word	0x20000e70
 8006c38:	20000998 	.word	0x20000998

08006c3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d06c      	beq.n	8006d2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10b      	bne.n	8006c74 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	60fb      	str	r3, [r7, #12]
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	e7fd      	b.n	8006c70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d902      	bls.n	8006c84 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	e002      	b.n	8006c8a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c88:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8e:	69fa      	ldr	r2, [r7, #28]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d04c      	beq.n	8006d2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d147      	bne.n	8006d2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c9e:	4b26      	ldr	r3, [pc, #152]	@ (8006d38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d10b      	bne.n	8006cc0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	60bb      	str	r3, [r7, #8]
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	e7fd      	b.n	8006cbc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	db04      	blt.n	8006cde <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	6959      	ldr	r1, [r3, #20]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4a13      	ldr	r2, [pc, #76]	@ (8006d3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006cee:	4413      	add	r3, r2
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	d11c      	bne.n	8006d2e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fd fecf 	bl	8004a9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d02:	4b0f      	ldr	r3, [pc, #60]	@ (8006d40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d903      	bls.n	8006d12 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8006d40 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4a07      	ldr	r2, [pc, #28]	@ (8006d3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006d20:	441a      	add	r2, r3
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	3304      	adds	r3, #4
 8006d26:	4619      	mov	r1, r3
 8006d28:	4610      	mov	r0, r2
 8006d2a:	f7fd fe5a 	bl	80049e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d2e:	bf00      	nop
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000994 	.word	0x20000994
 8006d3c:	20000998 	.word	0x20000998
 8006d40:	20000e70 	.word	0x20000e70

08006d44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d48:	4b07      	ldr	r3, [pc, #28]	@ (8006d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d50:	4b05      	ldr	r3, [pc, #20]	@ (8006d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d56:	3201      	adds	r2, #1
 8006d58:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006d5a:	4b03      	ldr	r3, [pc, #12]	@ (8006d68 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	20000994 	.word	0x20000994

08006d6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d76:	4b21      	ldr	r3, [pc, #132]	@ (8006dfc <prvAddCurrentTaskToDelayedList+0x90>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d7c:	4b20      	ldr	r3, [pc, #128]	@ (8006e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3304      	adds	r3, #4
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fd fe8a 	bl	8004a9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8e:	d10a      	bne.n	8006da6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d96:	4b1a      	ldr	r3, [pc, #104]	@ (8006e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4819      	ldr	r0, [pc, #100]	@ (8006e04 <prvAddCurrentTaskToDelayedList+0x98>)
 8006da0:	f7fd fe1f 	bl	80049e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006da4:	e026      	b.n	8006df4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4413      	add	r3, r2
 8006dac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006dae:	4b14      	ldr	r3, [pc, #80]	@ (8006e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d209      	bcs.n	8006dd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dbe:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	4619      	mov	r1, r3
 8006dca:	4610      	mov	r0, r2
 8006dcc:	f7fd fe2d 	bl	8004a2a <vListInsert>
}
 8006dd0:	e010      	b.n	8006df4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8006e0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006e00 <prvAddCurrentTaskToDelayedList+0x94>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4610      	mov	r0, r2
 8006de0:	f7fd fe23 	bl	8004a2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006de4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d202      	bcs.n	8006df4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006dee:	4a08      	ldr	r2, [pc, #32]	@ (8006e10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6013      	str	r3, [r2, #0]
}
 8006df4:	bf00      	nop
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000e6c 	.word	0x20000e6c
 8006e00:	20000994 	.word	0x20000994
 8006e04:	20000e54 	.word	0x20000e54
 8006e08:	20000e24 	.word	0x20000e24
 8006e0c:	20000e20 	.word	0x20000e20
 8006e10:	20000e88 	.word	0x20000e88

08006e14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08a      	sub	sp, #40	@ 0x28
 8006e18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006e1e:	f000 fb13 	bl	8007448 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e22:	4b1d      	ldr	r3, [pc, #116]	@ (8006e98 <xTimerCreateTimerTask+0x84>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d021      	beq.n	8006e6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006e32:	1d3a      	adds	r2, r7, #4
 8006e34:	f107 0108 	add.w	r1, r7, #8
 8006e38:	f107 030c 	add.w	r3, r7, #12
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fd fd89 	bl	8004954 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006e42:	6879      	ldr	r1, [r7, #4]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	9202      	str	r2, [sp, #8]
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	2300      	movs	r3, #0
 8006e52:	460a      	mov	r2, r1
 8006e54:	4911      	ldr	r1, [pc, #68]	@ (8006e9c <xTimerCreateTimerTask+0x88>)
 8006e56:	4812      	ldr	r0, [pc, #72]	@ (8006ea0 <xTimerCreateTimerTask+0x8c>)
 8006e58:	f7fe ff2e 	bl	8005cb8 <xTaskCreateStatic>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	4a11      	ldr	r2, [pc, #68]	@ (8006ea4 <xTimerCreateTimerTask+0x90>)
 8006e60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006e62:	4b10      	ldr	r3, [pc, #64]	@ (8006ea4 <xTimerCreateTimerTask+0x90>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	613b      	str	r3, [r7, #16]
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	e7fd      	b.n	8006e88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006e8c:	697b      	ldr	r3, [r7, #20]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000ec4 	.word	0x20000ec4
 8006e9c:	080080a0 	.word	0x080080a0
 8006ea0:	08006fe1 	.word	0x08006fe1
 8006ea4:	20000ec8 	.word	0x20000ec8

08006ea8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	@ 0x28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	623b      	str	r3, [r7, #32]
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ed8:	4b19      	ldr	r3, [pc, #100]	@ (8006f40 <xTimerGenericCommand+0x98>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d02a      	beq.n	8006f36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b05      	cmp	r3, #5
 8006ef0:	dc18      	bgt.n	8006f24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ef2:	f7ff fdad 	bl	8006a50 <xTaskGetSchedulerState>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d109      	bne.n	8006f10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006efc:	4b10      	ldr	r3, [pc, #64]	@ (8006f40 <xTimerGenericCommand+0x98>)
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	f107 0110 	add.w	r1, r7, #16
 8006f04:	2300      	movs	r3, #0
 8006f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f08:	f7fe f85e 	bl	8004fc8 <xQueueGenericSend>
 8006f0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f0e:	e012      	b.n	8006f36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f10:	4b0b      	ldr	r3, [pc, #44]	@ (8006f40 <xTimerGenericCommand+0x98>)
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	f107 0110 	add.w	r1, r7, #16
 8006f18:	2300      	movs	r3, #0
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f7fe f854 	bl	8004fc8 <xQueueGenericSend>
 8006f20:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f22:	e008      	b.n	8006f36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f24:	4b06      	ldr	r3, [pc, #24]	@ (8006f40 <xTimerGenericCommand+0x98>)
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	f107 0110 	add.w	r1, r7, #16
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	f7fe f94c 	bl	80051cc <xQueueGenericSendFromISR>
 8006f34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3728      	adds	r7, #40	@ 0x28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20000ec4 	.word	0x20000ec4

08006f44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b088      	sub	sp, #32
 8006f48:	af02      	add	r7, sp, #8
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f4e:	4b23      	ldr	r3, [pc, #140]	@ (8006fdc <prvProcessExpiredTimer+0x98>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fd fd9d 	bl	8004a9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f68:	f003 0304 	and.w	r3, r3, #4
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d023      	beq.n	8006fb8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	699a      	ldr	r2, [r3, #24]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	18d1      	adds	r1, r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	6978      	ldr	r0, [r7, #20]
 8006f7e:	f000 f8d5 	bl	800712c <prvInsertTimerInActiveList>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d020      	beq.n	8006fca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	2100      	movs	r1, #0
 8006f92:	6978      	ldr	r0, [r7, #20]
 8006f94:	f7ff ff88 	bl	8006ea8 <xTimerGenericCommand>
 8006f98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d114      	bne.n	8006fca <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	60fb      	str	r3, [r7, #12]
}
 8006fb2:	bf00      	nop
 8006fb4:	bf00      	nop
 8006fb6:	e7fd      	b.n	8006fb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fbe:	f023 0301 	bic.w	r3, r3, #1
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	6978      	ldr	r0, [r7, #20]
 8006fd0:	4798      	blx	r3
}
 8006fd2:	bf00      	nop
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000ebc 	.word	0x20000ebc

08006fe0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006fe8:	f107 0308 	add.w	r3, r7, #8
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 f859 	bl	80070a4 <prvGetNextExpireTime>
 8006ff2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 f805 	bl	8007008 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ffe:	f000 f8d7 	bl	80071b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007002:	bf00      	nop
 8007004:	e7f0      	b.n	8006fe8 <prvTimerTask+0x8>
	...

08007008 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007012:	f7ff f915 	bl	8006240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007016:	f107 0308 	add.w	r3, r7, #8
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f866 	bl	80070ec <prvSampleTimeNow>
 8007020:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d130      	bne.n	800708a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <prvProcessTimerOrBlockTask+0x3c>
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	429a      	cmp	r2, r3
 8007034:	d806      	bhi.n	8007044 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007036:	f7ff f911 	bl	800625c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800703a:	68f9      	ldr	r1, [r7, #12]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff ff81 	bl	8006f44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007042:	e024      	b.n	800708e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d008      	beq.n	800705c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800704a:	4b13      	ldr	r3, [pc, #76]	@ (8007098 <prvProcessTimerOrBlockTask+0x90>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <prvProcessTimerOrBlockTask+0x50>
 8007054:	2301      	movs	r3, #1
 8007056:	e000      	b.n	800705a <prvProcessTimerOrBlockTask+0x52>
 8007058:	2300      	movs	r3, #0
 800705a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800705c:	4b0f      	ldr	r3, [pc, #60]	@ (800709c <prvProcessTimerOrBlockTask+0x94>)
 800705e:	6818      	ldr	r0, [r3, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	4619      	mov	r1, r3
 800706a:	f7fe fdf1 	bl	8005c50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800706e:	f7ff f8f5 	bl	800625c <xTaskResumeAll>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007078:	4b09      	ldr	r3, [pc, #36]	@ (80070a0 <prvProcessTimerOrBlockTask+0x98>)
 800707a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	f3bf 8f6f 	isb	sy
}
 8007088:	e001      	b.n	800708e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800708a:	f7ff f8e7 	bl	800625c <xTaskResumeAll>
}
 800708e:	bf00      	nop
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	20000ec0 	.word	0x20000ec0
 800709c:	20000ec4 	.word	0x20000ec4
 80070a0:	e000ed04 	.word	0xe000ed04

080070a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070ac:	4b0e      	ldr	r3, [pc, #56]	@ (80070e8 <prvGetNextExpireTime+0x44>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <prvGetNextExpireTime+0x16>
 80070b6:	2201      	movs	r2, #1
 80070b8:	e000      	b.n	80070bc <prvGetNextExpireTime+0x18>
 80070ba:	2200      	movs	r2, #0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d105      	bne.n	80070d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070c8:	4b07      	ldr	r3, [pc, #28]	@ (80070e8 <prvGetNextExpireTime+0x44>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	e001      	b.n	80070d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80070d8:	68fb      	ldr	r3, [r7, #12]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	20000ebc 	.word	0x20000ebc

080070ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80070f4:	f7ff f950 	bl	8006398 <xTaskGetTickCount>
 80070f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80070fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007128 <prvSampleTimeNow+0x3c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	429a      	cmp	r2, r3
 8007102:	d205      	bcs.n	8007110 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007104:	f000 f93a 	bl	800737c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	e002      	b.n	8007116 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007116:	4a04      	ldr	r2, [pc, #16]	@ (8007128 <prvSampleTimeNow+0x3c>)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800711c:	68fb      	ldr	r3, [r7, #12]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000ecc 	.word	0x20000ecc

0800712c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800713a:	2300      	movs	r3, #0
 800713c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	429a      	cmp	r2, r3
 8007150:	d812      	bhi.n	8007178 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	1ad2      	subs	r2, r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	429a      	cmp	r2, r3
 800715e:	d302      	bcc.n	8007166 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007160:	2301      	movs	r3, #1
 8007162:	617b      	str	r3, [r7, #20]
 8007164:	e01b      	b.n	800719e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007166:	4b10      	ldr	r3, [pc, #64]	@ (80071a8 <prvInsertTimerInActiveList+0x7c>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3304      	adds	r3, #4
 800716e:	4619      	mov	r1, r3
 8007170:	4610      	mov	r0, r2
 8007172:	f7fd fc5a 	bl	8004a2a <vListInsert>
 8007176:	e012      	b.n	800719e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	d206      	bcs.n	800718e <prvInsertTimerInActiveList+0x62>
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	d302      	bcc.n	800718e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007188:	2301      	movs	r3, #1
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	e007      	b.n	800719e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800718e:	4b07      	ldr	r3, [pc, #28]	@ (80071ac <prvInsertTimerInActiveList+0x80>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3304      	adds	r3, #4
 8007196:	4619      	mov	r1, r3
 8007198:	4610      	mov	r0, r2
 800719a:	f7fd fc46 	bl	8004a2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800719e:	697b      	ldr	r3, [r7, #20]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	20000ec0 	.word	0x20000ec0
 80071ac:	20000ebc 	.word	0x20000ebc

080071b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08e      	sub	sp, #56	@ 0x38
 80071b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071b6:	e0ce      	b.n	8007356 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	da19      	bge.n	80071f2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80071be:	1d3b      	adds	r3, r7, #4
 80071c0:	3304      	adds	r3, #4
 80071c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80071c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	61fb      	str	r3, [r7, #28]
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	e7fd      	b.n	80071de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80071e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071e8:	6850      	ldr	r0, [r2, #4]
 80071ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071ec:	6892      	ldr	r2, [r2, #8]
 80071ee:	4611      	mov	r1, r2
 80071f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f2c0 80ae 	blt.w	8007356 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d004      	beq.n	8007210 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007208:	3304      	adds	r3, #4
 800720a:	4618      	mov	r0, r3
 800720c:	f7fd fc46 	bl	8004a9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007210:	463b      	mov	r3, r7
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff ff6a 	bl	80070ec <prvSampleTimeNow>
 8007218:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b09      	cmp	r3, #9
 800721e:	f200 8097 	bhi.w	8007350 <prvProcessReceivedCommands+0x1a0>
 8007222:	a201      	add	r2, pc, #4	@ (adr r2, 8007228 <prvProcessReceivedCommands+0x78>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007251 	.word	0x08007251
 800722c:	08007251 	.word	0x08007251
 8007230:	08007251 	.word	0x08007251
 8007234:	080072c7 	.word	0x080072c7
 8007238:	080072db 	.word	0x080072db
 800723c:	08007327 	.word	0x08007327
 8007240:	08007251 	.word	0x08007251
 8007244:	08007251 	.word	0x08007251
 8007248:	080072c7 	.word	0x080072c7
 800724c:	080072db 	.word	0x080072db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007256:	f043 0301 	orr.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	18d1      	adds	r1, r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800726e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007270:	f7ff ff5c 	bl	800712c <prvInsertTimerInActiveList>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d06c      	beq.n	8007354 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800727a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007280:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	2b00      	cmp	r3, #0
 800728e:	d061      	beq.n	8007354 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	441a      	add	r2, r3
 8007298:	2300      	movs	r3, #0
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	2300      	movs	r3, #0
 800729e:	2100      	movs	r1, #0
 80072a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072a2:	f7ff fe01 	bl	8006ea8 <xTimerGenericCommand>
 80072a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d152      	bne.n	8007354 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	61bb      	str	r3, [r7, #24]
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80072d8:	e03d      	b.n	8007356 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10b      	bne.n	8007312 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	617b      	str	r3, [r7, #20]
}
 800730c:	bf00      	nop
 800730e:	bf00      	nop
 8007310:	e7fd      	b.n	800730e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	18d1      	adds	r1, r2, r3
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800731e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007320:	f7ff ff04 	bl	800712c <prvInsertTimerInActiveList>
					break;
 8007324:	e017      	b.n	8007356 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d103      	bne.n	800733c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007336:	f000 fbe7 	bl	8007b08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800733a:	e00c      	b.n	8007356 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800733c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007342:	f023 0301 	bic.w	r3, r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800734e:	e002      	b.n	8007356 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007350:	bf00      	nop
 8007352:	e000      	b.n	8007356 <prvProcessReceivedCommands+0x1a6>
					break;
 8007354:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007356:	4b08      	ldr	r3, [pc, #32]	@ (8007378 <prvProcessReceivedCommands+0x1c8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	1d39      	adds	r1, r7, #4
 800735c:	2200      	movs	r2, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe f862 	bl	8005428 <xQueueReceive>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	f47f af26 	bne.w	80071b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	3730      	adds	r7, #48	@ 0x30
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000ec4 	.word	0x20000ec4

0800737c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007382:	e049      	b.n	8007418 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007384:	4b2e      	ldr	r3, [pc, #184]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800738e:	4b2c      	ldr	r3, [pc, #176]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3304      	adds	r3, #4
 800739c:	4618      	mov	r0, r3
 800739e:	f7fd fb7d 	bl	8004a9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d02f      	beq.n	8007418 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4413      	add	r3, r2
 80073c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d90e      	bls.n	80073e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3304      	adds	r3, #4
 80073de:	4619      	mov	r1, r3
 80073e0:	4610      	mov	r0, r2
 80073e2:	f7fd fb22 	bl	8004a2a <vListInsert>
 80073e6:	e017      	b.n	8007418 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073e8:	2300      	movs	r3, #0
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	2300      	movs	r3, #0
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	2100      	movs	r1, #0
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7ff fd58 	bl	8006ea8 <xTimerGenericCommand>
 80073f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10b      	bne.n	8007418 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	603b      	str	r3, [r7, #0]
}
 8007412:	bf00      	nop
 8007414:	bf00      	nop
 8007416:	e7fd      	b.n	8007414 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007418:	4b09      	ldr	r3, [pc, #36]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1b0      	bne.n	8007384 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007422:	4b07      	ldr	r3, [pc, #28]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007428:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <prvSwitchTimerLists+0xc8>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a04      	ldr	r2, [pc, #16]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 800742e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007430:	4a04      	ldr	r2, [pc, #16]	@ (8007444 <prvSwitchTimerLists+0xc8>)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	6013      	str	r3, [r2, #0]
}
 8007436:	bf00      	nop
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000ebc 	.word	0x20000ebc
 8007444:	20000ec0 	.word	0x20000ec0

08007448 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800744e:	f000 f96b 	bl	8007728 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007452:	4b15      	ldr	r3, [pc, #84]	@ (80074a8 <prvCheckForValidListAndQueue+0x60>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d120      	bne.n	800749c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800745a:	4814      	ldr	r0, [pc, #80]	@ (80074ac <prvCheckForValidListAndQueue+0x64>)
 800745c:	f7fd fa94 	bl	8004988 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007460:	4813      	ldr	r0, [pc, #76]	@ (80074b0 <prvCheckForValidListAndQueue+0x68>)
 8007462:	f7fd fa91 	bl	8004988 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007466:	4b13      	ldr	r3, [pc, #76]	@ (80074b4 <prvCheckForValidListAndQueue+0x6c>)
 8007468:	4a10      	ldr	r2, [pc, #64]	@ (80074ac <prvCheckForValidListAndQueue+0x64>)
 800746a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800746c:	4b12      	ldr	r3, [pc, #72]	@ (80074b8 <prvCheckForValidListAndQueue+0x70>)
 800746e:	4a10      	ldr	r2, [pc, #64]	@ (80074b0 <prvCheckForValidListAndQueue+0x68>)
 8007470:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007472:	2300      	movs	r3, #0
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	4b11      	ldr	r3, [pc, #68]	@ (80074bc <prvCheckForValidListAndQueue+0x74>)
 8007478:	4a11      	ldr	r2, [pc, #68]	@ (80074c0 <prvCheckForValidListAndQueue+0x78>)
 800747a:	2110      	movs	r1, #16
 800747c:	200a      	movs	r0, #10
 800747e:	f7fd fba1 	bl	8004bc4 <xQueueGenericCreateStatic>
 8007482:	4603      	mov	r3, r0
 8007484:	4a08      	ldr	r2, [pc, #32]	@ (80074a8 <prvCheckForValidListAndQueue+0x60>)
 8007486:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007488:	4b07      	ldr	r3, [pc, #28]	@ (80074a8 <prvCheckForValidListAndQueue+0x60>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d005      	beq.n	800749c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007490:	4b05      	ldr	r3, [pc, #20]	@ (80074a8 <prvCheckForValidListAndQueue+0x60>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	490b      	ldr	r1, [pc, #44]	@ (80074c4 <prvCheckForValidListAndQueue+0x7c>)
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fb86 	bl	8005ba8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800749c:	f000 f976 	bl	800778c <vPortExitCritical>
}
 80074a0:	bf00      	nop
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000ec4 	.word	0x20000ec4
 80074ac:	20000e94 	.word	0x20000e94
 80074b0:	20000ea8 	.word	0x20000ea8
 80074b4:	20000ebc 	.word	0x20000ebc
 80074b8:	20000ec0 	.word	0x20000ec0
 80074bc:	20000f70 	.word	0x20000f70
 80074c0:	20000ed0 	.word	0x20000ed0
 80074c4:	080080a8 	.word	0x080080a8

080074c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3b04      	subs	r3, #4
 80074d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80074e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3b04      	subs	r3, #4
 80074e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f023 0201 	bic.w	r2, r3, #1
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3b04      	subs	r3, #4
 80074f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074f8:	4a0c      	ldr	r2, [pc, #48]	@ (800752c <pxPortInitialiseStack+0x64>)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3b14      	subs	r3, #20
 8007502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3b04      	subs	r3, #4
 800750e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f06f 0202 	mvn.w	r2, #2
 8007516:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3b20      	subs	r3, #32
 800751c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800751e:	68fb      	ldr	r3, [r7, #12]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	08007531 	.word	0x08007531

08007530 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800753a:	4b13      	ldr	r3, [pc, #76]	@ (8007588 <prvTaskExitError+0x58>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007542:	d00b      	beq.n	800755c <prvTaskExitError+0x2c>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60fb      	str	r3, [r7, #12]
}
 8007556:	bf00      	nop
 8007558:	bf00      	nop
 800755a:	e7fd      	b.n	8007558 <prvTaskExitError+0x28>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	60bb      	str	r3, [r7, #8]
}
 800756e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007570:	bf00      	nop
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0fc      	beq.n	8007572 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007578:	bf00      	nop
 800757a:	bf00      	nop
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	2000006c 	.word	0x2000006c
 800758c:	00000000 	.word	0x00000000

08007590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007590:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <pxCurrentTCBConst2>)
 8007592:	6819      	ldr	r1, [r3, #0]
 8007594:	6808      	ldr	r0, [r1, #0]
 8007596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759a:	f380 8809 	msr	PSP, r0
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f04f 0000 	mov.w	r0, #0
 80075a6:	f380 8811 	msr	BASEPRI, r0
 80075aa:	4770      	bx	lr
 80075ac:	f3af 8000 	nop.w

080075b0 <pxCurrentTCBConst2>:
 80075b0:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop

080075b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80075b8:	4808      	ldr	r0, [pc, #32]	@ (80075dc <prvPortStartFirstTask+0x24>)
 80075ba:	6800      	ldr	r0, [r0, #0]
 80075bc:	6800      	ldr	r0, [r0, #0]
 80075be:	f380 8808 	msr	MSP, r0
 80075c2:	f04f 0000 	mov.w	r0, #0
 80075c6:	f380 8814 	msr	CONTROL, r0
 80075ca:	b662      	cpsie	i
 80075cc:	b661      	cpsie	f
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	df00      	svc	0
 80075d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80075da:	bf00      	nop
 80075dc:	e000ed08 	.word	0xe000ed08

080075e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80075e6:	4b47      	ldr	r3, [pc, #284]	@ (8007704 <xPortStartScheduler+0x124>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a47      	ldr	r2, [pc, #284]	@ (8007708 <xPortStartScheduler+0x128>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d10b      	bne.n	8007608 <xPortStartScheduler+0x28>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	613b      	str	r3, [r7, #16]
}
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	e7fd      	b.n	8007604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007608:	4b3e      	ldr	r3, [pc, #248]	@ (8007704 <xPortStartScheduler+0x124>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a3f      	ldr	r2, [pc, #252]	@ (800770c <xPortStartScheduler+0x12c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d10b      	bne.n	800762a <xPortStartScheduler+0x4a>
	__asm volatile
 8007612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	60fb      	str	r3, [r7, #12]
}
 8007624:	bf00      	nop
 8007626:	bf00      	nop
 8007628:	e7fd      	b.n	8007626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800762a:	4b39      	ldr	r3, [pc, #228]	@ (8007710 <xPortStartScheduler+0x130>)
 800762c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	22ff      	movs	r2, #255	@ 0xff
 800763a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	b2db      	uxtb	r3, r3
 8007642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007644:	78fb      	ldrb	r3, [r7, #3]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800764c:	b2da      	uxtb	r2, r3
 800764e:	4b31      	ldr	r3, [pc, #196]	@ (8007714 <xPortStartScheduler+0x134>)
 8007650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007652:	4b31      	ldr	r3, [pc, #196]	@ (8007718 <xPortStartScheduler+0x138>)
 8007654:	2207      	movs	r2, #7
 8007656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007658:	e009      	b.n	800766e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800765a:	4b2f      	ldr	r3, [pc, #188]	@ (8007718 <xPortStartScheduler+0x138>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3b01      	subs	r3, #1
 8007660:	4a2d      	ldr	r2, [pc, #180]	@ (8007718 <xPortStartScheduler+0x138>)
 8007662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	b2db      	uxtb	r3, r3
 800766c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007676:	2b80      	cmp	r3, #128	@ 0x80
 8007678:	d0ef      	beq.n	800765a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800767a:	4b27      	ldr	r3, [pc, #156]	@ (8007718 <xPortStartScheduler+0x138>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f1c3 0307 	rsb	r3, r3, #7
 8007682:	2b04      	cmp	r3, #4
 8007684:	d00b      	beq.n	800769e <xPortStartScheduler+0xbe>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	60bb      	str	r3, [r7, #8]
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	e7fd      	b.n	800769a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800769e:	4b1e      	ldr	r3, [pc, #120]	@ (8007718 <xPortStartScheduler+0x138>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007718 <xPortStartScheduler+0x138>)
 80076a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007718 <xPortStartScheduler+0x138>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80076b0:	4a19      	ldr	r2, [pc, #100]	@ (8007718 <xPortStartScheduler+0x138>)
 80076b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076bc:	4b17      	ldr	r3, [pc, #92]	@ (800771c <xPortStartScheduler+0x13c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a16      	ldr	r2, [pc, #88]	@ (800771c <xPortStartScheduler+0x13c>)
 80076c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80076c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076c8:	4b14      	ldr	r3, [pc, #80]	@ (800771c <xPortStartScheduler+0x13c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a13      	ldr	r2, [pc, #76]	@ (800771c <xPortStartScheduler+0x13c>)
 80076ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80076d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076d4:	f000 f8da 	bl	800788c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076d8:	4b11      	ldr	r3, [pc, #68]	@ (8007720 <xPortStartScheduler+0x140>)
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80076de:	f000 f8f9 	bl	80078d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80076e2:	4b10      	ldr	r3, [pc, #64]	@ (8007724 <xPortStartScheduler+0x144>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007724 <xPortStartScheduler+0x144>)
 80076e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80076ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076ee:	f7ff ff63 	bl	80075b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076f2:	f7fe ff2d 	bl	8006550 <vTaskSwitchContext>
	prvTaskExitError();
 80076f6:	f7ff ff1b 	bl	8007530 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	e000ed00 	.word	0xe000ed00
 8007708:	410fc271 	.word	0x410fc271
 800770c:	410fc270 	.word	0x410fc270
 8007710:	e000e400 	.word	0xe000e400
 8007714:	20000fc0 	.word	0x20000fc0
 8007718:	20000fc4 	.word	0x20000fc4
 800771c:	e000ed20 	.word	0xe000ed20
 8007720:	2000006c 	.word	0x2000006c
 8007724:	e000ef34 	.word	0xe000ef34

08007728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	607b      	str	r3, [r7, #4]
}
 8007740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007742:	4b10      	ldr	r3, [pc, #64]	@ (8007784 <vPortEnterCritical+0x5c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3301      	adds	r3, #1
 8007748:	4a0e      	ldr	r2, [pc, #56]	@ (8007784 <vPortEnterCritical+0x5c>)
 800774a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800774c:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <vPortEnterCritical+0x5c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d110      	bne.n	8007776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007754:	4b0c      	ldr	r3, [pc, #48]	@ (8007788 <vPortEnterCritical+0x60>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <vPortEnterCritical+0x4e>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	603b      	str	r3, [r7, #0]
}
 8007770:	bf00      	nop
 8007772:	bf00      	nop
 8007774:	e7fd      	b.n	8007772 <vPortEnterCritical+0x4a>
	}
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	2000006c 	.word	0x2000006c
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007792:	4b12      	ldr	r3, [pc, #72]	@ (80077dc <vPortExitCritical+0x50>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10b      	bne.n	80077b2 <vPortExitCritical+0x26>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	607b      	str	r3, [r7, #4]
}
 80077ac:	bf00      	nop
 80077ae:	bf00      	nop
 80077b0:	e7fd      	b.n	80077ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80077b2:	4b0a      	ldr	r3, [pc, #40]	@ (80077dc <vPortExitCritical+0x50>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	4a08      	ldr	r2, [pc, #32]	@ (80077dc <vPortExitCritical+0x50>)
 80077ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077bc:	4b07      	ldr	r3, [pc, #28]	@ (80077dc <vPortExitCritical+0x50>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d105      	bne.n	80077d0 <vPortExitCritical+0x44>
 80077c4:	2300      	movs	r3, #0
 80077c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	f383 8811 	msr	BASEPRI, r3
}
 80077ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	2000006c 	.word	0x2000006c

080077e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077e0:	f3ef 8009 	mrs	r0, PSP
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	4b15      	ldr	r3, [pc, #84]	@ (8007840 <pxCurrentTCBConst>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	f01e 0f10 	tst.w	lr, #16
 80077f0:	bf08      	it	eq
 80077f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80077f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fa:	6010      	str	r0, [r2, #0]
 80077fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007804:	f380 8811 	msr	BASEPRI, r0
 8007808:	f3bf 8f4f 	dsb	sy
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f7fe fe9e 	bl	8006550 <vTaskSwitchContext>
 8007814:	f04f 0000 	mov.w	r0, #0
 8007818:	f380 8811 	msr	BASEPRI, r0
 800781c:	bc09      	pop	{r0, r3}
 800781e:	6819      	ldr	r1, [r3, #0]
 8007820:	6808      	ldr	r0, [r1, #0]
 8007822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007826:	f01e 0f10 	tst.w	lr, #16
 800782a:	bf08      	it	eq
 800782c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007830:	f380 8809 	msr	PSP, r0
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	f3af 8000 	nop.w

08007840 <pxCurrentTCBConst>:
 8007840:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007844:	bf00      	nop
 8007846:	bf00      	nop

08007848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	607b      	str	r3, [r7, #4]
}
 8007860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007862:	f7fe fdbb 	bl	80063dc <xTaskIncrementTick>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800786c:	4b06      	ldr	r3, [pc, #24]	@ (8007888 <xPortSysTickHandler+0x40>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	2300      	movs	r3, #0
 8007876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f383 8811 	msr	BASEPRI, r3
}
 800787e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	e000ed04 	.word	0xe000ed04

0800788c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007890:	4b0b      	ldr	r3, [pc, #44]	@ (80078c0 <vPortSetupTimerInterrupt+0x34>)
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007896:	4b0b      	ldr	r3, [pc, #44]	@ (80078c4 <vPortSetupTimerInterrupt+0x38>)
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800789c:	4b0a      	ldr	r3, [pc, #40]	@ (80078c8 <vPortSetupTimerInterrupt+0x3c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a0a      	ldr	r2, [pc, #40]	@ (80078cc <vPortSetupTimerInterrupt+0x40>)
 80078a2:	fba2 2303 	umull	r2, r3, r2, r3
 80078a6:	099b      	lsrs	r3, r3, #6
 80078a8:	4a09      	ldr	r2, [pc, #36]	@ (80078d0 <vPortSetupTimerInterrupt+0x44>)
 80078aa:	3b01      	subs	r3, #1
 80078ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80078ae:	4b04      	ldr	r3, [pc, #16]	@ (80078c0 <vPortSetupTimerInterrupt+0x34>)
 80078b0:	2207      	movs	r2, #7
 80078b2:	601a      	str	r2, [r3, #0]
}
 80078b4:	bf00      	nop
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	e000e010 	.word	0xe000e010
 80078c4:	e000e018 	.word	0xe000e018
 80078c8:	20000060 	.word	0x20000060
 80078cc:	10624dd3 	.word	0x10624dd3
 80078d0:	e000e014 	.word	0xe000e014

080078d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80078d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80078e4 <vPortEnableVFP+0x10>
 80078d8:	6801      	ldr	r1, [r0, #0]
 80078da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80078de:	6001      	str	r1, [r0, #0]
 80078e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80078e2:	bf00      	nop
 80078e4:	e000ed88 	.word	0xe000ed88

080078e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80078e8:	b480      	push	{r7}
 80078ea:	b085      	sub	sp, #20
 80078ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80078ee:	f3ef 8305 	mrs	r3, IPSR
 80078f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b0f      	cmp	r3, #15
 80078f8:	d915      	bls.n	8007926 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80078fa:	4a18      	ldr	r2, [pc, #96]	@ (800795c <vPortValidateInterruptPriority+0x74>)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007904:	4b16      	ldr	r3, [pc, #88]	@ (8007960 <vPortValidateInterruptPriority+0x78>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	7afa      	ldrb	r2, [r7, #11]
 800790a:	429a      	cmp	r2, r3
 800790c:	d20b      	bcs.n	8007926 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800790e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007912:	f383 8811 	msr	BASEPRI, r3
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	607b      	str	r3, [r7, #4]
}
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	e7fd      	b.n	8007922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007926:	4b0f      	ldr	r3, [pc, #60]	@ (8007964 <vPortValidateInterruptPriority+0x7c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800792e:	4b0e      	ldr	r3, [pc, #56]	@ (8007968 <vPortValidateInterruptPriority+0x80>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d90b      	bls.n	800794e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	603b      	str	r3, [r7, #0]
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	e7fd      	b.n	800794a <vPortValidateInterruptPriority+0x62>
	}
 800794e:	bf00      	nop
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	e000e3f0 	.word	0xe000e3f0
 8007960:	20000fc0 	.word	0x20000fc0
 8007964:	e000ed0c 	.word	0xe000ed0c
 8007968:	20000fc4 	.word	0x20000fc4

0800796c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08a      	sub	sp, #40	@ 0x28
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007974:	2300      	movs	r3, #0
 8007976:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007978:	f7fe fc62 	bl	8006240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800797c:	4b5c      	ldr	r3, [pc, #368]	@ (8007af0 <pvPortMalloc+0x184>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007984:	f000 f924 	bl	8007bd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007988:	4b5a      	ldr	r3, [pc, #360]	@ (8007af4 <pvPortMalloc+0x188>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4013      	ands	r3, r2
 8007990:	2b00      	cmp	r3, #0
 8007992:	f040 8095 	bne.w	8007ac0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d01e      	beq.n	80079da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800799c:	2208      	movs	r2, #8
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4413      	add	r3, r2
 80079a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d015      	beq.n	80079da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f023 0307 	bic.w	r3, r3, #7
 80079b4:	3308      	adds	r3, #8
 80079b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <pvPortMalloc+0x6e>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	617b      	str	r3, [r7, #20]
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	e7fd      	b.n	80079d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d06f      	beq.n	8007ac0 <pvPortMalloc+0x154>
 80079e0:	4b45      	ldr	r3, [pc, #276]	@ (8007af8 <pvPortMalloc+0x18c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d86a      	bhi.n	8007ac0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80079ea:	4b44      	ldr	r3, [pc, #272]	@ (8007afc <pvPortMalloc+0x190>)
 80079ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80079ee:	4b43      	ldr	r3, [pc, #268]	@ (8007afc <pvPortMalloc+0x190>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079f4:	e004      	b.n	8007a00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d903      	bls.n	8007a12 <pvPortMalloc+0xa6>
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1f1      	bne.n	80079f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a12:	4b37      	ldr	r3, [pc, #220]	@ (8007af0 <pvPortMalloc+0x184>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d051      	beq.n	8007ac0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2208      	movs	r2, #8
 8007a22:	4413      	add	r3, r2
 8007a24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	1ad2      	subs	r2, r2, r3
 8007a36:	2308      	movs	r3, #8
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d920      	bls.n	8007a80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4413      	add	r3, r2
 8007a44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	f003 0307 	and.w	r3, r3, #7
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00b      	beq.n	8007a68 <pvPortMalloc+0xfc>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	613b      	str	r3, [r7, #16]
}
 8007a62:	bf00      	nop
 8007a64:	bf00      	nop
 8007a66:	e7fd      	b.n	8007a64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	1ad2      	subs	r2, r2, r3
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a7a:	69b8      	ldr	r0, [r7, #24]
 8007a7c:	f000 f90a 	bl	8007c94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a80:	4b1d      	ldr	r3, [pc, #116]	@ (8007af8 <pvPortMalloc+0x18c>)
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007af8 <pvPortMalloc+0x18c>)
 8007a8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007af8 <pvPortMalloc+0x18c>)
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	4b1b      	ldr	r3, [pc, #108]	@ (8007b00 <pvPortMalloc+0x194>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d203      	bcs.n	8007aa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a9a:	4b17      	ldr	r3, [pc, #92]	@ (8007af8 <pvPortMalloc+0x18c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a18      	ldr	r2, [pc, #96]	@ (8007b00 <pvPortMalloc+0x194>)
 8007aa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	4b13      	ldr	r3, [pc, #76]	@ (8007af4 <pvPortMalloc+0x188>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007ab6:	4b13      	ldr	r3, [pc, #76]	@ (8007b04 <pvPortMalloc+0x198>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3301      	adds	r3, #1
 8007abc:	4a11      	ldr	r2, [pc, #68]	@ (8007b04 <pvPortMalloc+0x198>)
 8007abe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ac0:	f7fe fbcc 	bl	800625c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00b      	beq.n	8007ae6 <pvPortMalloc+0x17a>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	60fb      	str	r3, [r7, #12]
}
 8007ae0:	bf00      	nop
 8007ae2:	bf00      	nop
 8007ae4:	e7fd      	b.n	8007ae2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ae6:	69fb      	ldr	r3, [r7, #28]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3728      	adds	r7, #40	@ 0x28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	20004bd0 	.word	0x20004bd0
 8007af4:	20004be4 	.word	0x20004be4
 8007af8:	20004bd4 	.word	0x20004bd4
 8007afc:	20004bc8 	.word	0x20004bc8
 8007b00:	20004bd8 	.word	0x20004bd8
 8007b04:	20004bdc 	.word	0x20004bdc

08007b08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d04f      	beq.n	8007bba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b1a:	2308      	movs	r3, #8
 8007b1c:	425b      	negs	r3, r3
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	4413      	add	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	4b25      	ldr	r3, [pc, #148]	@ (8007bc4 <vPortFree+0xbc>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4013      	ands	r3, r2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10b      	bne.n	8007b4e <vPortFree+0x46>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	60fb      	str	r3, [r7, #12]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00b      	beq.n	8007b6e <vPortFree+0x66>
	__asm volatile
 8007b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	60bb      	str	r3, [r7, #8]
}
 8007b68:	bf00      	nop
 8007b6a:	bf00      	nop
 8007b6c:	e7fd      	b.n	8007b6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	4b14      	ldr	r3, [pc, #80]	@ (8007bc4 <vPortFree+0xbc>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4013      	ands	r3, r2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01e      	beq.n	8007bba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d11a      	bne.n	8007bba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	4b0e      	ldr	r3, [pc, #56]	@ (8007bc4 <vPortFree+0xbc>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	401a      	ands	r2, r3
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b94:	f7fe fb54 	bl	8006240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc8 <vPortFree+0xc0>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	4a09      	ldr	r2, [pc, #36]	@ (8007bc8 <vPortFree+0xc0>)
 8007ba4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ba6:	6938      	ldr	r0, [r7, #16]
 8007ba8:	f000 f874 	bl	8007c94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007bac:	4b07      	ldr	r3, [pc, #28]	@ (8007bcc <vPortFree+0xc4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	4a06      	ldr	r2, [pc, #24]	@ (8007bcc <vPortFree+0xc4>)
 8007bb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007bb6:	f7fe fb51 	bl	800625c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007bba:	bf00      	nop
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20004be4 	.word	0x20004be4
 8007bc8:	20004bd4 	.word	0x20004bd4
 8007bcc:	20004be0 	.word	0x20004be0

08007bd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007bd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007bda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007bdc:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <prvHeapInit+0xac>)
 8007bde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00c      	beq.n	8007c04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	3307      	adds	r3, #7
 8007bee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 0307 	bic.w	r3, r3, #7
 8007bf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007c7c <prvHeapInit+0xac>)
 8007c00:	4413      	add	r3, r2
 8007c02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c08:	4a1d      	ldr	r2, [pc, #116]	@ (8007c80 <prvHeapInit+0xb0>)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8007c80 <prvHeapInit+0xb0>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	4413      	add	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	1a9b      	subs	r3, r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f023 0307 	bic.w	r3, r3, #7
 8007c2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4a15      	ldr	r2, [pc, #84]	@ (8007c84 <prvHeapInit+0xb4>)
 8007c30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c32:	4b14      	ldr	r3, [pc, #80]	@ (8007c84 <prvHeapInit+0xb4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2200      	movs	r2, #0
 8007c38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c3a:	4b12      	ldr	r3, [pc, #72]	@ (8007c84 <prvHeapInit+0xb4>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	1ad2      	subs	r2, r2, r3
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007c50:	4b0c      	ldr	r3, [pc, #48]	@ (8007c84 <prvHeapInit+0xb4>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007c88 <prvHeapInit+0xb8>)
 8007c5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	4a09      	ldr	r2, [pc, #36]	@ (8007c8c <prvHeapInit+0xbc>)
 8007c66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007c68:	4b09      	ldr	r3, [pc, #36]	@ (8007c90 <prvHeapInit+0xc0>)
 8007c6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007c6e:	601a      	str	r2, [r3, #0]
}
 8007c70:	bf00      	nop
 8007c72:	3714      	adds	r7, #20
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	20000fc8 	.word	0x20000fc8
 8007c80:	20004bc8 	.word	0x20004bc8
 8007c84:	20004bd0 	.word	0x20004bd0
 8007c88:	20004bd8 	.word	0x20004bd8
 8007c8c:	20004bd4 	.word	0x20004bd4
 8007c90:	20004be4 	.word	0x20004be4

08007c94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c9c:	4b28      	ldr	r3, [pc, #160]	@ (8007d40 <prvInsertBlockIntoFreeList+0xac>)
 8007c9e:	60fb      	str	r3, [r7, #12]
 8007ca0:	e002      	b.n	8007ca8 <prvInsertBlockIntoFreeList+0x14>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d8f7      	bhi.n	8007ca2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d108      	bne.n	8007cd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	441a      	add	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	441a      	add	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d118      	bne.n	8007d1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	4b15      	ldr	r3, [pc, #84]	@ (8007d44 <prvInsertBlockIntoFreeList+0xb0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d00d      	beq.n	8007d12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	441a      	add	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	e008      	b.n	8007d24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d12:	4b0c      	ldr	r3, [pc, #48]	@ (8007d44 <prvInsertBlockIntoFreeList+0xb0>)
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	e003      	b.n	8007d24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d002      	beq.n	8007d32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	20004bc8 	.word	0x20004bc8
 8007d44:	20004bd0 	.word	0x20004bd0

08007d48 <PID_Update>:



// PID 宏（改寫成浮點數邏輯）
float PID_Update(PIDController *v)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
    v->data.up = v->param.Kr * (v->term.Ref - v->term.Fbk);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	edd3 6a08 	vldr	s13, [r3, #32]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007d62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	edc3 7a00 	vstr	s15, [r3]
                                                                                      
    v->data.ui = v->param.Ki * (v->data.w1 * v->data.up) + v->data.i1;                    
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	edd3 6a07 	vldr	s13, [r3, #28]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	edd3 7a00 	vldr	s15, [r3]
 8007d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	edc3 7a01 	vstr	s15, [r3, #4]
    v->data.i1 = v->data.ui;                                                            
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	619a      	str	r2, [r3, #24]
                                                                                      
    v->data.d2 = v->param.Kd * (v->data.up - v->data.d1);                                
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	edd3 6a00 	vldr	s13, [r3]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	edd3 7a04 	vldr	s15, [r3, #16]
 8007db4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	edc3 7a05 	vstr	s15, [r3, #20]
    v->data.ud = v->term.c2 * v->data.ud + v->term.c1 * v->data.d2;                        
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	edd3 7a02 	vldr	s15, [r3, #8]
 8007dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	edd3 7a05 	vldr	s15, [r3, #20]
 8007dde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	edc3 7a02 	vstr	s15, [r3, #8]
    v->data.d1 = v->data.up;                                                            
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	611a      	str	r2, [r3, #16]
                                                                                      
    v->data.v1 = v->param.Kp * (v->data.up + v->data.ui + v->data.ud);                     
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	edd3 6a00 	vldr	s13, [r3]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	edd3 7a01 	vldr	s15, [r3, #4]
 8007e06:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	edc3 7a03 	vstr	s15, [r3, #12]
    v->term.Out = fminf(fmaxf(v->data.v1, v->param.Umin), v->param.Umax);                 
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8007e2a:	eef0 0a47 	vmov.f32	s1, s14
 8007e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e32:	f000 f865 	bl	8007f00 <fmaxf>
 8007e36:	eeb0 7a40 	vmov.f32	s14, s0
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8007e40:	eef0 0a67 	vmov.f32	s1, s15
 8007e44:	eeb0 0a47 	vmov.f32	s0, s14
 8007e48:	f000 f877 	bl	8007f3a <fminf>
 8007e4c:	eef0 7a40 	vmov.f32	s15, s0
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    v->data.w1 = (v->term.Out == v->data.v1) ? 1 : 0;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007e62:	eeb4 7a67 	vcmp.f32	s14, s15
 8007e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e6a:	d102      	bne.n	8007e72 <PID_Update+0x12a>
 8007e6c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007e70:	e001      	b.n	8007e76 <PID_Update+0x12e>
 8007e72:	f04f 0200 	mov.w	r2, #0
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	61da      	str	r2, [r3, #28]
	
	return v->term.Out;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7e:	ee07 3a90 	vmov	s15, r3
}
 8007e82:	eeb0 0a67 	vmov.f32	s0, s15
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <memset>:
 8007e8c:	4402      	add	r2, r0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d100      	bne.n	8007e96 <memset+0xa>
 8007e94:	4770      	bx	lr
 8007e96:	f803 1b01 	strb.w	r1, [r3], #1
 8007e9a:	e7f9      	b.n	8007e90 <memset+0x4>

08007e9c <__libc_init_array>:
 8007e9c:	b570      	push	{r4, r5, r6, lr}
 8007e9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007ed4 <__libc_init_array+0x38>)
 8007ea0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ed8 <__libc_init_array+0x3c>)
 8007ea2:	1b64      	subs	r4, r4, r5
 8007ea4:	10a4      	asrs	r4, r4, #2
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	42a6      	cmp	r6, r4
 8007eaa:	d109      	bne.n	8007ec0 <__libc_init_array+0x24>
 8007eac:	4d0b      	ldr	r5, [pc, #44]	@ (8007edc <__libc_init_array+0x40>)
 8007eae:	4c0c      	ldr	r4, [pc, #48]	@ (8007ee0 <__libc_init_array+0x44>)
 8007eb0:	f000 f87c 	bl	8007fac <_init>
 8007eb4:	1b64      	subs	r4, r4, r5
 8007eb6:	10a4      	asrs	r4, r4, #2
 8007eb8:	2600      	movs	r6, #0
 8007eba:	42a6      	cmp	r6, r4
 8007ebc:	d105      	bne.n	8007eca <__libc_init_array+0x2e>
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec4:	4798      	blx	r3
 8007ec6:	3601      	adds	r6, #1
 8007ec8:	e7ee      	b.n	8007ea8 <__libc_init_array+0xc>
 8007eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ece:	4798      	blx	r3
 8007ed0:	3601      	adds	r6, #1
 8007ed2:	e7f2      	b.n	8007eba <__libc_init_array+0x1e>
 8007ed4:	080087c0 	.word	0x080087c0
 8007ed8:	080087c0 	.word	0x080087c0
 8007edc:	080087c0 	.word	0x080087c0
 8007ee0:	080087c4 	.word	0x080087c4

08007ee4 <memcpy>:
 8007ee4:	440a      	add	r2, r1
 8007ee6:	4291      	cmp	r1, r2
 8007ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eec:	d100      	bne.n	8007ef0 <memcpy+0xc>
 8007eee:	4770      	bx	lr
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007efa:	4291      	cmp	r1, r2
 8007efc:	d1f9      	bne.n	8007ef2 <memcpy+0xe>
 8007efe:	bd10      	pop	{r4, pc}

08007f00 <fmaxf>:
 8007f00:	b508      	push	{r3, lr}
 8007f02:	ed2d 8b02 	vpush	{d8}
 8007f06:	eeb0 8a40 	vmov.f32	s16, s0
 8007f0a:	eef0 8a60 	vmov.f32	s17, s1
 8007f0e:	f000 f831 	bl	8007f74 <__fpclassifyf>
 8007f12:	b930      	cbnz	r0, 8007f22 <fmaxf+0x22>
 8007f14:	eeb0 8a68 	vmov.f32	s16, s17
 8007f18:	eeb0 0a48 	vmov.f32	s0, s16
 8007f1c:	ecbd 8b02 	vpop	{d8}
 8007f20:	bd08      	pop	{r3, pc}
 8007f22:	eeb0 0a68 	vmov.f32	s0, s17
 8007f26:	f000 f825 	bl	8007f74 <__fpclassifyf>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d0f4      	beq.n	8007f18 <fmaxf+0x18>
 8007f2e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f36:	dded      	ble.n	8007f14 <fmaxf+0x14>
 8007f38:	e7ee      	b.n	8007f18 <fmaxf+0x18>

08007f3a <fminf>:
 8007f3a:	b508      	push	{r3, lr}
 8007f3c:	ed2d 8b02 	vpush	{d8}
 8007f40:	eeb0 8a40 	vmov.f32	s16, s0
 8007f44:	eef0 8a60 	vmov.f32	s17, s1
 8007f48:	f000 f814 	bl	8007f74 <__fpclassifyf>
 8007f4c:	b930      	cbnz	r0, 8007f5c <fminf+0x22>
 8007f4e:	eeb0 8a68 	vmov.f32	s16, s17
 8007f52:	eeb0 0a48 	vmov.f32	s0, s16
 8007f56:	ecbd 8b02 	vpop	{d8}
 8007f5a:	bd08      	pop	{r3, pc}
 8007f5c:	eeb0 0a68 	vmov.f32	s0, s17
 8007f60:	f000 f808 	bl	8007f74 <__fpclassifyf>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d0f4      	beq.n	8007f52 <fminf+0x18>
 8007f68:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f70:	d5ed      	bpl.n	8007f4e <fminf+0x14>
 8007f72:	e7ee      	b.n	8007f52 <fminf+0x18>

08007f74 <__fpclassifyf>:
 8007f74:	ee10 3a10 	vmov	r3, s0
 8007f78:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8007f7c:	d00d      	beq.n	8007f9a <__fpclassifyf+0x26>
 8007f7e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8007f82:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8007f86:	d30a      	bcc.n	8007f9e <__fpclassifyf+0x2a>
 8007f88:	4b07      	ldr	r3, [pc, #28]	@ (8007fa8 <__fpclassifyf+0x34>)
 8007f8a:	1e42      	subs	r2, r0, #1
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d908      	bls.n	8007fa2 <__fpclassifyf+0x2e>
 8007f90:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8007f94:	4258      	negs	r0, r3
 8007f96:	4158      	adcs	r0, r3
 8007f98:	4770      	bx	lr
 8007f9a:	2002      	movs	r0, #2
 8007f9c:	4770      	bx	lr
 8007f9e:	2004      	movs	r0, #4
 8007fa0:	4770      	bx	lr
 8007fa2:	2003      	movs	r0, #3
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	007ffffe 	.word	0x007ffffe

08007fac <_init>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	bf00      	nop
 8007fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb2:	bc08      	pop	{r3}
 8007fb4:	469e      	mov	lr, r3
 8007fb6:	4770      	bx	lr

08007fb8 <_fini>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr
